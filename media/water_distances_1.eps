%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: water_distances.pdf
%%Creator: Adobe Acrobat 11.0.23
%%For: Gollum
%%CreationDate: 2/27/2018, 5:56:27 PM
%%BoundingBox: 0 0 288 216
%%HiResBoundingBox: 0 0 288 216
%%CropBox: 0 0 288 216
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1093 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.4-c006 80.159825, 2016/09/16-03:31:08        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   xmp:ModifyDate="2018-02-27T17:56:14-05:00"
   xmp:CreateDate="2018-02-27T17:54:55-05:00"
   xmp:MetadataDate="2018-02-27T17:56:14-05:00"
   xmp:CreatorTool="Acrobat PDFMaker 11 for PowerPoint"
   xmpMM:DocumentID="uuid:7ba52d38-78ab-4c62-9a69-dd82e84e2688"
   xmpMM:InstanceID="uuid:d7b0a9ba-3121-4bf9-b991-c1e1b7150fb5"
   dc:format="application/pdf"
   pdf:Producer="Adobe PDF Library 11.0">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">PowerPoint Presentation</rdf:li>
    </rdf:Alt>
   </dc:title>
   <dc:creator>
    <rdf:Seq>
     <rdf:li>Volodymyr Sakun</rdf:li>
    </rdf:Seq>
   </dc:creator>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -216 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 216 li
288 216 li
288 0 li
cp
clp
gsave
0 216 mo
288 216 li
288 0 li
0 0 li
0 216 li
clp
-137.617 228.337 mo
368.852 228.337 li
368.852 -56.5522 li
-137.617 -56.5522 li
-137.617 228.337 li
false sop
0 0 0 0 cmyk
f
52.4988 63.038 mo
52.4988 58.8421 56.0277 55.441 60.3807 55.441 cv
64.7337 55.441 68.2626 58.8421 68.2626 63.038 cv
68.2626 67.2338 64.7337 70.635 60.3807 70.635 cv
56.0277 70.635 52.4988 67.2338 52.4988 63.038 cv
0 1 1 0 cmyk
ef
52.4987 63.038 mo
52.2455 63.038 li
52.2453 60.8681 53.159 58.9024 54.6315 57.4838 cv
56.1039 56.0643 58.1377 55.1877 60.3807 55.1877 cv
62.6236 55.1877 64.6573 56.0643 66.1297 57.4838 cv
67.6023 58.9024 68.516 60.8681 68.5158 63.038 cv
68.516 65.2078 67.6023 67.1736 66.1297 68.5922 cv
64.6573 70.0116 62.6236 70.8883 60.3807 70.8883 cv
58.1377 70.8883 56.1039 70.0116 54.6315 68.5922 cv
53.159 67.1736 52.2453 65.2078 52.2455 63.038 cv
52.4987 63.038 li
52.752 63.038 li
52.7522 65.064 53.6029 66.8967 54.983 68.2276 cv
56.3634 69.5578 58.2706 70.3818 60.3807 70.3819 cv
62.4906 70.3818 64.3979 69.5578 65.7782 68.2276 cv
67.1583 66.8967 68.0091 65.064 68.0093 63.038 cv
68.0091 61.012 67.1583 59.1793 65.7782 57.8484 cv
64.3979 56.5181 62.4906 55.6942 60.3807 55.6941 cv
58.2706 55.6942 56.3634 56.5181 54.983 57.8484 cv
53.6029 59.1793 52.7522 61.012 52.752 63.038 cv
52.4987 63.038 li
1 .816159 .15967 .0319219 cmyk
f
52.8786 124.004 mo
52.8786 119.808 56.4076 116.407 60.7606 116.407 cv
65.1135 116.407 68.6425 119.808 68.6425 124.004 cv
68.6425 128.2 65.1135 131.601 60.7606 131.601 cv
56.4076 131.601 52.8786 128.2 52.8786 124.004 cv
0 1 1 0 cmyk
ef
52.8786 124.004 mo
52.6253 124.004 li
52.6251 121.834 53.5389 119.869 55.0114 118.45 cv
56.4837 117.031 58.5175 116.154 60.7605 116.154 cv
63.0035 116.154 65.0372 117.031 66.5096 118.45 cv
67.9822 119.869 68.8959 121.834 68.8957 124.004 cv
68.8959 126.174 67.9822 128.14 66.5096 129.559 cv
65.0372 130.978 63.0035 131.855 60.7605 131.855 cv
58.5175 131.855 56.4837 130.978 55.0114 129.559 cv
53.5389 128.14 52.6251 126.174 52.6253 124.004 cv
52.8786 124.004 li
53.1318 124.004 li
53.1319 126.03 53.9827 127.863 55.3628 129.194 cv
56.7432 130.524 58.6505 131.348 60.7605 131.348 cv
62.8705 131.348 64.7777 130.524 66.1581 129.194 cv
67.5382 127.863 68.3889 126.03 68.3892 124.004 cv
68.389 121.978 67.5382 120.145 66.1581 118.815 cv
64.7777 117.484 62.8705 116.661 60.7605 116.66 cv
58.6505 116.661 56.7432 117.484 55.3628 118.815 cv
53.9827 120.145 53.1319 121.978 53.1318 124.004 cv
52.8786 124.004 li
1 .816159 .15967 .0319219 cmyk
f
1.07625 lw
0 lc
0 lj
8 ml
[] 0 dsh
true sadj
54.8294 68.3875 mo
12.9623 168.715 li
.750271 .679713 .654902 .901945 cmyk
@
54.8729 68.3875 mo
55.2369 118.627 li
@
.50647 lw
[4.05176 1.51941 .50647 1.51941 .50647 1.51941 ] 0 dsh
66.3634 118.593 mo
107.867 18.2787 li
@
60.4124 70.635 mo
66.3507 118.649 li
@
55.0939 118.688 mo
54.7094 117.751 li
54.9437 117.655 li
55.3282 118.592 li
55.0939 118.688 li
54.4211 117.048 mo
54.0366 116.111 li
54.2709 116.015 li
54.6553 116.952 li
54.4211 117.048 li
53.7483 115.408 mo
53.3638 114.471 li
53.5981 114.375 li
53.9826 115.312 li
53.7483 115.408 li
53.0754 113.768 mo
52.6909 112.831 li
52.9253 112.735 li
53.3097 113.672 li
53.0754 113.768 li
52.4027 112.128 mo
52.0182 111.191 li
52.2524 111.095 li
52.6369 112.032 li
52.4027 112.128 li
51.7298 110.488 mo
51.3453 109.551 li
51.5796 109.455 li
51.964 110.392 li
51.7298 110.488 li
51.0569 108.849 mo
50.6725 107.911 li
50.9068 107.815 li
51.2913 108.752 li
51.0569 108.849 li
50.3841 107.209 mo
49.9996 106.271 li
50.2339 106.175 li
50.6184 107.112 li
50.3841 107.209 li
49.7113 105.568 mo
49.3269 104.631 li
49.5611 104.535 li
49.9456 105.472 li
49.7113 105.568 li
49.0385 103.929 mo
48.654 102.991 li
48.8883 102.895 li
49.2728 103.832 li
49.0385 103.929 li
48.3656 102.289 mo
47.9812 101.351 li
48.2155 101.255 li
48.6 102.192 li
48.3656 102.289 li
47.6928 100.649 mo
47.3083 99.7114 li
47.5426 99.6152 li
47.9271 100.552 li
47.6928 100.649 li
47.02 99.0086 mo
46.6355 98.0714 li
46.8698 97.9753 li
47.2542 98.9125 li
47.02 99.0086 li
46.3472 97.3686 mo
45.9627 96.4314 li
46.197 96.3353 li
46.5815 97.2724 li
46.3472 97.3686 li
45.6743 95.7285 mo
45.2898 94.7914 li
45.5242 94.6953 li
45.9086 95.6324 li
45.6743 95.7285 li
45.0016 94.0886 mo
44.6171 93.1515 li
44.8513 93.0553 li
45.2358 93.9925 li
45.0016 94.0886 li
44.3287 92.4486 mo
43.9442 91.5115 li
44.1785 91.4153 li
44.5629 92.3525 li
44.3287 92.4486 li
43.6559 90.8086 mo
43.2714 89.8715 li
43.5057 89.7754 li
43.8902 90.7124 li
43.6559 90.8086 li
42.983 89.1686 mo
42.5985 88.2315 li
42.8329 88.1354 li
43.2173 89.0725 li
42.983 89.1686 li
42.3102 87.5286 mo
41.9258 86.5915 li
42.16 86.4954 li
42.5445 87.4325 li
42.3102 87.5286 li
41.6374 85.8887 mo
41.2529 84.9515 li
41.4872 84.8554 li
41.8717 85.7926 li
41.6374 85.8887 li
40.9645 84.2487 mo
40.5801 83.3115 li
40.8144 83.2154 li
41.1989 84.1525 li
40.9645 84.2487 li
40.2917 82.6087 mo
39.9072 81.6715 li
40.1415 81.5754 li
40.526 82.5125 li
40.2917 82.6087 li
39.6189 80.9687 mo
39.2345 80.0316 li
39.4687 79.9355 li
39.8532 80.8726 li
39.6189 80.9687 li
38.9461 79.3287 mo
38.5616 78.3916 li
38.7959 78.2954 li
39.1804 79.2326 li
38.9461 79.3287 li
38.2732 77.6887 mo
37.8887 76.7516 li
38.1231 76.6555 li
38.5075 77.5926 li
38.2732 77.6887 li
37.6004 76.0487 mo
37.216 75.1116 li
37.4502 75.0155 li
37.8347 75.9526 li
37.6004 76.0487 li
36.9276 74.4087 mo
36.5431 73.4716 li
36.7774 73.3755 li
37.1618 74.3126 li
36.9276 74.4087 li
36.2548 72.7687 mo
35.8703 71.8317 li
36.1046 71.7355 li
36.4891 72.6727 li
36.2548 72.7687 li
35.5819 71.1288 mo
35.1974 70.1916 li
35.4318 70.0955 li
35.8162 71.0327 li
35.5819 71.1288 li
34.9092 69.4888 mo
34.5247 68.5516 li
34.7589 68.4555 li
35.1434 69.3926 li
34.9092 69.4888 li
34.2363 67.8488 mo
33.8518 66.9117 li
34.0861 66.8156 li
34.4705 67.7527 li
34.2363 67.8488 li
33.5634 66.2088 mo
33.179 65.2717 li
33.4133 65.1755 li
33.7978 66.1127 li
33.5634 66.2088 li
32.8906 64.5688 mo
32.5061 63.6316 li
32.7404 63.5356 li
33.1249 64.4727 li
32.8906 64.5688 li
32.2178 62.9289 mo
31.8334 61.9917 li
32.0676 61.8956 li
32.4521 62.8327 li
32.2178 62.9289 li
31.545 61.2888 mo
31.1605 60.3517 li
31.3948 60.2556 li
31.7793 61.1927 li
31.545 61.2888 li
30.8721 59.6488 mo
30.4877 58.7117 li
30.722 58.6156 li
31.1065 59.5527 li
30.8721 59.6488 li
30.1993 58.0089 mo
29.8148 57.0717 li
30.0491 56.9756 li
30.4336 57.9128 li
30.1993 58.0089 li
29.5265 56.3689 mo
29.1421 55.4317 li
29.3763 55.3356 li
29.7607 56.2727 li
29.5265 56.3689 li
28.8537 54.7288 mo
28.4692 53.7918 li
28.7035 53.6957 li
29.088 54.6328 li
28.8537 54.7288 li
28.1808 53.0889 mo
27.7963 52.1518 li
28.0307 52.0556 li
28.4151 52.9928 li
28.1808 53.0889 li
27.5081 51.4489 mo
27.1236 50.5117 li
27.3578 50.4156 li
27.7423 51.3528 li
27.5081 51.4489 li
26.8352 49.809 mo
26.4507 48.8718 li
26.685 48.7757 li
27.0694 49.7128 li
26.8352 49.809 li
26.1624 48.1689 mo
25.7779 47.2318 li
26.0122 47.1357 li
26.3967 48.0728 li
26.1624 48.1689 li
25.4895 46.5289 mo
25.105 45.5918 li
25.3394 45.4957 li
25.7238 46.4328 li
25.4895 46.5289 li
24.8167 44.889 mo
24.4323 43.9519 li
24.6665 43.8557 li
25.051 44.7929 li
24.8167 44.889 li
24.1439 43.249 mo
23.7594 42.3118 li
23.9937 42.2157 li
24.3782 43.1528 li
24.1439 43.249 li
23.471 41.6089 mo
23.0866 40.6718 li
23.3209 40.5757 li
23.7054 41.5128 li
23.471 41.6089 li
22.7982 39.969 mo
22.4137 39.0319 li
22.648 38.9358 li
23.0325 39.8729 li
22.7982 39.969 li
22.1254 38.329 mo
21.741 37.3919 li
21.9752 37.2957 li
22.3597 38.2329 li
22.1254 38.329 li
21.4526 36.6891 mo
21.0681 35.7518 li
21.3024 35.6558 li
21.6869 36.5929 li
21.4526 36.6891 li
20.7797 35.049 mo
20.3952 34.1119 li
20.6296 34.0158 li
21.014 34.9529 li
20.7797 35.049 li
20.107 33.409 mo
19.7225 32.4719 li
19.9567 32.3758 li
20.3412 33.3129 li
20.107 33.409 li
19.4341 31.7691 mo
19.0496 30.832 li
19.2839 30.7358 li
19.6683 31.673 li
19.4341 31.7691 li
18.7613 30.1291 mo
18.3768 29.1919 li
18.6111 29.0958 li
18.9956 30.033 li
18.7613 30.1291 li
18.0884 28.4891 mo
17.7039 27.5519 li
17.9383 27.4558 li
18.3227 28.3929 li
18.0884 28.4891 li
17.4157 26.8491 mo
17.0312 25.912 li
17.2654 25.8159 li
17.6499 26.753 li
17.4157 26.8491 li
16.7428 25.2091 mo
16.3583 24.272 li
16.5926 24.1758 li
16.977 25.113 li
16.7428 25.2091 li
16.0699 23.5691 mo
15.6855 22.6319 li
15.9198 22.5358 li
16.3043 23.4731 li
16.0699 23.5691 li
15.3971 21.9292 mo
15.0126 20.992 li
15.2469 20.8959 li
15.6314 21.833 li
15.3971 21.9292 li
14.7243 20.2891 mo
14.3399 19.352 li
14.5741 19.2559 li
14.9586 20.193 li
14.7243 20.2891 li
14.0515 18.6491 mo
13.7634 17.9469 li
13.9977 17.8508 li
14.2858 18.5531 li
14.0515 18.6491 li
f
.253235 lw
[1.01294 .759705 ] 0 dsh
60.4318 70.635 mo
55.221 118.649 li
@
[2.02588 .759705 ] 0 dsh
65.9835 68.3559 mo
107.851 168.683 li
@
65.9835 68.3559 mo
66.3476 118.595 li
@
104.032 172.499 mo
104.032 170.401 105.733 168.7 107.831 168.7 cv
109.928 168.7 111.629 170.401 111.629 172.499 cv
111.629 174.596 109.928 176.297 107.831 176.297 cv
105.733 176.297 104.032 174.596 104.032 172.499 cv
.808743 .585351 0 0 cmyk
ef
104.032 172.499 mo
103.779 172.499 li
103.779 170.261 105.593 168.447 107.83 168.447 cv
110.068 168.447 111.882 170.261 111.882 172.499 cv
111.882 174.736 110.068 176.55 107.83 176.55 cv
105.593 176.55 103.779 174.736 103.779 172.499 cv
104.032 172.499 li
104.285 172.499 li
104.289 174.456 105.873 176.04 107.83 176.044 cv
109.788 176.04 111.372 174.456 111.376 172.499 cv
111.372 170.541 109.788 168.957 107.83 168.953 cv
105.873 168.957 104.289 170.541 104.285 172.499 cv
104.032 172.499 li
1 .816159 .15967 .0319219 cmyk
f
9.13235 14.4802 mo
9.13235 12.3826 10.8332 10.6817 12.9308 10.6817 cv
15.0284 10.6817 16.7294 12.3826 16.7294 14.4802 cv
16.7294 16.5778 15.0284 18.2787 12.9308 18.2787 cv
10.8332 18.2787 9.13235 16.5778 9.13235 14.4802 cv
.808743 .585351 0 0 cmyk
ef
9.13226 14.4802 mo
8.87907 14.4802 li
8.87925 12.2426 10.6931 10.4287 12.9308 10.4285 cv
15.1684 10.4287 16.9823 12.2426 16.9825 14.4802 cv
16.9824 16.7179 15.1684 18.5317 12.9308 18.5319 cv
10.6931 18.5317 8.87925 16.7179 8.87907 14.4802 cv
9.13226 14.4802 li
9.38545 14.4802 li
9.38905 16.4379 10.9731 18.0219 12.9308 18.0255 cv
14.8884 18.0219 16.4725 16.4379 16.4761 14.4802 cv
16.4725 12.5226 14.8884 10.9385 12.9308 10.9349 cv
10.9731 10.9385 9.38905 12.5226 9.38545 14.4802 cv
9.13226 14.4802 li
1 .816159 .15967 .0319219 cmyk
f
104.032 14.4802 mo
104.032 12.3826 105.733 10.6817 107.831 10.6817 cv
109.928 10.6817 111.629 12.3826 111.629 14.4802 cv
111.629 16.5778 109.928 18.2787 107.831 18.2787 cv
105.733 18.2787 104.032 16.5778 104.032 14.4802 cv
.808743 .585351 0 0 cmyk
ef
104.032 14.4802 mo
103.779 14.4802 li
103.779 12.2426 105.593 10.4287 107.83 10.4285 cv
110.068 10.4287 111.882 12.2426 111.882 14.4802 cv
111.882 16.7179 110.068 18.5317 107.83 18.5319 cv
105.593 18.5317 103.779 16.7179 103.779 14.4802 cv
104.032 14.4802 li
104.285 14.4802 li
104.289 16.4379 105.873 18.0219 107.83 18.0255 cv
109.788 18.0219 111.372 16.4379 111.376 14.4802 cv
111.372 12.5226 109.788 10.9385 107.83 10.9349 cv
105.873 10.9385 104.289 12.5226 104.285 14.4802 cv
104.032 14.4802 li
1 .816159 .15967 .0319219 cmyk
f
9.13235 172.499 mo
9.13235 170.401 10.8332 168.7 12.9308 168.7 cv
15.0284 168.7 16.7294 170.401 16.7294 172.499 cv
16.7294 174.596 15.0284 176.297 12.9308 176.297 cv
10.8332 176.297 9.13235 174.596 9.13235 172.499 cv
.808743 .585351 0 0 cmyk
ef
9.13226 172.499 mo
8.87907 172.499 li
8.87925 170.261 10.6931 168.447 12.9308 168.447 cv
15.1684 168.447 16.9823 170.261 16.9825 172.499 cv
16.9824 174.736 15.1684 176.55 12.9308 176.55 cv
10.6931 176.55 8.87925 174.736 8.87907 172.499 cv
9.13226 172.499 li
9.38545 172.499 li
9.38905 174.456 10.9731 176.04 12.9308 176.044 cv
14.8884 176.04 16.4725 174.456 16.4761 172.499 cv
16.4725 170.541 14.8884 168.957 12.9308 168.953 cv
10.9731 168.957 9.38905 170.541 9.38545 172.499 cv
9.13226 172.499 li
1 .816159 .15967 .0319219 cmyk
f
.750271 .679713 .654902 .901945 cmyk
%ADOBeginSubsetFont: PBAAAA+Calibri Initial
ct_T42Dict begin
-0.5 -0.305 1.238 0.961
 256 array 0 1 255 {1 index exch /.notdef put} for  /PBAAAA+Calibri
Type42DictBegin
[<00010000000c000c000c000c4f532f32f9e5b7d7000000cc000000606376
7420b09bc4d20000012c0000051c6670676df6f64d0c000006480000091a
676c7966bb6e81290000b18c0000175868656164e625fe3e00000f640000
0036686865610dad124400000f9c00000024686d74780b0cadc000000fc0
00003c4a6c6f63610123b65000004c0c00003c8c6d617870214303970000
8898000000206e616d65cf334127000088b8000004c1707265706baf02fe
00008d7c00002410676469720000000000000000000000000003042b0190
00050008059905330000011e05990533000003d0008602000800020f0502
020204030204e10002ff4000acff00000009000000004d53202000400000
feff0600fe0001c4079e02262000019f0000000003b7050e000000200003
0000079e0000fe930000000000000000000000000050006a007300800080
0086008d009300bf00db006200830093009900a000a600a900b000c100c9
00d700000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000fe79056d000c03b700060013
0000fffaffedfea6ffedfeb8050e000600130000fffaffedfe93050e0013
0420000600130000fffaffedff10ffee050e00130420000600130000fffa
ffeefe93ff10feb80612000a050e0006000d02d2fffafff301fdfffa023f
0006000dff36fffafff302870006000f0000fffafff1079efeaffea70000
0000000000000000000000500051005a005b005c005d0060006100620064
00680069006a006b006c006d006e00680069006e00600067006e00660068
005f00610063006400660068006a006b006c006d006e006f0070006f0072
0074007500760076007000720073007400750076006f0070007100720073
00750077007700780079007a007b007c007d007b007c007d00770079007a
007c0078007a007c007d0078007d007e007f008000810082007e007f0081
0082007e007f008000810082008300840085008600870088008900830084
008500860087008800890083008400850086008700880089008900860087
00880089008a008b008c008d008e008f008a008b008c008d008e008f008a
008b008c008d008e008f008d008a008b008c008d008e008f009000900091
0092009300940095009600980099009b009c009000910092009300940095
0096009700980099009a009e009f00a60090009100950098009f00900091
0096009700bc00c600b500ae00af00b6006800690063006a006f00700071
006f0070007100720066006c006d00700079007c007f0083008600870088
0089008a0074007500760077007a007b007c007d007e008200850086008a
0088008900830078007b00820083008600870088008900760079007a007c
007d007e0083008500880089008a0073007400750077007a007d00880089
008a008b008c008d008e00900094008b008c008d00910092009300940095
008c008d00910095008f009000910092009300940095008b008c008d008e
008f009000910092009300940095008b008c008d008e008f009000910092
00930096009700980099009c0096009700980099009a009b009c00960099
009a009c0096009700980099009a009b009c009700980099009a009b009c
009700980099009a009b009c0096009d00a000a1009d009e009f00a000a1
00a2009d009f00a000a1009f00a2009d009e009f00a000a100a2009d009e
00a000a1009d009e00a000a2009d00a300a400a500a600a700a300a400a6
00a700a300a400a500a600a700a600a300a700a800a900aa00ab00ac00ac
00a800a900aa00ab00ac00a800a900aa00ab00ac00a800aa00ab00ac00ae
00ad00ae00af00b000b100b200b300b400b500b600b700b800ad00ae00ad
00ae00af00b000b100b200b300b400b500b600b700b800ad00ae00af00b0
00b100b200b300b400b500b600b700b800b300ae00af00b000b200b500b6
00b700b800b900ba00bb00bc00be00c000c100c200c200b900ba00bb00bc
00bd00be00bf00c000c100c200c400ba00bb00be00bf00c000c200c300c4
00b900ba00bf00c000c200c600c700c900ca00cb00cc00cf00c500c700ce
00c500c700c800cf00d000d200d300d7010d00d000d100e900d000fd00d0
05e4000e0041000005ba009c009c005e005e4047645f5e5d5c5b5a595855
54535251504f4e4d4c4b4a494847464544434241403f3e3d3c3b3a393837
36352f2e2d2c2826252423221f181411100f0d0b0a090807060504030201
002c4523466020b02660b004262348482d2c452346236120b02661b00426
2348482d2c45234660b0206120b04660b004262348482d2c4523462361b0
206020b02661b02061b004262348482d2c45234660b0406120b06660b004
262348482d2c4523462361b0406020b02661b04061b004262348482d2c01
10203c003c2d2c20452320b0cd442320b8015a51582320b08d44235920b0
ed51582320b04d44235920b0042651582320b00d44235921212d2c202045
18684420b001602045b04676688a4560442d2c01b10b0a432343650a2d2c
00b10a0b4323430b2d2c00b0282370b101283e01b0282370b10228453ab1
0200080d2d2c2045b00325456164b050515845441b2121592d2c2045b000
4360442d2c01b00643b00743650a2d2c2069b04061b0008b20b12cc08a8c
b8100062602b0c642364615c58b00361592d2c8a03458a8a87b0112bb029
2344b0297ae4182d2c4565b02c234445b02b23442d2c4b525845441b2121
592d2c01b005251023208af500b0016023edec2d2c01b005251023208af5
00b0016123edec2d2c01b0062510f500edec2d2c20b001600110203c003c
2d2c20b001610110203c003c2d2c00b00743b006430b2d2c21210c642364
8bb84000622d2c21b08051580c6423648bb82000621bb200402f2b59b002
602d2c21b0c051580c6423648bb81555621bb200802f2b59b002602d2c0c
6423648bb84000626023212d2c4523456023456023456023766818b08062
202d2cb00426b00426b00425b0042545234520b003266062636820b00326
61658a2344442d2c2045b0005458b040442045b04061441b2121592d2c45
b1302f4523456160b0016069442d2c4b5158b02f2370b01423421b212159
2d2c4b515820b0032545695358441b2121591b2121592d2c45b01443b000
6063b0016069442d2cb02f45442d2c452320458a60442d2c45234560442d
2c4b235158b90033ffe0b134201bb3330034005944442d2cb0164358b003
26458a586466b01f601b64b020606620581b21b04059b001615923586559
b02923442310b029e01b2121212121592d2cb0164358b004254564b02060
6620581b21b04059b0016123586559b0292344b00425b00725082058021b
0359b0052510b004252046b0042523423cb0072510b006252046b00425b0
016023423c2058011b0059b0052510b00425b029e0b0072510b00625b029
e0b00425b00725082058021b0359b00425b003254348b00625b00325b001
6043481b2159212121212121212d2cb0164358b004254564b02060662058
1b21b04059b0016123581b6559b0292344b00525b00825082058021b0359
b0042510b005252046b0042523423cb00425b0072508b0072510b0062520
46b00425b0016023423c2058011b0059b0042510b00525b029e0b0292045
6544b0072510b00625b029e0b00525b00825082058021b0359b00525b003
254348b00425b0072508b00625b00325b0016043481b2159212121212121
212d2c02b00425202046b004252342b0052508b003254548212121212d2c
02b0032520b0042508b0022543482121212d2c452320451820b000502058
23652359236820b040505821b04059235865598a60442d2c4b53234b515a
5820458a60441b2121592d2c4b545820458a60441b2121592d2c4b53234b
515a58381b2121592d2cb000214b5458381b2121592d2cb002435458b046
2b1b21212121592d2cb002435458b0472b1b212121592d2cb002435458b0
482b1b21212121592d2cb002435458b0492b1b212121592d2c208a08234b
538a4b515a5823381b2121592d2c0020b200400325b0062649618b381234
2d2c014623466023466123201020468a61b8ff80628ab140408a70456068
3a2d2c208a2349648a2353583c1b21592d2c4b52587d1b7a592d2cb01200
4b014b54422d2cb1020042b123018851b1400188535a58b9100000208854
58b202010243604259b12401885158b920000040885458b2020202436042
b12401885458b2022002436042004b014b5258b2020802436042591bb940
000080885458b202040243604259b94000008063b80100885458b2020802
43604259b94000010063b80200885458b202100243604259b94000020063
b80400885458b202400243604259595959592d2c451868234b5158232045
2064b04050587c59688a6059442d2cb00016b00225b0022501b001233e00
b002233eb10102060cb00a236542b00b234201b001233f00b002233fb101
02060cb006236542b0072342b00116012d2c20b82000628a6023622d2cb0
072558001b0159b0042510b00325b0022520b8ffff545821cd1bed5921b0
06255cb006255a58b0092b5920b005254ab0042547b004254760b0062547
b0806361b00225b0005558b00325b00725496359b0082558001b0159b004
25b0062549b009255cb009255a58b0092b59b0072546b0806361b0032520
b0005558631b2159612320b0005558b080631b21b08059b0592bb006255c
586959b00425202010b00048233ab0062658001b0159b0052658b003252f
598a12233221212d2cb00625b00a2587b00625b009254ab0005358b00625
b00a251bb00925b0072559b00225b00225070cb005256323b00625636020
b94000040063535821b00426b00426b00a1bb94000040063655158b00426
65b0042665b00a1bb00426b00426b000b00325b003250b0d0ab0092eb007
25b007250b0d0ab00b2eb00525b0052507595920b0005558b00525b00525
87b00725b007250bb0092510b00b25b0092620b8ffff545821cd1bed59b0
0525b0052507b00825b00b254923b00625b0062587b00a2510b00b25c159
20b00051b800522378b00161b00225b00725b0072507b00a25b00d254961
b08062b00525b005250bb00a252338b00625b0062587b00825b008250bb0
0a2510b00b25c4b00625b0062507b00925b00c2549b0032554b8ffa72379
2121212121212121212121212d2c23b0005458b9400000001bb900004000
598ab0005458b9400000001bb90000400059b05b2b2d2c08b0005458b940
0000001bb900004000590db05b2b2d2c8a8a080d8ab0005458b940000000
1bb90000400059b05b2b2d2cb00426b00426080db00426b00426080db05b
2b2d2c204569442d00000001000000059eb828685d5a5f0f3cf500190800
00000000bbeb7ccc00000000c522987afbfafd8b09ec07b6000000090002
000100000000000100000600fe0001c40aa0fbfafaa009ec000100000000
000000000000000000000f03040e0000000000000000000001cf000004a1
002304a1002304a1002304a1002304a1002304a1002304a1002304a10023
04a1002304a1002304a10023061bffcc061bffcc045a00ac044400610444
00610444006104440061044400610444006104ec00ac04ec009704ff001b
04ff001b03e800ac03e8004503e800ac03e8004603e8004603e8006303e8
005f03e8008103e800ac03e800ac03ad00ac050c005b050c005b050c005b
050c005b050c005b04fc00ac04fc00ac05400020020400ac0204ff4a0204
00280204ff390204ff310204ff500204ff4f0204ff7b0204001e02040027
049200ac028d0007028dffa9042800ac042800ac035d00ac035d00810362
00ac035d00ac0370001c045e00ac06d700ac052a00ac052a00ac052a00ac
052a00ac052a00ac050700ac054c0063054c0063054c0063054c0063054c
0063054c0063054c0063054c0063054c0063054f0063054f006306ef0063
042200ac042200ac05620063045800ac045800ac04580053045800ac03ad
004703ad004703ad001503ad001803ad004703ad004703e6000f03e6000f
03e6000f03e6000f052200aa052200aa052200aa052200aa052200aa0522
00aa052200aa052200aa052200aa052200aa052200aa048a0022071e003d
071e003d071e003d071e003d071e003d0427003003e6001e03e6001e03e6
001e03e6001e03e6001e03bf003b03bf003b03bf001a03bf003b03f40010
03f4001003f4001003f4001003f4001003f4001003f4001003f4001003f4
001003f4001003f40010055cffe2055cffe2040400a103cb006d03cb006d
03cb006d03cb006d03cb006d03cb006d046500a10465006a047700320477
0032038000a103800030038000a103800020038000200380002c03800029
03800042038000a1038000a1035000a10482006c0482006c0482006c0482
006c0482006c047800a10478008c049d004001ec00a101ecff5801ec0019
01ecff4801ecff2701ecff5501ecff5201ecff7101ec001101ec0018041b
00a1023e0000023eff8c03c900a103c900a102e000a102e0008702e600a1
02e000a102f0003203d500a1060600a1049100a1049100a1049100990491
0078049100a1046600a104aa006604aa006604aa006604aa006604aa0066
04aa006604aa006604aa006604aa006604ba006604ba00660606006603c5
00a103c500a104b1006603ed00a103ed00a103ed004503ed00a1034f0049
034f0049034ffff5034ffff6034f0049034f00490359001c0359fffe0359
001c0359001c048d009f048d009c048d009f048d0097048d0075048d009f
048d009f048d009f048d009f048d009f048d009f03fd0021063e0037063e
0037063e0037063e0037063e003703cc0036038300100383001003830010
03830010038300100369004403690044036900080369004403d5005c03d5
005c03d5005c03d5005c03d5001e03d5005c03d5005c03d5005c03d5005c
03d5005c03d5005c062f005c062f005c043400990362005a0362005a0362
004e036200570362005a0362005a076f005a06dd005a0601005a0601005a
04340060048c0060046a00600434006103fb005d03fb005d03fb005d03fb
005d03fb005d03fb005d03fb005d03fb005d03fb005d03fb005d02710025
069a002508d5002504ab0025069b002508d50025043c0025043c0025043c
0025043c0025044f0025044f0025044f0025044f0025043c0025043c0025
067600250676002506760025067600250689002506890025068900250689
00250676002506760025043c0025043c0025067600250609002508430025
043c0025043c002504830025043c00250676002504ed002504ed00250513
00250728002503c4003503c4003503c4003503c4003503c4003504340060
04340060043400600434006004340060043400990434ffad0443fff901d6
008501d6ff6e01d6000f01d6ff5a01d6ff2001d6ff7201d6ff5801d6ff67
01d6001101d6009903c00085041e008801eaffd501eaffd501eaff6303a3
009903a3009903a3009901d6009901d6002a021c009901d6004b01fb001c
02fd0099066400990434009904340099043400990434004e0434009904a2
ff9d043400990438005a0438005a0438005a0438005a0438004f0438005a
0438005a0438005a0438005a043c005a043c005a06cc005a043400990434
00990434006002ca009902ca009902cafff902ca006e0321005103210051
0321fffe0321fffd032100510321005105ae005105ae00510438009901f1
009902ae002102c4002102ae002102bc002604e600210475002104750021
047500210475002104750021047500210475002104750021047500210475
002105130021074b002106d9002106d9002106d9002106d9002106d90021
06d9002106d9002106d9002106d9002106d90021043400940434008e0434
0094043400860434004d0434008904340086043400940434009404340094
04340094039d002205b8003505b8003505b8003505b8003505b800350377
0029039f0022039f0022039f0022039f0022039f00220329005903290059
032900070329005903380072036100640378005d02ac004402e5006c024e
004402e5004802b8004701c100240297002a02e9006c01630061016dffd8
0297006c015e006c0456006c02e6006c02e6004502e5006c02e5004801f6
006c0230004201e3002302e9006c0285001f03ef002c027e00280286001f
023700420254000002750000029400000000fd080000fce8025600000275
0000029400000000fd080000fce803290000035f0000039400000000fc9f
0000fc6703290000035f0000039400000000fc9d0000fc6901ff0000039a
000003a2000003a800000000fc650000fc600324000002f5000003460000
036700000000fca00000fc7e0327000003490000036a00000000fc9d0000
fc7d030c0000030f0000031100000000fcac0000fca90291000002980000
02a000000000fce90000fce202cf000002c2000002b5000003c1000003e1
0000040000000000fc520000fc3101ce000001d6000001ce000001ce0000
0000fd4d0000fd4d027500840000fd7a027f00840000fd7601f700840231
000004a1002304a1ff89045a00ac035300ac0484003a03e800ac03e8fec7
03bf003b04fc00ac04fcfe9e054c0063020400ac0204feb20204ff520428
00ac0495002406d700ac052a00ac03ef0053054c0063054cff1604fc00ac
042200ac03ab004603e6000f03e6001e03e6fe6e03e6001e061300000427
0030060000900550005e0550fef903f4001003f40010040400a102fb00a1
03c90023038000a1038000a103690044047800a1047800a104b4006601ec
00a101ec000001ecff5403c900a103e10011060600a1049100a10387005e
04aa006604aa0066047800a103c500a1035b004b0359001c038300100383
0010038300100552000003cc00360558008704b1006604b10066048a0061
048a00610440009904320064039200180430000003a5005903a5005902c8
004e044c0099044c00990441006004780006023200940232ffec0232ff7a
0232ff0f03a3009903b4000004660099039700220302004d0303004d0438
005a0438005a046c002804120076044100590349005c0319000304550090
045500900455007d0455001605360055053b00550369001205a900940592
006405920064028900000000fd0a03f400000000fc360205009702050097
020500970224004801ff006e01ff006e04a10023044d00ad045a00ac0370
00ac037000ac037600ac0527000303e800ac03e8004503e8006106680055
03ca004b052200ac052200ac052200ac020400ac0204ff50028d00070458
00ac045800ac04e3000306fa000306d700ac04fc00ac070300ac054c0063
054c006304f900ac042200ac0444006103ad004703e6000f0438000f0438
000f04b800220594000004270030051c00ac04f500ac0472007406f200ac
071e00ac04eb000f061800ac044000ac0462005d04610062070800ac0471
005304ff000f04f2000f0504000003f4001003ee00a2040400a1031400a1
031400a1032700a10480000e038000a1038000300380002c057800440380
0057048900a1048900960489009501ec00a101ecff55023e000003ca00a1
03ca00a104320001060600a1047800a104aa006604a90066046a00a103c5
00a103cb006d034f00490359001c039d001e039d001b042f0022050a0000
03cc0036048e00a1046900a103fa006d062300a1064500a1045f00170583
00a103e800a103e4006b03f00066063200a103ff005c045f001f0463001f
044d000006010001063200a103d5005c044300000430000003d5009902c4
009902c4009902d5009901d6ff58047700170434006003fb005d03fb005d
03fb005d0583003e0362004b04530099045300780453008801d6008501d6
ff7201eaffd503b6009903b6009904150016060200130569005f04470099
062800990438005a0431005a042a009904340086043400990362005a0321
00510319000a06640099039f0022039f001803d2002204fe005103770029
045500990433009903c0004205d4009905fe0099044a000a0554009903c2
0099038b004d038d005d05c6009903cb00380453fff90443fff904270018
036e0000036e0000036e00000000fca50000fca5029b010a029b00bf029b
00bf03b5008503b5005e03b5005e03de0064026000ed026000b10364007a
0361005f01ff002a02240048022400bb020500970586009601ff008c01ff
002a01ff008c01ff002a035900880359002b035900880359002b01ff002a
0359002b02b6007402b600c002b6007402b600c004190075041900ad0419
0075041900ad0317000102df001f03af018a03fc01ae0317000b02df002d
027300450273004503fcfff603fcfff6073e0095073e0095073e0095073e
009503fcfff903fc00c10205009702050097026d0085026d007a027400bf
0274005a0284005602840075024000840240007a024a00b0024a0067026d
0085026d007a027400bf0274005a028400560284007503fc009e03fc0077
03fc007803fc007604b0006b043d006e03fc006a03fc003d01c4008b0335
008b057500000556000007f7000007270000073c00000727000006ad00af
06ad00af040e008005a4003f05ac004d02b6000003fc003f04b30049040e
002a03fc0057040e00600434005803fc00b903fc004a040e005303fc006d
0419002b040e003403f30035039f006103be005f039f0058039f00250621
0049083300ac03fc002406e300a10411001d0494005f02cb002303ec0062
03ec00510455002203d700510436007e03b20035043600630436005c040e
0048040e00ae040e0072040e0067040e0020040e0065040e006b040e0063
040e0052040e005204430067028d00190381005c0373005903ac00260368
006103b7006e0349002f03b5004b03bc0052039f0050039f008d039f0065
039f0062039f003a039f0067039f0061039f005e039f0051039f00500494
005f02cb002303ec006203ec00510428002203d700510436007e03b20035
043600630436005c040e0048040e00ae040e0072040e0067040e0030040e
0065040e006b040e0063040e0052040e00520321004801f8002302b0004b
02ad004102db002502a6004502df005b0291003202e1004b02df004402ea
005102df005102d0005701bc006001bc00580321004801f8002302b0004b
02ad004102db002502a6004502df005b0291003202e1004b02df004402ea
005102df005102d0005701bc006001bc0058029d003801f500310252003c
0249002d024a001402460032025100300238002202570025024d0023029d
003801f500310252003c0249002d024a0014024600320251003002380022
02570025024d002302b1ff4b03130044055f004405690044051700440569
0044052e00440553004405c9004e05c9004e0567004705b7004705a20047
05cd0027057d004505a20045052a003505b80048084e0048057d005c07c9
005c03fc004603fc004c03fc006003fc002b03fc005e03fc006003fc0059
03fc004503fc006503fc004c03fc005503fc005603fc003d05e9002c0405
003506d300690443006102ed000703fc00080484003a0550005e04660099
066500660454005b0416004a073e009a073e0096073e00c9073e00c9070e
00af070e013a070e00af070e013a0a4e009a0638009f04660028018a0000
01da00000466000004660000046600000466000004660000046600000466
000004660000046600000466000004660000046600000466000004660000
0466000004660000046601d004a1002304a1002304a1002304a1001904a1
001504a1001d04a1002304a1001c04a1001c04a1001c04a1001d04a10023
03e800ac03e800ac03e8003703e8ffe803e8ffe903e8ffe803e8ffe803e8
003702040015020400a0054c0063054c0063054c0063054c0063054c0063
054c0063054c006305940063059400630594006305940063059400630594
0063052200aa052200aa05c600aa05c600aa05c600aa05c600aa05c600aa
05c600aa03e6001e03e6001e03e6001e03d5005c03d5005c03d5ffbb03d5
ffb103d5ffb803d5ffb803d5005703d5ffb803d5ffb803d5ffb803d5ffb8
03d5005c03fb005d03fb005d03fb003003fbffdb03fbffdb03fbffd903fb
ffcb03fb005d01d6002601d600850438005a0438005a0438ffe80438ffea
0438ffe80438ffea0438005a04a0005a04a0005a04a0005a04a0005a04a0
004904a0005a043400940434009404d2009404d2009404d2008c04d20094
04d2004604d20094039f0022039f0002039f0022046a00530466003803f4
001003f4001003f4ffbd03f4ffc003f4ffbd03f4ffc803f4001003f4ffc8
03f4ffc803f4ffc803f4ffc803f40010038000a1038000a10380fff00380
ffa70380ffa00380ffa20380ff8e0380001101ec000901ec009404aa0066
04aa006604aa002104aa002204aa002104aa002204aa006604ec006604ec
006604ec006604ec006604ec006604ec0066048d009f048d009f0515009f
0515009f0515009a0515009f051500750515009f038300100383fff10383
001001da0000046600000466000004660000046600000466000004660000
046600000466000004c10066052400ac052400ac050600ac049300a10493
00a1047c00a103e6000f02ae00210359001c01d60011043c0025043c0025
043c002506760025067600250676002502f5001c02e7008e0306005a034b
008e02a8008e028c008e0344005a035b008e01a6008e01cb000502e0008e
025b008e046d008e0375008d0375005a02d8008e0375005a029b00570280
0046025700040314005702e3001a0445002202b5001c028b001c02b80050
0000fdfd0000fdfd0466ffff0466ffff0466ffff0466ffff03c1ffff03c1
0000030cffff030c0000030cffff030c0002023100000231000001ffffff
01ffffff01ffffff01ffffff0000fd090000fd0902aa008202aa008202aa
009802aa009801ce008402aa008202aa008202aa008202aa0082027f008e
027f008e0324000002910084046601fd02aa001402aa0013032900000329
0000032900000329ffff039a00000327000003fcfff903fcfff9039a0000
039a00000000ff080000fe4c0000fdfb0000fdfb0000fe3f0000fe3f0000
fdc20000fdc201ce008402aa00140291008302aa001502aa009302aa0093
039a014c039a00000000fdfd0000fdfd0000fd090000fce90000fd090000
feb702aa001402aa001403fcfff90466ffff02aa0098039a0000039a0000
039a0000039a0000039a0000039a000004010014040101470000000002aa
ffff02aaffff01ceffff01ceffff030c0000030c000002aa009302aa00c8
02aa00c803f100c801ceffff01ceffff01ce000001ce000002aa00a003b1
008402aaffff02aaffff075c003c075cffff075cffff075cffff075cffff
075c003f06d0ffff06d0ffff075c0003075c0003075c004001df003001df
003001e7003201e7003200f8004400f8004402070030020700300209004c
0209004c019d0030019d003002070032020700320209004c0209004c0309
004c0309004c015f004c015f004c015200180152001801c3001601c30016
01bf001c01bf001c032700510327005103270051032700510000ffab03bd
ffff041a0000041a00000416000104160001041a0001041a0001041a0001
041a000104010002040100020401000204010002015f004c02aa00c801ce
00c803f100c804ec000f044d00ad0440001e0462005d049d006104ff001b
057e000f044d004c03e8006c0525006403ca005a03adffd6050e005b048a
001c025000ac0226001b042800ac070900aa052affd6054c0063062f0061
04e4000f045800ac03ad004703ab0046043f000f03e6000f0550005e0522
00aa0442001e03bf003b03ca004b03ca005a040e006808ab00ac081500ac
060300ac054700ac07b700ac071400ac04a100230204ff3a054c00630522
00aa052200aa052200aa052200aa052200aa04a1002304a10023061bffcc
050c005b050c005b04280073054c0063054c006303ca0008089500ac0815
00ac050c005b072800ac04d400ac052a00ac04a1ffef04a1002303e8ffe1
03e8006e0204feac0204ff4c054c003b054c00630458ffbf0458006e0522
002f052200aa03ca004b04fc00ac052400ac040e004d03ef003b04a10023
03e800ac054c0063054c0063054c0063054c006303e6001e04a1ffd90444
ffe7035d001b03e6ffb803940064046b001b0545001b0495002403e8ff9e
02a10007050a00630469001a04a0001b04a10023045a00ac045a00ac045a
00990444006104ec00ac04ec00ac04ec00ac04ec00ac04ec00ac03e80084
03e8008403e8008203e8003403e8008103ad00ac050c005b04fc00ac04fc
00ac04fc00ac04fc002804fc00ac0204ff360204ff71042800ac042800ac
042800a0035d00ac035d0035035d0060035d006606d700ac06d700ac06d7
00ac052a00ac052a00ac052a00ac052a00ac054c0063054c0063054c0063
054c0063042200ac042200ac045800ac045800ac04580077045800ac03ad
004703ad004703ad004703ad004703ad004703e6000f03e6000f03e6000f
03e6000f052200aa052200aa052200aa052200aa052200aa048a0022048a
0022071e003d071e003d042700300427003003e6001e03bf001503bf003b
03bf003b035d001b03c2ff9b0433001b045800ac052400ac047100ac03e2
003b0444003803ad005903b500ac046a0027043400990434000403b3005a
043400600430005d0271ffee064300990434009903a300990241002703b4
0014044c0099053e0059043400990321005102e0002102ae002103fc001b
0329005903ca004b0366003a03680050075d006003c00099061e009903d5
005601d6ff570438005a0434007a04340088043400880434008804340088
03fb006203d5005803d50058062f005c044cffe203c4003503a3003a0438
005a0438005a03ca002e01eaff60075d006003c400350434009903d5ffbf
03d5005c03fbffe203fb005d01d6fece01d6ff650438ffed0438005a02ca
ff7302ca00100434ffff0434008703ca004b0434005104cd0060040e0052
034c005903d5005c03fb005d0438005a0438004f0438005a0438005a039f
00220289009804eb009902ae002106930060069200600362fff003210051
032900590394006403fb003c0240fff70240fff70434006002ff002703e2
002203720049040e00720321005101f300ad032900ad049700ac029b010a
03d5005c0434009904340099043400860362005a04340060043400600434
0060043400600434006003fb005d03fb005d03fb005d03fb003f03fb005d
0271002503c40035043400990434009904340067043400130434009401d6
ff1f01d6ff1f01d6ff5a03a3009903a3009903a3006b01d6008901d6ff58
01d6ff5801d6ff5906640099066400990664009904340099043400990434
0086043400860438004f0438004f0438005a0438005a0434009904340099
02ca009902ca008a02ca000a02caffff0321005103210051032100510321
00030321005102ae002102ae002102aeffd202aeffd20434008904340041
0434007b0434004d04340086039d0001039d002205b8003505b800350377
002903770029039f00220329000103290059032900000434008602aeffc6
05b80035039f002203d5005c01f100530241002703d5002902aeff960463
009903db00990344005903c200360362003b02ee003c03190099053b0055
0471000803ee00a203ee001403cb004803fc006d0477003204d3000803ee
00530380007204a40066038a00680350ffe80482006c03f300130232008e
01ecfffe03c900a1063200910491ffe804aa00660592006e0433000803ed
00a1034f0053035b004b038300080359001c04b10066048d009f03b70010
03690044039000570393006b0398005507ce00a1085500ac055a00a105cd
00ac06cf00a1076800ac03f4001001ecff4704aa0066048d0096048d009f
048d009f048d009f048d009f03f4001003f40010055cffe20482006c0482
006c03c9005204aa006604aa00660390000007ce00a1085500ac0482006c
065500a1046200a0049100a103f4ffc503f400100380ffb10380004d01ec
fed001ecff7004aa001d04aa006603edffa403ed0064048d0000048d009f
039000570478008c049300a103c50057038c004403f40010038000a104aa
006604aa006604aa006604aa00660383001003f4001003cb002402e00027
0359ffeb0339005004040027048d002703fd00210380ffff023e0000048b
006603ed00270383000c039000550339005001f300ac032900ac049700ac
026000ed03f40010040400a1040400a10404006e03cb006d046500a10465
00a104650081046500a1046500950380002a038000260380004103800000
0380004a035000a10482006c047800a1047800a10478009a047800200478
00a101ecff2a01ecff5503c900a103c900a103c9007e02e000a102e00000
02e0002802e00024060600a1060600a1060600a1049100a1049100a10491
00a1049100a104aa006604aa006604aa006604aa006603c500a103c500a1
03ed00a103ed00a103ed003e03ed0091034f0049034f0049034f0049034f
0000034f00490359001c0359001c0359001803590019048d009f048d0079
048d009f048d0075048d009f03fd002103fd0021063e0037063e003703cc
003603cc003603830010036900050369004403690020047800a10359000a
063e00370383001003f4001002e00027035effa703c5002703ed00a104b6
00a103ef00a10369004403cb004803500060039900a1043c0025043c0025
0447002504470025043c0025043c0025044f0025043c0025043c00250676
002506760025068200250682002506760025067600250689002506760025
067600250475002104750021047500210475002104750021047500210475
0021047500210475002106d9002106d9002106d9002106d9002106d90021
06d9002106d9002106d9002106d9002103d5009604340060043400990434
00990362003b039b005a043400600434006003fb006203fb0062051b0065
0362005a0362004b0435004b043b005d0241fff704340060043400600451
005a039d001f03d0001e0433009404340099043400990241002701d6fff3
0232009401d6009902e7ffa702f9002701d6009904860099066300940663
0094066400990434ffc204340099045300990438005a05b3005a05920064
0536005502ca002302ca002302ca002302ca009902ca0099028e0094028e
002303980085039800850321005101eaffd50242fff801eaffd5028affc4
02ae004102ae002104a400270476004904550090039d002205b80035039f
00220351001f0329005903d3005903bc004b03bb0056039400640394005e
039400640362005a0507005f03d50099043b005a046b005a04470099028a
ffc403a300270319009904340060039400640394005e066f006006d40060
0719006004f3002103c40021057a0021060c002504ae00990469009903ef
002c03ef00700434ffd5044dffd503d60010050fffe3062f006204120027
03cb006a0444009904590030033f0099036f005501d60085022700000391
009802f000300569005f045300990474005a03cb006304a9006604a80066
0528001406cc00560368003a0438005a0438005a03a8009903cf005203cf
0052033f001b046a009a0465004b05c7004b0664014c03de0020060e0035
034f0042032f00380321005103d0001e02f2009903de00200450009903a8
0099052f0083040e000102f5001c03f1000002e7008e02fb0027034b008e
02a8008e02a800500344005a035b008e01a6008e01cb000502e0008e025b
008e046d008e0375008d0375008d0375005a02b2004802d8008e029b0057
02570004031400570445002202ac004402ac006c02e50048042b004402e5
006c02e5004802b8004702b8004702770046027700460297002a01630061
0297006c0456006c02e6006c02e60045024e003602e6004502e6004502e5
006c01e3002302e9006c02db00460456006c0285001f024a000d02be006c
024600230283002803650055025f00180163006101f6006c02e9006c0285
001f02be006c0246002302e5006c03650050025f00180694009404bbffa7
04bd0060030affa7069cffe504b4002204beffa70352ffa7031affa7039d
0014030fffa70329ffc203c4003b0304006e03c400350688002102410027
026900270468002704db002704c40027043400990451006002710025054c
0060041e009901f0006b067f0099045100990434009902ca006a037b0051
02faffd5039d002203ed0029033c0059047c005c04d800600434006003fb
005d0362005a0362004b03fb006201d600850362003b0233001e04d80094
0376004b02e5006b024e0044026e004402b200440277004201c1002401c1
00070297002a02e9006c0192000001aa006c0163006d0192000001e50000
0194006c017b00530224006e0456006c0456006c031b0000031c006c0304
006e02e600450336004502300042016dffd801e4002302e9000002b8002c
02e6006e02e6006e0285001f023700420294004202a600420272003c02e6
004502e9006c02e9006c016dffd801f6006c01f6002502030025028b006c
03ef002c0286001f01c400540334005401ff008c01ff002a01ff008c01ce
008401ce0084029900650299006c03fc004503fc0065044b0044044b0044
025100f20256000002540000025100f20327000002540000025600000239
00980239009801ce008401ce008402aa008202aa008202aa008202aa0082
02aa004b02aa009302610024015e006c02300042027e00280299006c0310
009603100096031000960310009603100096045700960457009604570096
045700960310004304570043045700430457004304570043045700430457
00430457002f0457002f0457002f0457002f0457002f0310002f04570025
045700250457002504570025045700250310001a0457001a0457001a0457
001a0457001a0457001a0310004204570042045700420457004204570042
045700420457009604570096045700960457009603100042045700420457
0042045700420457004204570042045700420457002f0457002f0457002f
0457002f0457002f0310002f0457002f0457002f0457002f0457002f0457
002f03100026045700260457002604570026045700260457002603100042
045700420457004204570042045700420457004204570096045700960457
009604570096031000420457004204570042045700420457004204570042
031000260457002604570026045700260457002604570026031000230457
0023045700230457002304570023045700230310002f0457002f0457002f
0457002f0457002f0457002f0310004b0457004b0457004b0457004b0457
004b0457004b045700960457009604570096045700960310004204570042
045700420457004204570042045700420310001a0457001a0457001a0457
001a0457001a0457001a0310002404570024045700240457002404570024
045700240310002f0457002f0457002f0457002f0457002f0457002f0310
004e0457004e0457004e0457004e0457004e0457004e0457009604570096
045700960457009602aa006202aa006203290000049a00000359002b02aa
008502aa008502aa00c802aa00c8029100840254000003c1ffff03c10000
039a0000022400bb02aa009802aa009802aa009802aa00980440fff60440
fff60302009803270000032700000324000002aa0000071200d4071200d4
02ac004402b8004702e60045027e002802b8004701d9ffff01d9ffff01d9
000001d90000028900000289000002890000028900000000fc660000fc66
032900000329000003290000032900000324000003240000032900000329
00000329000003290000032400000324000003f4000003f4000003f40000
03f40000032400000324000003270000030c000001ffffff01d900000327
000003290000032900000329000004660000046600000466000004660000
03f4000003f4000003f4000003f40000023200b6023200b6054c00630444
006104440043044400610444004303e6000e0456fec803e6000e03ad00ac
054c0063045d001e059700ac04a2000f04440061042200ac043200640375
005a037500420478000604d700510684001404120076041200030362005a
0362003b0362005a0362003b053b0055037800940438005a0399001404c5
009904a2000f0349005c01eaffd50476ffd504d7005104a9006603cb006d
03cb004803cb006d03cb00480389001a0389fe6f0389001a035000a104b1
005b03e2001e050000a1045d002a03db006d03c500a104a1ffc504a1fe8a
04a1fe6204a1ff2204a1ffc604a1fe8b04a1fe6204a1ff2204a1ff8004a1
ff5804a1002304a1002304a1002304a1ffc504a1fe8a04a1fe6204a1ff22
04a1ffc604a1fe8b04a1fe6204a1ff22066500230665ffc50665fe8a0665
fe620665ff220665ffc60665fe8b0665fe620665ff2203e8fef004bdfe82
04bdfe7a03e8fef004c1fe8604bdfe7a03e8fea403e8fe9504fcfef005d1
fe8205d1fe7a0559feaa04fcfef005d1fe8205d1fe7a0559feaa04fcfea4
04fcfe9504fc00ac04fcfef005d1fe8205d1fe7a0559feaa04fcfef005d1
fe8205d1fe7a0559feaa06c000ac06c0fef00795fe820795fe7a071dfeaa
06c0fef00795fe820795fe7a071dfeaa0204fef002d9fe8202d9fe7a0261
feaa0204fef002d9fe8202d9fe7a0261feaa0204fea40204fe950204ff4e
0204ff7a054cff0605f5fe82060cfe7b054cff0605f2fe7f0605fe74054c
fecf054cfeac0422fef003e6fe940517fe820513fe7e049ffeaa03e6fe47
03e6fe4703e6001e03e6001e0550ff0605f2fe7b060dfe780599feaa0550
ff0605f2fe7b0611fe7c0599feaa0550fecf0550feac0550005e0550ff06
05f2fe7b060dfe780599feaa0550ff0605f2fe7b0611fe7c0599feaa0714
005e0714ff0607b6fe7b07d1fe78075dfeaa0714ff0607b6fe7b07d5fe7c
075dfeaa048a0061048a0061048a0061048a0061048a0061048a0061048a
0061048a0061048a0061048a0061048a005a048a0061048a0061048a0061
048a0061048a0061048a0061048a0061048a0061048a0061048a0061048a
0061048a0061048a0061048a005a03a5005903a5005903a5004f03a50059
03a5005203a5005203a5005903a50059044c0099044c0092044c008f044c
0094044c0099044c0092044c0092044c0094044c0099044c0099044c0059
044c0099044c0099044c0092044c008f044c0094044c0099044c0092044c
0092044c0094044c0099044c0099044c0059023200010232ff860232ff83
0232ff62023200000232ff860232ff860232ff600232ff100232fecf0232
ff600232ffef0232ff7b0232ff290232ff690232ff680438005a0438005a
0438005a0438005a0438005a0438005a0438005a0438005a041200760412
007604550090045500820455008204550084045500900455008204550082
045500840455001204550010045500800455009004550090045500410455
00710455007d059200640592006405920064059200640592006405920064
059200640592006405920064059200640592006405920064059200640592
006405920064059200640592006405920064059200640592006405920064
059200640592006403f4001003f4001003f4001003f4001003f4001003f4
001003f4001003f4001003f4001003f4001003f4001003f4001003f40010
03f4001003f4001003f4001003f4001003f4001003f4001003f4001003f4
001003f4001005b9001005b9001005b9001005b9001005b9001005b90010
05b9001005b9001005b90010038000a10380004903800049038000a10380
004903800049038000a10380007b047800a1047800a1047800a1047800a1
047800a1047800a1047800a1047800a1047800a1047800a10478006f0478
00a1047800a1047800a1047800a1047800a1047800a1047800a1047800a1
047800a1063c00a1063c00a1063c00a1063c00a1063c00a1063c00a1063c
00a1063c00a1063c00a101ec000901ecff6201ecff6201ecff6501ec0009
01ecff6201ecff6201ecff6501ecff1001ecfee901ecff6401ec000001ec
ff8c01ecff2a01ecff5301ecff7004aa006604aa006604aa006604aa0066
04aa006604aa006604aa006604aa006603c500a103c500a1038300100389
001a038300100389001a038300100389001a038300100389001a03830010
0389001a038300100389001a038300100389001a038300100389001a0383
00100389001a038300100389001a0383fff50389fff5038300100389001a
038300100389001a04b1006604b1006604b1006604b1006604b1006604b1
006604b1006604b1006604b1006604b1006604b1006604b1006604b10066
04b1006604b1006604b1006604b1006604b1006604b1006604b100660675
006606750066067500660675006606750066067500660675006606750066
0675006604a1002304a1ffc504a1fe8a04a1fe6204a1ff2204a1ffc604a1
fe8b04a1fe6204a1ff2204fc00ac04fcfef005d1fe8205d1fe7a0559feaa
04fcfef005d1fe8205d1fe7a0559feaa0550005e0550ff0605f2fe7b060d
fe780599feaa0550ff0605f2fe7b0611fe7c0599feaa066500230665ffc5
0665fe8a0665fe620665ff220665ffc60665fe8b0665fe620665ff2206c0
00ac06c0fef00795fe820795fe7a06c0fe4d06c0fef00795fe820795fe7a
06c0fe4d0714005e0714ff0607b6fe7b07d1fe780714fe610714ff0607b6
fe7b07d5fe7c0714fe6101d9ffff01d900000289000002890000039a0000
03290000032900000324000003290000032900000324000003f4000003f4
00000324000001d9000003270000030c0000023200b601c4007901c40079
01c40079054e00ac0440000a042200ac0366001b044100ac06b2005503ca
004b04a500ac045800ac046a001b050c000f052400ac05b100ac073800ac
051900610444006103e6000f03e6001e03e6001e0476003005d2000f049a
007404720074047200ad05f6002805f60028020400ac06680055045f00ac
050e000304fc00ac04fc00ac04720074070700ac04a1002304a10023061b
ffcc03e8005905250064052500640668005503ca001503ca004b052200ac
052200ac054c0063054c0063054c00630462004c0438000f0438000f0438
000f04720071035300ac061800ac0366001b048500300427003004400035
065d0037061d003d041a003d070f0003072800ac0515005b0521000f03ca
005a05090003045f009903df00270434009902f90027039f009905c0003e
0362004b03f4009903b6009903eb00270447000a0471009904d8009905f1
0099045c00590362005a0319000a039d0022039d002203b2002904c5000a
03ea004203c0004203c0009904c8001904c800190583003e03cf00990421
0016044700990454009903c0004205b6005f020400ac03d5002e03d50058
062f005c03fb005603fb006203fb00620583003e0362000803bc004b0453
0095045300970438005a0431005a0431005a038b0004039f0022039f0022
039f002203c0002902c400990554009902f9002703b10029037700290434
006006550060059b004b03ba004b061f001606500099044500500481000a
0362005a042b001604a800a103e8002703c500a10314002703ec00a105d0
004403800057041c00a103ca00a103ca002704530017049800a1050100a1
067700a104a2006503cb006d0359001c0383001003830010041300360545
001c041a006d03fa006d03fa00a1054f0020054f002001ec00a105780044
03ff00a1045a0001047800a104a100a103fa006d062f00a103f4001003f4
0010055cffe20380004204a2006504a20065057800440380000303900057
048900a0048900a004aa006604a9006604a9006603e4001e039d001e039d
001e039d001e03fa0044031400a1058300a1031400270417003603cc0036
03e8004a0588004a0559007203d8007205d20001061900a10488006c0444
001c03800068045c00010400000008000000040000000800000002af0000
02000000015500000450000001bc00000199000001000000000000000000
ffdc0000ff25040e0024040e00240329000003fcfff901ff008c03580088
01c400540334005404a400540476010a03fcfffb0273004404ee004f0444
00610444006103ad0027040e005306640099052a0020076000ac064800ac
071e002005f500ac0428001b03e6000f08a80032043afffe0482002104b2
005b0495002003ad0020044400610621004906210065057800e6059d00e6
03fc005e070100bc03fc0062045201d7045200be0400fff6040001bd0400
01bd0400fff6040001bd0400fff6070900aa045c005b047200ad04440071
04d0003a0562007403c9001006640094042f005f04180015035a0053040b
00300441006f03260010032700030327000303270003025400c0025400c0
025400c8025400c802aaff8c02aaff8c04e0005907f4000a07e200140798
0003076c0061064100ac050b002406a700ac05c80055073f00ac03ca0021
0600009004b8001c085c0063054c003b076c0061076c006104440061056a
0022053400990433001b05af00990480001b060b0099034e001605a90094
03d2ffc40745005a049c005a06420059056a00220362005a06b8006d05c3
00a10453001205c000a1050b0046066400a10380002205580087042e0022
07f10066050f006806b0006d06b8006d039c006d03c7009602aa00db040e
008d0000ffdc0000fe5101cf0000022400bb01c700000163006102b1ff4b
0aa000b404d5009202d5008302d5008304d500b202d500700aa000b40aa0
00b40aa000b40aa000b40aa000b40aa000b40aa000b40aa000b40aa000b4
0000fc48000000000000fd170000000000000000039a0000039a00000324
00000324000003240000039a000003240000032400000256000003290000
0329000003bdffff02aaff8c055001e5027f008403240000039a00000256
000000000027000000e1000000ed0000001b032400000324000003240000
032400000324000003240000032400000324000003240000032400000000
0000000000000000000000000000039a0000039a00000346000000000027
03c10000030f00000346000003460000039a0000034800000348000003a2
000003a2000002560000035f00000000009e00000067000000220000009e
0000009e0000009e0000009e0000009e0517fe820513fe7e049ffeaa03e6
fe4703e6fe4703e6000e03e6000e03f4001003f4001003f4001005b80010
05b8001005b80010047800a1047800a10478006f063c00a1063c00a1063c
006f0383ffc80383ffc80383001004b1006604b1006604b1006606750066
06750066067500660000fdbc0000fd1a0000fd770000fd4f0000fbfe0000
fbfa0000fc000000fbfa0000fc000000fbfa0000fc000000fbfa0000fc00
0000fc000000fc000000fc000000fc000000fc000000fc000000fc000000
fdd00000fc300000fc300000fbff0000fbff0000fbff0000fbff0000fbff
0000fc000000fcac0000fcad0000fcac0000fcac0000fd1b0000fd1b0000
fd340000fd340000fd340000fd340000fd600000fd600000fd730000fd73
0000fdcf0000fd5f0000fd5f0000fd5f0000fd5f0000fd7f0000fd7f0000
fca10000fd6f0000fdfd0000fcef0000fcf20000fca00000fca00000fcae
0000fcad0000fc660000fca00000fc2f0000fc2f0000fc660000fc5f0000
fdd00000fcf10000fd6d0000fcf30000fd710000fd710000fdb10000fc65
0000fcf10000fcf10000fc2f0000fbff0000fd770000fc660000fc660000
fc650000fc650000fc650000fc650000fc460000fd790000fcde0000fcde
0000fd4b0000fd4b0000fca80000fca80000fd710000fda60000fda60000
fce30000fd4c0000fd4c0000fd4b0000fd4b0000fd7e0000fcdf0000fcde
0000fcde0000fc8f0000fc520000fc520000fc520000fc520000fc920000
fc970000fc970000fc560000fc560000fc910000fd820000fd820000fd70
0000fd700000fdfa0000fdfa0000fd5f0000fd5f0000fd790000fd790000
fd8f0000fd8f0000fd6e0000fd6e0000fd7a0000fd7a0000fcfb0000fcfb
0000fdb60000fdb60000fda80000fda80000fd680000fd680000fd710000
fd710000fcf10000fcf10000fcf10000fcf10000fc540000fc260000fc26
0000fc290000fc290000fc270000fc270000fc270000fc270000fc350000
fc350000fc350000fc350000fdb60000fda80000fda80000fce30000fd46
0000fd460000fd470000fd470000fd020000fd020000fd020000fd020000
fc650000fc660000fc9f0000fc9f0000fc9f0000fc9f0000fca10000fca1
0000fc9f0000fc9f0000fc9f0000fc9f0000fca10000fca10000fc370000
fc370000fc370000fc370000fca00000fca00000fc9f0000fcad0000fd33
0000fd470000fc9f0000fc9f0000fc9f0000fc9f0000fbff0000fc020000
fbff0000fc000000fc370000fc370000fc370000fc370000fdbd0000fdbd
0000fca20000fca30000fca30000fdd10000fdd10000fdd10000fdd10000
fc6a0000fc6a03e6fe940389ffcb0389ffcb0389001a01d6008904340060
043400600434006004340060043c0025067600250aa000b400b400b400b4
00b400b400b400b400b400b400b400b400b400b400b400b400b400b400b4
00b400b400b400b400b400b400b400b400b400b400b400b400b4000000>
<00000000000001420000014200000142000001420000025e0000025e0000
025e0000025e0000025e0000025e0000025e0000025e0000025e0000025e
0000025e0000025e0000025e0000025e0000025e0000025e0000025e0000
025e0000025e0000025e0000025e0000025e0000025e0000025e0000025e
0000025e0000025e0000025e0000025e0000025e0000025e0000025e0000
025e0000025e0000025e0000025e0000025e0000025e0000025e0000025e
0000039e0000039e0000039e0000039e0000039e0000039e0000039e0000
039e0000039e0000039e0000039e0000039e0000039e0000039e0000039e
0000039e0000039e0000039e0000039e0000039e0000039e0000039e0000
039e0000039e0000039e0000039e0000039e0000039e0000039e0000039e
0000039e0000048e0000048e0000048e0000048e0000048e0000048e0000
048e0000048e0000048e0000048e0000048e0000048e0000048e0000048e
0000048e0000048e0000048e0000048e0000048e0000048e0000048e0000
048e0000048e0000048e0000048e0000055c0000055c0000055c0000055c
0000055c0000055c0000055c0000055c0000055c0000055c0000055c0000
055c0000055c0000055c0000055c0000055c0000055c0000055c0000055c
0000055c0000055c0000055c0000055c0000055c0000055c0000055c0000
055c0000055c0000055c0000055c0000055c0000055c0000055c0000055c
0000055c0000055c0000055c0000055c0000055c0000055c0000055c0000
055c0000055c0000055c0000055c0000055c0000055c0000055c0000055c
0000055c0000055c0000055c0000055c0000055c0000055c0000055c0000
055c0000055c0000055c0000055c0000055c0000055c0000055c0000055c
0000055c0000055c0000055c0000055c0000055c0000055c0000055c0000
055c0000055c0000055c0000055c0000055c0000055c0000055c0000055c
0000055c0000055c0000055c0000055c0000055c0000055c0000055c0000
055c0000055c0000055c0000055c0000055c0000055c0000055c0000055c
0000055c0000055c0000055c0000055c0000055c0000055c0000055c0000
055c0000055c0000055c0000055c0000055c0000055c0000055c0000055c
0000055c0000055c0000055c0000055c0000055c0000055c0000055c0000
055c0000055c0000055c0000055c0000055c0000055c0000055c0000055c
0000055c0000055c0000055c0000055c0000055c0000055c0000055c0000
055c0000055c0000055c0000055c0000055c0000055c0000055c0000055c
0000055c0000055c0000055c0000055c0000055c0000055c0000055c0000
055c0000055c0000055c0000055c0000055c0000055c0000055c0000055c
0000055c0000055c0000055c0000055c0000055c0000055c0000055c0000
055c0000055c0000055c0000055c0000055c0000055c0000055c0000055c
0000055c0000055c0000055c0000055c0000055c0000055c0000055c0000
055c0000055c0000055c0000055c0000055c0000055c0000055c0000055c
0000055c0000055c0000069e0000069e0000069e0000069e0000069e0000
069e0000069e0000069e0000069e0000069e0000069e0000069e0000069e
0000069e0000069e0000069e0000069e0000069e0000069e0000069e0000
069e0000069e0000069e0000069e0000069e0000069e0000069e0000069e
0000069e0000069e0000069e0000069e0000069e0000069e0000069e0000
069e0000069e0000069e0000069e0000069e0000069e0000069e0000069e
0000069e0000069e0000069e0000069e0000069e0000069e0000069e0000
069e0000069e0000069e0000069e0000069e0000069e0000069e0000069e
0000069e0000069e0000069e0000069e0000069e0000069e0000069e0000
069e0000069e0000069e0000069e0000069e0000069e0000069e0000069e
0000069e0000069e0000069e0000069e0000069e0000069e0000069e0000
069e00000724000007240000072400000724000007240000072400000724
000007240000072400000724000007240000072400000724000007240000
072400000724000007240000072400000724000007240000072400000724
000007240000072400000724000007240000085200000852000008520000
085200000852000008520000085200000852000008520000085200000852
000008520000085200000852000008520000085200000852000008520000
085200000852000008520000085200000852000008520000085200000852
000008520000085200000852000008520000085200000852000008520000
085200000852000008520000085200000852000008520000085200000852
000008520000085200000852000008520000085200000852000008520000
085200000852000008520000085200000852000008520000085200000852
0000085200000852000008520000085200000852000008520000091c0000
091c0000091c0000091c0000091c0000091c0000091c0000091c0000091c
0000091c0000091c0000091c0000091c0000091c0000091c0000091c0000
091c0000091c0000091c0000091c0000091c0000091c0000091c0000091c
0000091c0000091c0000091c0000091c0000091c0000091c0000091c0000
091c0000091c0000091c0000091c0000091c0000091c0000091c0000091c
0000091c0000091c0000091c0000091c0000091c0000091c0000091c0000
091c0000091c0000091c0000091c0000091c0000091c0000091c0000091c
0000091c0000091c0000091c0000091c0000091c0000091c0000091c0000
091c0000091c0000091c0000091c0000091c0000091c0000091c0000091c
0000091c0000091c0000091c0000091c0000091c0000091c0000091c0000
091c0000091c0000091c0000091c0000091c0000091c0000091c0000091c
0000091c0000091c0000091c0000091c0000091c0000091c0000091c0000
091c0000091c0000091c0000091c0000091c0000091c0000091c0000091c
0000091c0000091c0000091c0000091c0000091c0000091c0000091c0000
091c0000091c0000091c0000091c0000091c0000091c0000091c0000091c
0000091c0000091c0000091c0000091c0000091c0000091c0000091c0000
091c0000091c0000091c0000091c0000091c0000091c0000091c0000091c
0000091c0000091c0000091c0000091c0000091c0000091c0000091c0000
091c0000091c0000091c0000091c0000091c0000091c0000091c0000091c
0000091c0000091c0000091c0000091c0000091c0000091c0000091c0000
091c0000091c0000091c0000091c0000091c0000091c0000091c0000091c
0000091c0000091c0000091c0000091c0000091c0000091c0000091c0000
091c0000091c0000091c0000091c0000091c0000091c0000091c0000091c
0000091c0000091c0000091c0000091c0000091c0000091c0000091c0000
091c0000091c0000091c0000091c0000091c0000091c0000091c0000091c
0000091c0000091c0000091c0000091c0000091c0000091c0000091c0000
091c0000091c0000091c0000091c0000091c0000091c0000091c0000091c
0000091c0000091c0000091c0000091c0000091c0000091c0000091c0000
091c0000091c0000091c0000091c0000091c0000091c0000091c0000091c
0000091c0000091c0000091c0000091c0000091c0000091c0000091c0000
091c0000091c0000091c0000091c0000091c0000091c0000091c0000091c
0000091c0000091c0000091c0000091c0000091c0000091c0000091c0000
091c0000091c0000091c0000091c0000091c0000091c0000091c0000091c
0000091c0000091c0000091c0000091c0000091c0000091c0000091c0000
091c0000091c0000091c0000091c0000091c0000091c0000091c0000091c
0000091c0000091c0000091c0000091c0000091c0000091c0000091c0000
091c0000091c0000091c0000091c0000091c0000091c0000091c0000091c
0000091c0000091c0000091c0000091c0000091c0000091c0000091c0000
091c0000091c0000091c0000091c0000091c0000091c0000091c0000091c
0000091c0000091c0000091c0000091c0000091c0000091c0000091c0000
091c0000091c0000091c0000091c0000091c0000091c0000091c0000091c
0000091c0000091c0000091c0000091c0000091c0000091c0000091c0000
091c0000091c0000091c0000091c0000091c0000091c0000091c0000091c
0000091c0000091c0000091c0000091c0000091c0000091c0000091c0000
091c0000091c0000091c0000091c0000091c0000091c0000091c0000091c
0000091c0000091c0000091c0000091c0000091c0000091c0000091c0000
091c0000091c0000091c0000091c0000091c0000091c0000091c0000091c
0000091c0000091c0000091c0000091c0000091c0000091c0000091c0000
091c0000091c0000091c0000091c0000091c0000091c0000091c0000091c
0000091c0000091c0000091c0000091c0000091c0000091c0000091c0000
091c0000091c0000091c0000091c0000091c0000091c0000091c0000091c
0000091c0000091c0000091c0000091c0000091c0000091c0000091c0000
091c0000091c0000091c0000091c0000091c0000091c0000091c0000091c
0000091c0000091c0000091c0000091c0000091c0000091c0000091c0000
091c0000091c0000091c0000091c0000091c0000091c0000091c0000091c
0000091c0000091c0000091c0000091c0000091c0000091c0000091c0000
091c0000091c0000091c0000091c0000091c0000091c0000096200000962
000009620000096200000962000009620000096200000962000009620000
096200000962000009620000096200000962000009620000096200000962
000009620000096200000962000009620000096200000962000009620000
096200000962000009620000096200000962000009620000096200000962
000009620000096200000962000009620000096200000962000009620000
096200000962000009620000096200000962000009620000096200000962
000009620000096200000962000009620000096200000962000009620000
096200000962000009620000096200000962000009620000096200000962
000009620000096200000962000009620000096200000962000009620000
096200000962000009620000096200000962000009620000096200000962
000009620000096200000962000009620000096200000962000009620000
096200000962000009620000096200000abe00000abe00000d0a00000d0a
00000d0a00000d0a00000d0a00000d0a00000d0a00000d0a00000d0a0000
0d0a00000d0a00000d0a00000d0a00000d0a00000d0a00000d0a00000d0a
00000d0a00000d0a00000d0a00000d0a00000d0a00000d0a00000d0a0000
0d0a00000d0a00000d0a00000d0a00000d0a00000d0a00000d0a00000d0a
00000e7000000fde0000111e0000130600001490000015fa0000160a0000
174800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
0000175800001758000017580000175800001758000100000f2201200010
00c3000700020010002f0065000011900182000400010000000e00ae0000
00030000000000640000000000030000000700fa00640001000000000000
0032015e0001000000000003000e01900001000000000004000e019e0001
000000000006000e01ac0001000000000007007d01ba0003000104090000
006402370003000104090001001c029b0003000104090002000e02b70003
000104090003001c02c50003000104090004001c02e10003000104090006
001c02fd000300010409000700fa031900a9002000320030003000380020
004d006900630072006f0073006f0066007400200043006f00720070006f
0072006100740069006f006e002e00200041006c006c0020005200690067
006800740073002000520065007300650072007600650064002e00430061
006c00690062007200690020006900730020006500690074006800650072
002000610020007200650067006900730074006500720065006400200074
0072006100640065006d00610072006b0020006f00720020006100200074
0072006100640065006d00610072006b0020006f00660020004d00690063
0072006f0073006f0066007400200043006f00720070006f007200610074
0069006f006e00200069006e002000740068006500200055006e00690074
00650064002000530074006100740065007300200061006e0064002f006f
00720020006f007400680065007200200063006f0075006e007400720069
00650073002ea92032303038204d6963726f736f667420436f72706f7261
74696f6e2e20416c6c205269676874732052657365727665642e4d575658
4e512b43616c696272694d5756584e512b43616c696272694d5756584e51
2b43616c6962726943616c69627269206973206569746865722061207265
67697374657265642074726164656d61726b206f7220612074726164656d
61726b206f66204d6963726f736f667420436f72706f726174696f6e2069
6e2074686520556e697465642053746174657320616e642f6f72206f7468
657220636f756e74726965732e00a9002000320030003000380020004d00
6900630072006f0073006f0066007400200043006f00720070006f007200
6100740069006f006e002e00200041006c006c0020005200690067006800
740073002000520065007300650072007600650064002e004d0057005600
58004e0051002b00430061006c0069006200720069005200650067007500
6c00610072004d005700560058004e0051002b00430061006c0069006200
720069004d005700560058004e0051002b00430061006c00690062007200
69004d005700560058004e0051002b00430061006c006900620072006900
430061006c00690062007200690020006900730020006500690074006800
650072002000610020007200650067006900730074006500720065006400
2000740072006100640065006d00610072006b0020006f00720020006100
2000740072006100640065006d00610072006b0020006f00660020004d00
6900630072006f0073006f0066007400200043006f00720070006f007200
6100740069006f006e00200069006e002000740068006500200055006e00
69007400650064002000530074006100740065007300200061006e006400
2f006f00720020006f007400680065007200200063006f0075006e007400
72006900650073002e000000b2090320b80284b40918014a20b80283b409
18014a20b80282b40918014a20b80281b40918014a20b80280b40918014a
20b8027fb40918014a20b8027eb40918014a20b8027db40918014a20b802
7cb40918014a20b8027bb40918014a20b8027ab40918014a20b80279b409
18014a20b80278b40918014a20b80277b40918014a20b80276b40918014a
20b80275b40918014a20b80274b40918014a20b80273b40918014a20b802
71b40918014a20b80270b40918014a20b8026fb40918014a20b8026eb409
18014a20b8026db40918014a20b8026cb40918014a20b8026bb40918014a
20b8026ab40918014a20b80269b40918014a20b80268b40918014a20b802
67b40918014a20b80266b40918014a20b80265b40918014a20b80264b409
18014a20b80263b40918014a20b80262b40918014a20b80261b40918014a
20b80260b40918014a20b8025fb40918014a20b8025eb40918014a20b802
5db40918014a20b8025cb40918014a20b8025bb40918014a20b8025ab409
18014a20b80259b40918014a20b80258b40918014a20b80257b40918014a
20b80256b40918014a20b80255b40918014a20b80254b40918014a20b802
53b40918014a20b80252b40918014a20b80251b40918014a20b80250b409
18014a20b8024fb40918014a20b8024eb40918014a20b8024db40918014a
20b8024cb40918014a20b8024bb40918014a20b8024ab40918014a20b802
49b40918014a20b80248b40918014a20b80247b40918014a20b80246b409
18014a20b80245b40918014a20b80244b40918014a20b80243b40918014a
20b80242b40918014a20b80241b40918014a20b80240b40918014a20b802
3fb40918014a20b8023eb40918014a20b8023db40918014a20b8023cb409
18014a20b8023bb40918014a20b8023ab40918014a20b80239b40918014a
20b80238b40918014a20b80237b40918014a20b80236b40918014a20b802
35b40918014a20b80234b40918014a20b80233b40918014a20b80232b409
18014a20b80231b40918014a20b80230b40918014a20b8022fb40918014a
20b8022eb40918014a20b8022db40918014a20b8022cb40918014a20b802
2bb40918014a20b8022ab40918014a20b80229b40918014a20b80228b409
18014a20b80227b40918014a20b80226b40918014a20b80225b40918014a
20b80224b40918014a20b80223b40918014a20b80222b40918014a20b802
21b40918014a20b80220b40918014a20b8021fb40918014a20b8021eb409
18014a20b8021db40918014a20b8021cb40918014a20b8021bb40918014a
20b8021ab40918014a20b80219b40918014a20b80218b40918014a20b802
17b40918014a20b80216b40918014a20b80215b40918014a20b80214b409
18014a20b80213b40918014a20b80212b40918014a20b80211b40918014a
20b80210b40918014a20b8020fb40918014a20b8020eb40918014a20b802
0db40918014a20b8020cb40918014a20b8020bb40918014a20b8020ab409
18014a20b80209b40918014a20b80208b40918014a20b80207b40918014a
20b80206b40918014a20b80205b40918014a20b80204b40918014a20b802
03b40918014a20b80202b40918014a20b80201b40918014a20b80200b409
18014a20b801ffb40918014a20b801feb40918014a20b801fdb40918014a
20b801fcb40918014a20b801fbb40918014a20b801fab40918014a20b801
f9b40918014a20b801f8b40918014a20b801f7b40918014a20b801f6b409
18014a20b801f5b40918014a20b801f4b40918014a20b801f3b40918014a
20b801f2b40918014a20b801f1b40918014a20b801f0b40918014a20b801
efb40918014a20b801eeb40918014a20b801edb40918014a20b801ecb409
18014a20b801ebb40918014a20b801eab40918014a20b801e9b40918014a
20b801e8b40918014a20b801e7b40918014a20b801e6b40918014a20b801
e5b40918014a20b801e4b40918014a20b801e3b40918014a20b801e2b409
18014a20b801e1b40918014a20b801e0b40918014a20b801dfb40918014a
20b801deb40918014a20b801ddb40918014a20b801dcb40918014a20b801
dbb40918014a20b801dab40918014a20b801d9b40918014a20b801d8b409
18014a20b801d7b40918014a20b801d6b40918014a20b801d5b40918014a
20b801d4b40918014a20b801d3b40918014a20b801d2b40918014a20b801
d1b40918014a20b801d0b40918014a20b801cfb40918014a20b801ceb409
18014a20b801cdb40918014a20b801ccb40918014a20b801cbb40918014a
20b801cab40918014a20b801c9b40918014a20b801c8b40918014a20b801
c7b40918014a20b801c6b40918014a20b801c5b40918014a20b801c4b409
18014a20b801c3b40918014a20b801c2b40918014a20b801c1b40918014a
20b801c0b40918014a20b801bfb40918014a20b801beb40918014a20b801
bdb40918014a20b801bcb40918014a20b801bbb40918014a20b801bab409
18014a20b801b9b40918014a20b801b8b40918014a20b801b7b40918014a
20b801b6b40918014a20b801b5b40918014a20b801b4b40918014a20b801
b3b40918014a20b801b2b40918014a20b801b1b40918014a20b801b0b409
18014a20b801afb40918014a20b801aeb40918014a20b801adb40918014a
20b801acb40918014a20b801abb40918014a20b801aab40918014a20b801
a9b40918014a20b801a8b40918014a20b801a7b40918014a20b801a6b409
18014a20b801a5b40918014a20b801a4b40918014a20b801a3b40918014a
20b801a2b40918014a20b801a1b40918014a20b801a0b40918014a20b801
9fb40918014a20b8019eb40918014a20b8019db40918014a20b8019cb409
18014a20b8019bb40918014a20b8019ab40918014a20b80199b40918014a
20b80198b40918014a20b80197b40918014a20b80196b40918014a20b801
95b40918014a20b80194b40918014a20b80193b40918014a20b80192b409
18014a20b80191b40918014a20b80190b40918014a20b8018fb40918014a
20b8018eb40918014a20b8018db40918014a20b8018cb40918014a20b801
8bb40918014a20b8018ab40918014a20b80189b40918014a20b80188b409
18014a20b80187b40918014a20b80186b40918014a20b80185b40918014a
20b80184b40918014a20b80183b40918014a20b80182b40918014a20b801
81b40918014a20b80180b40918014a20b8017fb40918014a20b8017eb409
18014a20b8017db40918014a20b8017cb40918014a20b8017bb40918014a
20b8017ab40918014a20b80179b40918014a20b80178b40918014a20b801
77b40918014a20b80176b40918014a20b80175b40918014a20b80174b409
18014a20b80173b40918014a20b80172b40918014a20b80171b40918014a
20b80170b40918014a20b8016fb40918014a20b8016eb40918014a20b801
6db40918014a20b8016cb40918014a20b8016bb40918014a20b8016ab409
18014a20b80169b40918014a20b80168b40918014a20b80167b40918014a
20b80166b40918014a20b80165b40918014a20b80164b40918014a20b801
63b40918014a20b80162b40918014a20b80161b40918014a20b80160b409
18014a20b8015fb40918014a20b8015eb40918014a20b8015db40918014a
20b8015cb40918014a20b8015bb40918014a20b8015ab40918014a20b801
59b40918014a20b80158b40918014a20b80157b40918014a20b80156b409
18014a20b80155b40918014a20b80154b40918014a20b80153b40918014a
20b80152b40918014a20b80150b40918014a20b8014fb40918014a20b801
4eb40918014a20b8014cb40918014a20b8014bb40918014a20b8014ab409
18014a20b80149b40918014a20b80148b40918014a20b80147b40918014a
20b80146b40918014a20b80145b40918014a20b80144b40918014a20b801
43b30918014ab80284b21e3e1fb80283b21e151fb80282b21e3e1fb80281
b21e3a1fb80280b21e3e1fb8027fb21e3e1fb8027eb21e0c1fb8027db21e
3e1fb8027cb21e3e1fb8027bb21e3e1fb8027ab21e3e1fb80279b21d411f
b80278b21d431fb80277b21d431fb80276b21d431fb80275b21d411fb802
74b21d431fb80273b21d431fb80272b21d411fb80271b21d421fb80270b2
1d421fb8026fb21d421fb8026eb21d431fb8026db21d431fb8026cb21d43
1fb8026bb21c451fb8026ab21c451fb80269b21c451fb80268b21c451fb8
0267b21c451fb80266b21c441fb80265b21c451fb80264b21c451fb80263
b21c451fb80262b21c451fb80261b21c451fb80260b21c451fb8025fb21c
451fb8025eb21c441fb8025db21c451fb8025cb21c451fb8025bb21c451f
b8025ab21c451fb80259b21c451fb80258b21c451fb80257b21c451fb802
56b21c451fb80255b21c451fb80254b21c451fb80253b21c451fb80252b2
1c451fb80251b21c451fb80250b21c451fb8024fb21c451fb8024eb21c45
1fb8024db21c451fb8024cb21c451fb8024bb21c451fb8024ab21b491fb8
0249b21b491fb80248b21b4a1fb80247b21b4a1fb80246b21b4b1fb80245
b21b4c1fb80244b21b4c1fb80243b21b4c1fb80242b21b4b1fb80241b21b
491fb80240b21b491fb8023fb21b4a1fb8023eb21b4a1fb8023db21b4a1f
b8023cb21b4b1fb8023bb21b4b1fb8023ab21b4c1fb80239b21b4c1fb802
38b21b4c1fb80237b21b4c1fb80236b21b4c1fb80235b21b491fb80234b2
1b491fb80233b21b4a1fb80232b21b4a1fb80231b21b4a1fb80230b21b4b
1fb8022fb21b4b1fb8022eb21b4c1fb8022db21b4c1fb8022cb21b4c1fb8
022bb21b4c1fb8022ab21b4c1fb80229b21b4c1fb80228b21b4c1fb80227
b21b491fb80226b21b491fb80225b21b4a1fb80224b21b4a1fb80223b21b
4a1fb80222b21b4b1fb80221b21b4b1fb80220b21b4c1fb8021fb21b4c1f
b8021eb21b4c1fb8021db21b4c1fb8021cb21b4c1fb8021bb21b4c1fb802
1ab21a4e1fb80219b21a4e1fb80218b21a4f1fb80217b21a4f1fb80216b2
1a4e1fb80215b21a4e1fb80214b21a4f1fb80213b21a4f1fb80212b21a4f
1fb80211b21a4e1fb80210b21a4e1fb8020fb21a4f1fb8020eb21a4f1fb8
020db21a4f1fb8020cb21a4e1fb8020bb21a4e1fb8020ab21a4e1fb80209
b21a4f1fb80208b21a4f1fb80207b21a4f1fb80206b219501fb80205b219
511fb80204b219511fb80203b219501fb80202b219511fb80201b219511f
b80200b219511fb801ffb219511fb801feb219501fb801fdb219511fb801
fcb219511fb801fbb219511fb801fab219501fb801f9b219511fb801f8b2
19511fb801f7b219511fb801f6b219511fb801f5b218541fb801f4b21853
1fb801f3b218541fb801f2b218541fb801f1b218541fb801f0b218531fb8
01efb218541fb801eeb218541fb801edb218541fb801ecb218531fb801eb
b218531fb801eab218541fb801e9b218541fb801e8b218541fb801e7b218
541fb801e6b218531fb801e5b218541fb801e4b218531fb801e3b218541f
b801e2b218541fb801e1b218541fb801e0b218531fb801dfb218531fb801
deb218541fb801ddb218541fb801dcb218541fb801dbb218541fb801dab2
18531fb801d9b218541fb801d8b218541fb801d7b217571fb801d6b21756
1fb801d5b217561fb801d4b217571fb801d3b217571fb801d2b217571fb8
01d1b217571fb801d0b217561fb801cfb217561fb801ceb217571fb801cd
b217571fb801ccb217571fb801cbb217571fb801cab217561fb801c9b217
561fb801c8b217571fb801c7b217571fb801c6b217571fb801c5b217571f
b801c4b217571fb801c3b217561fb801c2b217571fb801c1b217571fb801
c0b217571fb801bfb217561fb801beb217561fb801bdb217571fb801bcb2
17571fb801bbb217571fb801bab217571fb801b9b217571fb801b8b21756
1fb801b7b217571fb801b6b217571fb801b5b217571fb801b4b217571fb8
01b3b2163f1fb801b2b2165b1fb801b1b2165b1fb801b0b2165b1fb801af
b2165b1fb801aeb2165b1fb801adb2165b1fb801acb2165b1fb801abb216
5b1fb801aab2163e1fb801a9b2163f1fb801a8b2163f1fb801a7b2165b1f
b801a6b2165b1fb801a5b2165b1fb801a4b2165b1fb801a3b2165b1fb801
a2b2165b1fb801a1b2165b1fb801a0b2165b1fb8019fb2163e1fb8019eb2
163f1fb8019db2163f1fb8019cb2165b1fb8019bb2165b1fb8019ab2165b
1fb80199b2165b1fb80198b2163e1fb80197b2165b1fb80196b2165b1fb8
0195b2165b1fb80194b2163e1fb80193b2163f1fb80192b2163f1fb80191
b2165b1fb80190b2165b1fb8018fb2165b1fb8018eb2165b1fb8018db216
5b1fb8018cb2163f1fb8018bb2165b1fb8018ab2165b1fb80189b2165b1f
b80188b2165b1fb80187b2165b1fb80186b215611fb80185b215621fb801
84b215621fb80183b215661fb80182b215661fb80181b215551fb80180b2
15451fb8017fb215361fb8017eb215361fb8017db215611fb8017cb21562
1fb8017bb215621fb8017ab215641fb80179b215661fb80178b215661fb8
0177b215661fb80176b215661fb80175b215661fb80174b215661fb80173
b215451fb80172b215621fb80171b215621fb80170b215631fb8016fb215
641fb8016eb215661fb8016db215661fb8016cb215661fb8016bb215661f
b8016ab215661fb80169b215621fb80168b215621fb80167b215611fb801
66b215641fb80165b215641fb80164b215661fb80163b215661fb80162b2
15661fb80161b215661fb80160b215661fb8015fb215661fb8015eb21555
1fb8015db215451fb8015cb215451fb8015bb215361fb8015ab215611fb8
0159b215621fb80158b215621fb80157b215631fb80156b215641fb80155
b215661fb80154b215661fb80153b215661fb80152b215661fb80151b214
401fb80150b214551fb8014fb214561fb8014eb214831fb8014db2142d1f
b8014cb214401fb8014bb214401fb8014ab214411fb80149b214401fb801
48b214401fb80147b214411fb80146b2147e1fb80145b214871fb80144b2
147f1fb80143b214801fb80142b212461fb80141b212461fb80140b21246
1fb8013fb212461fb8013eb212441fb8013db212461fb8013cb211591fb8
013bb211591fb8013ab2115b1fb80139b2115b1fb80138b211471fb80137
b211581fb80136b2115a1fb80135b2115b1fb80134b2115b1fb80133b211
2c1fb80132b211471fb80131b211551fb80130b211571fb8012fb211571f
b8012eb211581fb8012db211591fb8012cb211591fb8012bb2115a1fb801
2ab2115a1fb80129b2115b1fb80128b2115b1fb80127b2115b1fb80126b2
115b1fb80125b211561fb80124b211561fb80123b211571fb80122b21158
1fb80121b211591fb80120b2115a1fb8011fb2115a1fb8011eb2115b1fb8
011db2115b1fb8011cb2115b1fb8011bb2115b1fb8011ab2115b1fb80119
b2105d1fb80118b2105e1fb80117b2105f1fb80116b2105f1fb80115b210
5f1fb80114b2105f1fb80113b2105f1fb80112b2105d1fb80111b2105e1f
b80110b2105f1fb8010fb2105f1fb8010eb2105f1fb8010db2105f1fb801
0cb2105d1fb8010bb2105e1fb8010ab2105f1fb80109b2105f1fb80108b2
105f1fb80107b2105f1fb80106b2105d1fb80105b2105e1fb80104b2105f
1fb80103b2105f1fb80102b2105f1fb80101b2105f1fb8010040ff0f621f
ff0f621ffe0f631ffd0f641ffc0f621ffb0f621ffa0f621ff90f631ff80f
641ff70f641ff60f641ff50f641ff40f621ff30f621ff20f631ff10f641f
f00f641fef0f641fee0f641fed0f621fec0f621feb0f631fea0f641fe90f
641fe80f641fe70f641fe60e671fe50e681fe40e681fe30e681fe20e681f
e10e671fe00e681fdf0e681fde0e681fdd0e671fdc0e681fdb0e681fda0e
681fd90e681fd80d6b1fd70d311fd60d6b1fd50d6c1fd40d261fd30d261f
d20d6c1fd10d2b1fd00d2b1fcf0d2b1fce0d6b1fcd0d6c1fcc0d6d1fcb0d
6b1fca0d6c1fc90d6d1fc80d6a1fc70d691fc60d681fc50d671fc40d261f
c30d311fc20d311fc10d311f40ffc00d311fbf0d311fbe0d311fbd0c711f
bc0c721fbb0c731fba0c741fb90c741fb80c741fb70c711fb60c711fb50c
721fb40c731fb30c741fb20c741fb10c741fb00c741faf0b791fae0b7a1f
ad0b7c1fac0b7d1fab0b7e1faa0b7e1fa90b7e1fa80b7e1fa70b7e1fa60b
7e1fa50b2d1fa40b7e1fa30b7e1fa20b791fa10b7e1fa00b6b1f9f0b791f
9e0b7e1f9d0b7e1f9c0b791f9b0b7a1f9a0b7c1f990b7d1f980b7e1f970b
7e1f960b7e1f950b7e1f940b7e1f930b7e1f920b6b1f910b2d1f900a4e1f
8f0a4f1f8e0a671f8d0aa51f8c0aa71f8503251f8403381f8301381f8255
805581ab80557f557d557eab7d550b7d010b7d1b7d4b7d7b7dab7ddb7d40
12060a7c557a557bab7a557955775578ab7755ba028600660285403c5576
ab755504751475747503f47501ab75014475013075010200751075207503
0c7455725573ab7255007250728072b072043bb072e072020072010ab8ff
c0b3721b1e46b8ffc0407c720d104671556f5570ab6f556e666d556a0325
1f6938675568ab67556638645565ab645563386255613860555f385d555e
ab5d555c385a555bab5a55593858555703251f5638545555ab5455533851
5552ab51554f384e554e03251f4d384b554cab4b554a38485549ab485547
3846554503381f001c101c201c0310b8ffc0404e1c1b1e46001b0142301b
401be01bf01b04001bb01bc01b03120f1a1f1a02290f1901434f19016f19
7f198f19030f18cf18024018292c460f17cf17df17ef1704134017292e46
0016101620160315b8ffc0b3164d5446b8ffc0b3163f4446b8ffc0b31631
3546b8ffc0404d162326460f15010f151f1502451f15010011e011f01103
15bf10cf10020f0f010f0fff0f02400f3135460f0e1f0e020f0e1f0eff0e
03400e3137460f0d1f0d020f0d1f0dff0d0316400d313746b8ffc040270c
5054460f0b1f0b02553f0b4f0b02400b3f4346400b2d3046000301200101
0001100120010308b8ffc0b301151f46b80100b316010501b80190b15453
2b2b4bb80800524bb008505bb00188b02553b00188b040515ab00688b000
555a5b58b101018e59b101024354b0144b515a58b101018e59858d8d0042
1d4bb01d5358b0a01d594bb0805358b0401d594bb0ff5358b0001db11600
42592b5e7375732b2b745e732b2b5e73742b73742b7374745e7301755e73
742b2b2b2b5e732b5e732b7374755e735e735e73755e732b5e73002b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b5e7375
5e732b2b5e735f73737373742b2b2b2b2b2b5e73742b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b012b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2bb10002435458
41ff0284006402830064028200640281006402800064027f0064027e0064
027d0064027c0064027b0064027a00640279006402780064027700640276
00640275006402740064027300640271006402700064026f0064026e0064
026d0064026c0064026b0064026a00640269006402680064026700640266
0064026500640264006402630064026200640261006402600064025f0064
025e0064025d0064025c0064025b0064025a006402590064025800640257
006402560064025500640254006402530064025200640251006402500064
024f0064024e0064024d0064024c0064024b0064024a0064024900640248
006402470064024600640245006402440064024300640242006402410064
02400064023f0064023e0064023d0064023c0064023b0064023a00640239
006402380064023700640236006402350064023400640233006402320064
0231006402300064022f0064022e0064022d0064022c0064022b0064022a
006402290064022800640227006402260064022500640224006402230064
022200640221006402200064021f0064021e0064021d0064021c0064021b
0064021a0064021900640218006402170064021600640215006402140064
02130064021200640211006402100064020f0064020e0064020d0064020c
0064020b0064020a00640209006402080064020700640206006402050064
020441ff00640203006402020064020100640200006401ff006401fe0064
01fd006401fc006401fb006401fa006401f9006401f8006401f7006401f6
006401f5006401f4006401f3006401f2006401f1006401f0006401ef0064
01ee006401ed006401ec006401eb006401ea006401e9006401e8006401e7
006401e6006401e5006401e4006401e3006401e2006401e1006401e00064
01df006401de006401dd006401dc006401db006401da006401d9006401d8
006401d7006401d6006401d5006401d4006401d3006401d2006401d10064
01d0006401cf006401ce006401cd006401cc006401cb006401ca006401c9
006401c8006401c7006401c6006401c5006401c4006401c3006401c20064
01c1006401c0006401bf006401be006401bd006401bc006401bb006401ba
006401b9006401b8006401b7006401b6006401b5006401b4006401b30064
01b2006401b1006401b0006401af006401ae006401ad006401ac006401ab
006401aa006401a9006401a8006401a7006401a6006401a5006401a40064
01a3006401a2006401a1006401a00064019f0064019e0064019d0064019c
0064019b0064019a00640199006401980064019700640196006401950064
0194006401930064019200640191006401900064018f0064018e0064018d
0064018c0064018b0064018a006401890064018800640187006401860064
0185006441800184006401830064018200640181006401800064017f0064
017e0064017d0064017c0064017b0064017a006401790064017800640177
006401760064017500640174006401730064017200640171006401700064
016f0064016e0064016d0064016c0064016b0064016a0064016900640168
006401670064016600640165006401640064016300640162006401610064
01600064015f0064015e0064015d0064015c0064015b0064015a00640159
006401580064015700640156006401550064015400640153006401520064
01500064014f0064014e0064014c0064014b0064014a0064014900640148
006401470064014600640145006401440064014300642b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b592b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b185f5e00>
[5977 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
2 3338 1004 <00020048ffed03c705210013002b00ea4019281201291101260d01260c01
2608012507012a03012902012db8ffc040250f024d602d01141810014d14
100f014d14160d014d140a0c014d14200b014d14180c014d14bb022d0000
0020ffe8b310014d20b8fff0b30f014d20b8ffeab30d014d20b8fff6b30c
014d20b8ffe8b60c014d24200120b8022d40090a200030004000030ab8ff
f040090f014d2f0a4f0a0200b8ffd040090f014d0a100f024d00b8ffc040
0a0f024d000a000a2d2c1bb8010ab20f5325b8010ab10556003fed3fed11
120139392f2f2b2b2b5d2b5d10e15d2b2b2b2b2b10e12b2b2b2b2b2b3130
5d2b5d5d5d5d5d5d5d5d01140e0223222e0235343e0233321e0207342e04
23220e0215141e0233323e0403c72f6db0817aa7662b306cb0807ba7662b
b00e1b2b3c4d30556a3d161e41654838553d281809028a95f6b16157a9f7
a094f7b16157a9f7ac619a76553719508cbc6c91cb803a24435e7285>PBAAAA+Calibri AddT42Char 
2 3696 1005 <000100ae0000039f0517002e00e54024241e01241d01241c01231b01241a
01241901261801261701291201291101122010014d30b8ffc0400d0f024d
60300100200b014d0029b8ffe8b310014d29b8fff0b30f014d29b8fff0b3
0d014d29b8fff6b30c014d29b8fff8b30b014d29b80211400e1e18200b01
4d180b200b014d0b11b8ffe0b30f014d11b8ffd4b30f024d11b8ffc0b310
014d11b8ffe0b30f014d11b8ffc0b30c014d11b8fff040090b014da01101
111312b8013fb323522910b80107b10654003fed323ffdcd012f5d2b2b2b
2b2b2bcd2bc42b33f12b2b2b2b2bc52b31305d2b002b015d5d5d5d5d5d5d
5d5d5d25140e022321222e0235343e02332111070606262635343e023725
3e0333321e02151133321e02039f060a0d07fd5c070c0b0606090d08010e
fa13170e0503060b09012a040c12181218201206ea080e090544131a1007
07101a13121a110903d8950a040d1e171118100c06bf0304040104070b06
fb8f09111a00>PBAAAA+Calibri AddT42Char 
2 4062 1006 <000100720000039c0521003e0094400d2936012b1e01291d01261e0140b8
ffc040170f024d604001161810014d16100c0d014c16200b014d16b8022d
b633253325330039b8ffe8b310014d39ba027f000bffc0b30c014d0bb8ff
e0400b0f014d0b1138392020391bb8012eb63316062e531039b80128b106
54003fed323f123939ed11392f123939012f2b2be12bcd39392f2f10e12b
2b2b31305d2b005d015d5d5d25140e022321222e0235343e0237133e0335
342e0223220e0223222e0235343e0633321e0215140e02070721321e0203
9c05090f09fd350e150f07030a0f0cfb576939121c3550343d6149310c07
0b0704020508183b596b3b5e8d5d2e1647866fcd0233080f0b054a121c13
0907101e16141e17170d010a5c9278622b2b4d3a2222282208121e150f16
100e15242318355c7a453e7b8faf72d609121b00>PBAAAA+Calibri AddT42Char 
2 4382 1007 <00010067ffed0392052100580105b9005affc0401c0f024d605a01310810
014d31100f014d31100c0d014c31200b014d31b80235400a4e53264e4e18
13014d40b8ffe840260f014d26200f014d40264e4e2640030e1b0810014d
1b100f014d1b100c0d014c1b200b014d1bb8fff8b30b014d1bb8022db500
080b014d00b8ffe8b40f024d000eb8ffe0b30f014d0eb8fff0b30f014d0e
b8ffc040130c014d0e3b400f014d3b400c0d014c2f3b0111b8ffc0b30f01
4d11b8ffc0400a0c0d014c3b113b111636b8010b400a49532cf320200549
5316b8010bb10556003fed3f12392fed3910ed1139392f2f2b2b5d2b2b01
2f2b2b2bd42b2be12b2b2b2b2b1217392f2f2f2b2b2b11123910e12b2b2b
2b31305d2b01140e0223222e0635343633321e0233323e0235342e022323
222e0235343e023333323e0235342e0223220e0223222e0235343e063332
1e0215140e0207151e0303923e74aa6b4171583a0f0806030e0d0935536f
44426444222b53794d7b080f0b07060b0e0971426949271a3451353a614c
320a070b0703020608133a556f405a885b2d203e5a3b436f502d0172598f
6637151d1f0e0e141d15241c202520223e55323758402207101a1513190f
07224059372849361f232823050f1b160f17110e132423182e5475473d69
51390b020735506b>PBAAAA+Calibri AddT42Char 
2 4870 1008 <00020030fffa03d30514002a002e00fb403a252e01262d01272c01242701
242601251c01261b01231a01241901251801251701261601261501261401
261001260f012405012404012b1b0130b8ffc040120f024d6030012d1618
0f024d162010014d16b8ffe0b30f014d16b8ffe0b70c014d161c2e2e10b8
fffc401d0f024d101810014d10100f014d10100d014d100a0c014d10100b
014d10bb021100270004ffd4b30f024d04b8ffd0b30c014d04b8ffe0400a
0b014d0404302f271b2eb8010b400a042b2110100a21520a55003f3f1239
2f123933ed3232111201392f2b2b2b33e12b2b2b2b2b2b321133cd2b2b2b
2b3231305d2b005d015d5d5d5d5d5d5d5d5d5d5d5d5d5d5d5d5d5d011406
232311140e0223222e02351121222e0235343e0237013e0333321e021511
3332160123012103d31412920814201918201307fdea0c100d0502060a07
01d205131e2c1e21311e10921115fea102fe5b01a701702126fef0080b08
0404080b08011006101e18131e19170d0312080c080305080d09fcc62302
e9fd3a00>PBAAAA+Calibri AddT42Char 
2 5264 1009 <00010065ffed0396050e003e00c1400d27370127360126080126030140b8
ffc0b60f024d60400137b8ffe8b310014d37b8fff0b40b0d014c37ba0211
0028ffc0402810014d28400f014d280e4f326f327f3203321d1810014d1d
100f014d1d100c0d014c1d200b014d1dba02330000ffe8b30f024d00b8ff
c0b50f014d004013b8ffc0b70f10014c13131836b8012c400c2c3af42022
012222052c5118b8010bb10556003fed3f12392f5ded10ed11392f2b0110
d62b2be12b2b2b2bc45dd4d42b2be12b2b31305d2b005d5d015d5d01140e
0223222e0635343e0233321e0233323e0235342e02232206232226351134
363321321e02151406232111363633321e0203964680b16c3c6c54360f06
050203080b070a2a4769484370512e27517c563d58261c181f1d023d080f
0a051412fe1d2349306fa66f3901a068a26f3a1119180e0c111a12111b11
08191d1a2044674a3e5f3f1f0c1a25020f212009121c132428fe95050235
618a>PBAAAA+Calibri AddT42Char 
2 606 44 <000100acfffa04500514002f00b8b43f3101230cb8ffe8b310014d0cb8ff
f0b30f014d0cb8fff0b30d014d0cb8fff6b30c014d0cb8ffe8b30b014d0c
b80211401c17240b1810014d0b100f014d0b100d014d0b0a0c014d0b180b
014d0bb802104017004015014d004013014d00401011014c00400c014d00
17b8ffc0b315014d17b8ffc0b613014d172a5224b8012c400fc00c01d00c
010c0c121d5212550555003f3f3f12392f5d71ed3f012f2b2bd42b2b2b2b
e12b2b2b2b2b3210e12b2b2b2b2b3231305d25140e0223222e0235112111
140e0223222e023511343e0233321e0215112111343e0233321e02150450
081421181a201408fdb308142119182214080814221819211408024d0814
201a182114081a080c070505070c08023efdc2080c070505070c0804da08
0c070505070c08fdfa0206080c070505070c0800>PBAAAA+Calibri AddT42Char 
2 926 75 <00020063ffed04e8052100130027007c401a141810014d14100f014d1414
0d014d14120c014d14180b014d14b80233400920003000800003001eb8ff
e8b310014d1eb8fff0b30f014d1eb8ffecb30d014d1eb8ffeeb30c014d1e
b8ffe8b30b014d1ebb0233000a00190129b20f5323b8012bb10556003fed
3fed012fe12b2b2b2b2bd45de12b2b2b2b2b313001140e0223222e023534
3e0233321e0207342e0223220e0215141e0233323e0204e84a93de9492d5
8b444a94de948fd48d45b5275b987070985f29265a9772719a5e2802969d
fcb15f57a6f6a099faaf5f56a5f3a96ebd8b4e548cbb6772c08b4d548fbc
>PBAAAA+Calibri AddT42Char 
2 0 0 <00050000fe7303d2050e000300070039004d004e005bbc000d0152001600
3a01b5b5154444082d07be0143000200200154000800010143400f04020d
b71a1a3f23b735068d031149b8012db43f078d0202003ffddefdce2ffdde
ed12392fed012fdde1dee110f1ce11392f33e1d4e1313001112111011121
1101140e020707140623222e02352726363333323e0235342623220e0223
222e02353436373e0333321e0203140e0223222e0235343e0233321e0201
03d2fc5a034ffd06027e233f5633051e1a0f140d0605021c18122d3c2510
535b253c2e1d0703070603050807283742224b6c4522da07111d15161d12
0808121d16151d1107fddb050efaf2050efb43046cfb9403063b5c3f2403
980a0802040606b81e18192a3b2149560f1310040b13101116080712110c
28445cfd86151c120808121c15151d120808121dfd4d>PBAAAA+Calibri AddT42Char 
PBAAAA+Calibri /CharStrings get begin
/zero 1004 def
/one 1005 def
/two 1006 def
/three 1007 def
/four 1008 def
/five 1009 def
/H 44 def
/O 75 def
end
PBAAAA+Calibri /Encoding get
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 72 /H put
dup 79 /O put
pop
end
%ADOEndSubsetFont
/VALTWF+Calibri /PBAAAA+Calibri findfont ct_VMDictPut
/VALTWF+Calibri*1 
[48{/.notdef}rp /zero /one /two /three /four /five 18{/.notdef}rp 
/H 6{/.notdef}rp /O 176{/.notdef}rp]
VALTWF+Calibri nf
VALTWF+Calibri*1 [9.4963 0 0 -9.4963 0 0 ]msf
22.3449 16.6966 mo
(H)sh
VALTWF+Calibri*1 [6.3309 0 0 -6.3309 0 0 ]msf
28.2326 16.6966 mo
(1)sh
VALTWF+Calibri*1 [9.4963 0 0 -9.4963 0 0 ]msf
81.8434 16.6966 mo
(H)sh
VALTWF+Calibri*1 [6.3309 0 0 -6.3309 0 0 ]msf
87.7311 16.6966 mo
(2)sh
VALTWF+Calibri*1 [9.4963 0 0 -9.4963 0 0 ]msf
25.3412 175.708 mo
(H)sh
VALTWF+Calibri*1 [6.3309 0 0 -6.3309 0 0 ]msf
31.2289 175.708 mo
(4)sh
VALTWF+Calibri*1 [9.4963 0 0 -9.4963 0 0 ]msf
82.2248 175.708 mo
(H)sh
VALTWF+Calibri*1 [6.3309 0 0 -6.3309 0 0 ]msf
88.1125 175.708 mo
(5)sh
VALTWF+Calibri*1 [9.4963 0 0 -9.4963 0 0 ]msf
54.107 47.0312 mo
(O)sh
VALTWF+Calibri*1 [6.3309 0 0 -6.3309 0 0 ]msf
60.3746 47.0312 mo
(0)sh
VALTWF+Calibri*1 [9.4963 0 0 -9.4963 0 0 ]msf
56.6104 146.123 mo
(O)sh
VALTWF+Calibri*1 [6.3309 0 0 -6.3309 0 0 ]msf
62.8779 146.123 mo
(3)sh
220.9 63.038 mo
220.9 58.8421 224.429 55.441 228.782 55.441 cv
233.135 55.441 236.664 58.8421 236.664 63.038 cv
236.664 67.2338 233.135 70.635 228.782 70.635 cv
224.429 70.635 220.9 67.2338 220.9 63.038 cv
0 1 1 0 cmyk
ef
220.9 63.038 mo
220.647 63.038 li
220.646 60.8681 221.56 58.9024 223.033 57.4838 cv
224.505 56.0643 226.539 55.1877 228.782 55.1877 cv
231.025 55.1877 233.058 56.0643 234.531 57.4838 cv
236.003 58.9024 236.917 60.8681 236.917 63.038 cv
236.917 65.2078 236.003 67.1736 234.531 68.5922 cv
233.058 70.0116 231.025 70.8883 228.782 70.8882 cv
226.539 70.8883 224.505 70.0116 223.033 68.5922 cv
221.56 67.1736 220.646 65.2078 220.647 63.038 cv
220.9 63.038 li
221.153 63.038 li
221.153 65.064 222.004 66.8967 223.384 68.2276 cv
224.764 69.5578 226.672 70.3818 228.782 70.3818 cv
230.892 70.3818 232.799 69.5578 234.179 68.2276 cv
235.559 66.8967 236.41 65.064 236.41 63.038 cv
236.41 61.012 235.559 59.1792 234.179 57.8484 cv
232.799 56.5182 230.892 55.6942 228.782 55.6941 cv
226.672 55.6942 224.764 56.5182 223.384 57.8484 cv
222.004 59.1792 221.153 61.012 221.153 63.038 cv
220.9 63.038 li
1 .816159 .15967 .0319219 cmyk
f
221.216 124.004 mo
221.216 119.808 224.745 116.407 229.098 116.407 cv
233.451 116.407 236.98 119.808 236.98 124.004 cv
236.98 128.2 233.451 131.601 229.098 131.601 cv
224.745 131.601 221.216 128.2 221.216 124.004 cv
0 1 1 0 cmyk
ef
221.216 124.004 mo
220.963 124.004 li
220.963 121.834 221.877 119.869 223.349 118.45 cv
224.821 117.031 226.855 116.154 229.098 116.154 cv
231.341 116.154 233.375 117.031 234.847 118.45 cv
236.32 119.869 237.234 121.834 237.233 124.004 cv
237.234 126.174 236.32 128.14 234.847 129.559 cv
233.375 130.978 231.341 131.855 229.098 131.855 cv
226.855 131.855 224.821 130.978 223.349 129.559 cv
221.877 128.14 220.963 126.174 220.963 124.004 cv
221.216 124.004 li
221.47 124.004 li
221.47 126.03 222.32 127.863 223.701 129.194 cv
225.081 130.524 226.988 131.348 229.098 131.348 cv
231.208 131.348 233.115 130.524 234.496 129.194 cv
235.876 127.863 236.727 126.03 236.727 124.004 cv
236.727 121.978 235.876 120.145 234.496 118.815 cv
233.115 117.484 231.208 116.661 229.098 116.66 cv
226.988 116.661 225.081 117.484 223.701 118.815 cv
222.32 120.145 221.47 121.978 221.47 124.004 cv
221.216 124.004 li
1 .816159 .15967 .0319219 cmyk
f
1.07625 lw
[] 0 dsh
181.364 18.3103 mo
181.364 168.713 li
.750271 .679713 .654902 .901945 cmyk
@
223.231 68.3875 mo
181.363 168.715 li
@
272.37 172.499 mo
272.37 170.401 274.071 168.7 276.168 168.7 cv
278.266 168.7 279.967 170.401 279.967 172.499 cv
279.967 174.596 278.266 176.297 276.168 176.297 cv
274.071 176.297 272.37 174.596 272.37 172.499 cv
.808743 .585351 0 0 cmyk
ef
272.37 172.499 mo
272.117 172.499 li
272.117 170.261 273.931 168.447 276.168 168.447 cv
278.406 168.447 280.22 170.261 280.22 172.499 cv
280.22 174.736 278.406 176.55 276.168 176.55 cv
273.931 176.55 272.117 174.736 272.117 172.499 cv
272.37 172.499 li
272.623 172.499 li
272.627 174.456 274.211 176.04 276.168 176.044 cv
278.126 176.04 279.71 174.456 279.714 172.499 cv
279.71 170.541 278.126 168.957 276.168 168.953 cv
274.211 168.957 272.627 170.541 272.623 172.499 cv
272.37 172.499 li
1 .816159 .15967 .0319219 cmyk
f
177.533 14.4802 mo
177.533 12.3826 179.234 10.6817 181.332 10.6817 cv
183.43 10.6817 185.131 12.3826 185.131 14.4802 cv
185.131 16.5778 183.43 18.2787 181.332 18.2787 cv
179.234 18.2787 177.533 16.5778 177.533 14.4802 cv
.808743 .585351 0 0 cmyk
ef
177.533 14.4802 mo
177.28 14.4802 li
177.28 12.2426 179.094 10.4287 181.332 10.4285 cv
183.57 10.4286 185.383 12.2426 185.384 14.4802 cv
185.383 16.7179 183.57 18.5317 181.332 18.5319 cv
179.094 18.5317 177.28 16.7179 177.28 14.4802 cv
177.533 14.4802 li
177.787 14.4802 li
177.79 16.4379 179.374 18.0219 181.332 18.0255 cv
183.29 18.0219 184.874 16.4379 184.877 14.4802 cv
184.874 12.5226 183.29 10.9385 181.332 10.9349 cv
179.374 10.9385 177.79 12.5226 177.787 14.4802 cv
177.533 14.4802 li
1 .816159 .15967 .0319219 cmyk
f
272.37 14.4802 mo
272.37 12.3826 274.071 10.6817 276.168 10.6817 cv
278.266 10.6817 279.967 12.3826 279.967 14.4802 cv
279.967 16.5778 278.266 18.2787 276.168 18.2787 cv
274.071 18.2787 272.37 16.5778 272.37 14.4802 cv
.808743 .585351 0 0 cmyk
ef
272.37 14.4802 mo
272.117 14.4802 li
272.117 12.2426 273.931 10.4287 276.168 10.4285 cv
278.406 10.4287 280.22 12.2426 280.22 14.4802 cv
280.22 16.7179 278.406 18.5317 276.168 18.5319 cv
273.931 18.5317 272.117 16.7179 272.117 14.4802 cv
272.37 14.4802 li
272.623 14.4802 li
272.627 16.4379 274.211 18.0219 276.168 18.0255 cv
278.126 18.0219 279.71 16.4379 279.714 14.4802 cv
279.71 12.5226 278.126 10.9385 276.168 10.9349 cv
274.211 10.9385 272.627 12.5226 272.623 14.4802 cv
272.37 14.4802 li
1 .816159 .15967 .0319219 cmyk
f
177.533 172.499 mo
177.533 170.401 179.234 168.7 181.332 168.7 cv
183.43 168.7 185.131 170.401 185.131 172.499 cv
185.131 174.596 183.43 176.297 181.332 176.297 cv
179.234 176.297 177.533 174.596 177.533 172.499 cv
.808743 .585351 0 0 cmyk
ef
177.533 172.499 mo
177.28 172.499 li
177.28 170.261 179.094 168.447 181.332 168.447 cv
183.57 168.447 185.383 170.261 185.384 172.499 cv
185.383 174.736 183.57 176.55 181.332 176.55 cv
179.094 176.55 177.28 174.736 177.28 172.499 cv
177.533 172.499 li
177.787 172.499 li
177.79 174.456 179.374 176.04 181.332 176.044 cv
183.29 176.04 184.874 174.456 184.877 172.499 cv
184.874 170.541 183.29 168.957 181.332 168.953 cv
179.374 168.957 177.79 170.541 177.787 172.499 cv
177.533 172.499 li
1 .816159 .15967 .0319219 cmyk
f
.750271 .679713 .654902 .901945 cmyk
VALTWF+Calibri*1 [9.4963 0 0 -9.4963 0 0 ]msf
190.694 16.6966 mo
(H)sh
VALTWF+Calibri*1 [6.3309 0 0 -6.3309 0 0 ]msf
196.582 16.6966 mo
(1)sh
VALTWF+Calibri*1 [9.4963 0 0 -9.4963 0 0 ]msf
250.193 16.6966 mo
(H)sh
VALTWF+Calibri*1 [6.3309 0 0 -6.3309 0 0 ]msf
256.081 16.6966 mo
(2)sh
VALTWF+Calibri*1 [9.4963 0 0 -9.4963 0 0 ]msf
193.691 175.708 mo
(H)sh
VALTWF+Calibri*1 [6.3309 0 0 -6.3309 0 0 ]msf
199.578 175.708 mo
(4)sh
VALTWF+Calibri*1 [9.4963 0 0 -9.4963 0 0 ]msf
250.574 175.708 mo
(H)sh
VALTWF+Calibri*1 [6.3309 0 0 -6.3309 0 0 ]msf
256.462 175.708 mo
(5)sh
VALTWF+Calibri*1 [9.4963 0 0 -9.4963 0 0 ]msf
222.456 47.0312 mo
(O)sh
VALTWF+Calibri*1 [6.3309 0 0 -6.3309 0 0 ]msf
228.724 47.0312 mo
(0)sh
VALTWF+Calibri*1 [9.4963 0 0 -9.4963 0 0 ]msf
224.96 146.123 mo
(O)sh
VALTWF+Calibri*1 [6.3309 0 0 -6.3309 0 0 ]msf
231.227 146.123 mo
(3)sh
.506469 lw
[4.05176 1.51941 .506469 1.51941 .506469 1.51941 ] 0 dsh
276.216 168.682 mo
181.332 18.2786 li
@
183.76 169.746 mo
185.426 166.052 li
185.888 166.261 li
184.222 169.954 li
183.76 169.746 li
186.051 164.667 mo
186.259 164.206 li
186.721 164.414 li
186.513 164.876 li
186.051 164.667 li
186.884 162.821 mo
187.092 162.359 li
187.554 162.567 li
187.346 163.029 li
186.884 162.821 li
187.717 160.974 mo
189.383 157.281 li
189.845 157.489 li
188.179 161.182 li
187.717 160.974 li
190.008 155.896 mo
190.216 155.434 li
190.678 155.642 li
190.47 156.104 li
190.008 155.896 li
190.841 154.049 mo
191.049 153.587 li
191.511 153.795 li
191.303 154.257 li
190.841 154.049 li
191.674 152.202 mo
193.34 148.509 li
193.802 148.717 li
192.136 152.41 li
191.674 152.202 li
193.965 147.124 mo
194.173 146.662 li
194.635 146.87 li
194.426 147.332 li
193.965 147.124 li
194.798 145.277 mo
195.006 144.815 li
195.468 145.024 li
195.259 145.485 li
194.798 145.277 li
195.631 143.43 mo
197.297 139.737 li
197.759 139.945 li
196.092 143.639 li
195.631 143.43 li
197.922 138.352 mo
198.13 137.89 li
198.592 138.099 li
198.383 138.56 li
197.922 138.352 li
198.755 136.505 mo
198.963 136.044 li
199.425 136.252 li
199.216 136.714 li
198.755 136.505 li
199.588 134.659 mo
201.254 130.965 li
201.715 131.174 li
200.049 134.867 li
199.588 134.659 li
201.879 129.58 mo
202.087 129.119 li
202.548 129.327 li
202.34 129.789 li
201.879 129.58 li
202.712 127.734 mo
202.92 127.272 li
203.382 127.48 li
203.173 127.942 li
202.712 127.734 li
203.545 125.887 mo
205.211 122.194 li
205.672 122.402 li
204.006 126.095 li
203.545 125.887 li
205.835 120.809 mo
206.044 120.347 li
206.505 120.555 li
206.297 121.017 li
205.835 120.809 li
206.669 118.962 mo
206.877 118.5 li
207.338 118.709 li
207.13 119.17 li
206.669 118.962 li
207.502 117.115 mo
209.168 113.422 li
209.629 113.63 li
207.963 117.323 li
207.502 117.115 li
209.792 112.037 mo
210.001 111.575 li
210.462 111.783 li
210.254 112.245 li
209.792 112.037 li
210.625 110.19 mo
210.834 109.729 li
211.295 109.937 li
211.087 110.398 li
210.625 110.19 li
211.458 108.343 mo
213.125 104.65 li
213.586 104.858 li
211.92 108.552 li
211.458 108.343 li
213.749 103.265 mo
213.958 102.803 li
214.419 103.012 li
214.211 103.473 li
213.749 103.265 li
214.582 101.418 mo
214.791 100.957 li
215.252 101.165 li
215.044 101.627 li
214.582 101.418 li
215.415 99.5718 mo
217.081 95.8784 li
217.543 96.0866 li
215.877 99.78 li
215.415 99.5718 li
217.706 94.4934 mo
217.915 94.0317 li
218.376 94.24 li
218.168 94.7016 li
217.706 94.4934 li
218.539 92.6468 mo
218.747 92.1851 li
219.209 92.3933 li
219.001 92.855 li
218.539 92.6468 li
219.372 90.8001 mo
221.038 87.1066 li
221.5 87.3149 li
219.834 91.0083 li
219.372 90.8001 li
221.663 85.7216 mo
221.871 85.26 li
222.333 85.4683 li
222.125 85.93 li
221.663 85.7216 li
222.496 83.875 mo
222.704 83.4133 li
223.166 83.6216 li
222.958 84.0833 li
222.496 83.875 li
223.329 82.0283 mo
224.995 78.335 li
225.457 78.5432 li
223.791 82.2366 li
223.329 82.0283 li
225.62 76.95 mo
225.828 76.4883 li
226.29 76.6965 li
226.082 77.1582 li
225.62 76.95 li
226.453 75.1033 mo
226.661 74.6416 li
227.123 74.8498 li
226.915 75.3115 li
226.453 75.1033 li
227.286 73.2566 mo
228.516 70.5309 li
228.977 70.7392 li
227.748 73.4648 li
227.286 73.2566 li
f
.750271 .679713 .654902 .901945 cmyk
%ADOBeginSubsetFont: PBAAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal VALTWF+Calibri gcheck setglobal} if

2 0 3 <> VALTWF+Calibri AddT42Char 
2 2402 970 <0002006bffed03bd0520003400480099b9004affc040170f024d604a012b
753f01663f01433f01343f01243f013fb8024340140c1c1c0c7a35016a35
014b35013a35012b350135b80243b670000120000100b8ffe0b30f014d00
b8ffe8b70f024d00300c010cb8fffa400a0f024d0c3aff30300526b80100
b2135944b80115b1055f003fed3fed12392fed012f2b5dd42b2b5d5de15d
5d5d5d5d12392f10e15d5d5d5d5d3231305d2b01140e0223222e0435343e
0433321e0615140e0223222e0223220e02073e0333321e0207342e022322
0e0207141e0233323e0203bd346ca671517c5c3d2510122e4f77a66e254c
402c0e07040201070b090b26364d335d865529031a414d563169905926ae
17365a42254a453f1a213f5e3f405e3e1d01a3559f7949284a6c8aa45e53
aa9e8b673c090f120b0d0f130e121a10080e110e4c80a95c0f1e180f3965
89603a5f42240d171f1281ae692d30516500>VALTWF+Calibri AddT42Char 
2 5626 1010 <ffff006bffed03bd0520020603ca0000>VALTWF+Calibri AddT42Char 
2 5642 1011 <00010063fffa03af050e001f00d7b90011ffe8400a1121014c111010014d
11b8ffe8b30f014d11b8fff0b30d014d11b8ffe8b30c014d11b8fff8400a
0b014d74110126110110b8ffe8400a1121014c101010014d10b8ffe8b30f
014d10b8fff0b30d014d10b8ffe8400b0b0c014c75100126100106b8fff0
b30b014d21b8ffc0b60f024d60210100b8ffc0b310014d00b8ffd8b40b01
4d0015b8ffc0b30c014d15b8ffe8b30b014d15b8ffe8b30f014d15b8ffe0
b50f024d150511b8012db31a510b55003f3fed32012f2b2b2b2bcd2b2b31
305d2b2b5d5d2b2b2b2b2b5d5d2b2b2b2b2b2b01140e0207010e03232226
2636370121222635343e023321321e0203af03050906fe2e050f17241a22
2611020601eafd931313050a0e0902f20e150b0604c4121d1b190efbce0c
0f0903060d130d044a2824131c130906121c>VALTWF+Calibri AddT42Char 
2 322 4 <00020023fffa047e051400220026009db90024ffe8b40c10014c23b8ffe8
b40c10014c26b8fff0b40b10014c0bb8fff0b40b10014c0ab8fff0401a0b
10014c25100b10014c0d100b10014c0c100b10014c40280125b8fff0402c
0b014d24232625f40c0b0c18221d230a0d0116040c000c100c02af23bf23
cf2303230c230c121d5212550555003f3f3f1239392f2f5d5d1117391112
3939113310ed3211333130012b5d2b2b2b2b2b2b002b2b25161606062322
2e02270321030e03232226263637013e0333321e02170723032104750801
10251f1f251309046ffde66a030a13231c1d250f010801b2040d19271e20
2a1a0e047b01df01c23d161b0e0403070c09013bfec9090d0904050e1b16
04b20b0e080303080f0b8dfd7b00>VALTWF+Calibri AddT42Char 
2 1166 100 <0001000ffffa03d7050e00220065b718400d014d181100b8ffc0b40d014d
0006b8ffe8b310014d06b8fff0b30f014d06b8fff0b30d014d06b8fff6b3
0c014d06b8ffe8b30b014d06ba02110011ffc0b50d014d110612b80128b3
1d510c55003f3fed32012f2bf12b2b2b2b2bc52b10c42b313001140e0223
2111140e0223222e02351121222e0235343e023321321e0203d704090d08
fe940814211918221408fe94080d080505080d080384080d090404c4131c
1108fb9e080c070505070c08046208111c13131d120808121d00>VALTWF+Calibri AddT42Char 
2 1372 286 <0002005dffed039903ca002b003400ae402a2f363f366f360313200d014d
13200f014d1313212c100c014d2c180b014d2c100d014d2c100f10014c2c
b801f9b5442ba42b022bb8fff0b50f014d2b3404b8ffe0b30d014d04b8ff
eeb30c014d04b8ffe0b30b014d04b8ffe8b40f10014c04b8020a4021212c
c78004900402c00401d0040104041c2fdc264a18ea600e700e020e09ea1c
4d003ffdd45ded3fed12392f5d7172ed012fe12b2b2b2b32dd2b5de12b2b
2b2b12392f2b2b31305d0114062321141e0233323e0233321e0215140e06
23222e0235343e0233321e021527362623220e020703992719fdb21e4670
514064492f0c070b06030203070b365671406fa7723a3c71a0636a95602d
a60379773d5c3e2202020227214b78562e151a15070e19120d130f0c0b19
18133e7ab87a74b9814544739b581382942e4c653700>VALTWF+Calibri AddT42Char 
2 1694 367 <00010099fffa013e057100150040b73f174f176f170300b8fff0b30d014d
00b8fff6b30c014d00b8ffe8b30b014d00b8fff0b40f10014c00b801f8b4
0a1046054c003f3f012fe12b2b2b2b31305d25140e0223222e023511343e
0233321e0215013e0812201918201307071320181920120819080b080404
080b080538080c080404080c0800>VALTWF+Calibri AddT42Char 
2 1828 393 <00020099fe9403d503ca002a003d0080b53f3f0121360ab8fff0b30d014d
0ab8fff6b30c014d0ab8fff0b40f10014c0ab8ffe8b30b014d0ab801f840
17152b200d014d2b120c014d2b180f10014c2b180b014d2bb8020a400900
150a363521040530b80105b6264a1b49104f39b80105b1054d003fed3f3f
3fed121739012fd4e12b2b2b2b10e12b2b2b2b323931305d01140e022322
2e022711140e0223222e023511343e0233321e0215153e0333321e020734
2e0223220e020711161633323e0203d53363925e28444140240812201918
20130706121c14151b1207294c4d512d628a5728ae15335640203e404627
447a433e59371a01e976bc834710223423fe3e080c080404080c0804e909
0b080303080b09792a3e29154c84af754581643c13294331fe9a53583c64
7c00>VALTWF+Calibri AddT42Char 
2 2130 455 <00010022fe94037c03bc00240052b9001bfff040350b014d371b01291b01
18180b014d261801260e360e022709011a400b014d3a1a0119380b014d3b
19011f49190a13490a4b044f004b003f3f3f3f12393f31305d2b5d2b015d
5d5d2b5d5d2b2103060623222e023713262627012634363633321e021701
33133e023332161614070233780631321a201102067c091003febf081024
1e1e22140905010103f8061122201c241106feb51011050c140e01390412
0a035c15180e0503080f0dfd2e02d6130b05050e1812>VALTWF+Calibri AddT42Char 
VALTWF+Calibri /CharStrings get begin
/space 3 def
/six 1010 def
/seven 1011 def
/A 4 def
/T 100 def
/e 286 def
/l 367 def
/p 393 def
/y 455 def
end
VALTWF+Calibri /Encoding get
dup 32 /space put
dup 54 /six put
dup 55 /seven put
dup 65 /A put
dup 84 /T put
dup 101 /e put
dup 108 /l put
dup 112 /p put
dup 121 /y put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/VALTWF+Calibri*1 
[32{/.notdef}rp /space 15{/.notdef}rp /zero /one /two /three /four 
/five /six /seven 9{/.notdef}rp /A 6{/.notdef}rp /H 6{/.notdef}rp 
/O 4{/.notdef}rp /T 16{/.notdef}rp /e 6{/.notdef}rp /l 3{/.notdef}rp 
/p 8{/.notdef}rp /y 134{/.notdef}rp]
VALTWF+Calibri nf
VALTWF+Calibri*1 [9.4963 0 0 -9.4963 0 0 ]msf
3.33352 92.3487 mo
(Type 56)
[4.17837 4.3047 5.00164 4.74816 2.15564 4.81181 0 ]xsh
14.2258 103.744 mo
(All)
[5.5078 2.15285 0 ]xsh
140.973 79.6521 mo
(Type 56)
[4.17834 4.3047 5.00165 4.74815 2.15565 4.8118 0 ]xsh
250.579 87.4771 mo
(Type 57)
[4.17836 4.30469 5.00165 4.74817 2.15564 4.8118 0 ]xsh
.527572 lw
[] 0 dsh
156.198 84.2464 mo
177.887 95.4763 li
.808743 .585351 0 0 cmyk
@
178.146 93.828 mo
180.229 96.6891 li
176.691 96.6389 li
cp
ef
246.749 84.373 mo
231.894 93.3554 li
@
231.526 91.728 mo
229.636 94.7204 li
233.164 94.4365 li
cp
ef
.750271 .679713 .654902 .901945 cmyk
%ADOBeginSubsetFont: PBAAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal VALTWF+Calibri gcheck setglobal} if
2 2332 882 <0001004501b4022e023d000f000eb400070bed04002fed012fcd31300114
06232122263534363321321e02022e1211fe5e1212121201a2080d090501
f9271e1f26261e06111a>VALTWF+Calibri AddT42Char 
VALTWF+Calibri /CharStrings get begin
/hyphen 882 def
end
VALTWF+Calibri /Encoding get
dup 45 /hyphen put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/VALTWF+Calibri*1 
[32{/.notdef}rp /space 12{/.notdef}rp /hyphen 2{/.notdef}rp /zero /one /two 
/three /four /five /six /seven 9{/.notdef}rp /A 6{/.notdef}rp 
/H 6{/.notdef}rp /O 4{/.notdef}rp /T 16{/.notdef}rp /e 6{/.notdef}rp 
/l 3{/.notdef}rp /p 8{/.notdef}rp /y 134{/.notdef}rp]
VALTWF+Calibri nf
VALTWF+Calibri*1 [9.4963 0 0 -9.4963 0 0 ]msf
44.9508 203.521 mo
(OO)
[6.26758 0 ]xsh
57.486 203.521 mo
(-)sh
60.4013 203.521 mo
(OH)
[6.26758 0 ]xsh
216.378 206.218 mo
(OH)
[6.26758 0 ]xsh
228.533 206.218 mo
(-)sh
231.449 206.218 mo
(HH)
[5.88771 0 ]xsh
54.5023 57.4865 mo
54.3262 57.3047 li
54.5081 57.1284 li
54.6842 57.3103 li
54.5023 57.4865 li
54.15 57.1228 mo
53.9738 56.9409 li
54.1556 56.7647 li
54.3319 56.9466 li
54.15 57.1228 li
53.7975 56.759 mo
53.6213 56.5771 li
53.8032 56.4009 li
53.9794 56.5828 li
53.7975 56.759 li
53.4452 56.3953 mo
53.269 56.2134 li
53.4509 56.0372 li
53.6271 56.2191 li
53.4452 56.3953 li
53.0928 56.0315 mo
52.9165 55.8496 li
53.0984 55.6734 li
53.2746 55.8553 li
53.0928 56.0315 li
52.7403 55.6677 mo
52.5642 55.4858 li
52.7461 55.3097 li
52.9222 55.4916 li
52.7403 55.6677 li
52.388 55.3039 mo
52.2118 55.1221 li
52.3936 54.9459 li
52.5699 55.1277 li
52.388 55.3039 li
52.0355 54.9402 mo
51.8593 54.7583 li
52.0412 54.5821 li
52.2174 54.764 li
52.0355 54.9402 li
51.6832 54.5764 mo
51.507 54.3946 li
51.6889 54.2184 li
51.8651 54.4002 li
51.6832 54.5764 li
51.3308 54.2127 mo
51.1545 54.0308 li
51.3364 53.8546 li
51.5126 54.0365 li
51.3308 54.2127 li
50.9783 53.8489 mo
50.8022 53.667 li
50.9841 53.4909 li
51.1602 53.6727 li
50.9783 53.8489 li
50.626 53.4851 mo
50.4498 53.3032 li
50.6316 53.127 li
50.8079 53.309 li
50.626 53.4851 li
50.2735 53.1213 mo
50.0973 52.9395 li
50.2792 52.7633 li
50.4554 52.9451 li
50.2735 53.1213 li
49.9212 52.7576 mo
49.745 52.5757 li
49.9269 52.3995 li
50.1031 52.5814 li
49.9212 52.7576 li
49.5688 52.3939 mo
49.3925 52.212 li
49.5744 52.0358 li
49.7506 52.2176 li
49.5688 52.3939 li
49.2163 52.0301 mo
49.0402 51.8482 li
49.2221 51.672 li
49.3982 51.8539 li
49.2163 52.0301 li
48.864 51.6663 mo
48.6878 51.4844 li
48.8696 51.3083 li
49.0459 51.4902 li
48.864 51.6663 li
48.5115 51.3025 mo
48.3353 51.1206 li
48.5172 50.9444 li
48.6934 51.1264 li
48.5115 51.3025 li
48.1592 50.9388 mo
47.983 50.7569 li
48.1649 50.5807 li
48.3411 50.7625 li
48.1592 50.9388 li
47.8068 50.575 mo
47.6306 50.3931 li
47.8124 50.2169 li
47.9886 50.3988 li
47.8068 50.575 li
47.4543 50.2113 mo
47.2782 50.0294 li
47.4601 49.8532 li
47.6362 50.0351 li
47.4543 50.2113 li
47.102 49.8475 mo
46.9258 49.6657 li
47.1076 49.4894 li
47.2839 49.6713 li
47.102 49.8475 li
46.7496 49.4837 mo
46.5733 49.3018 li
46.7552 49.1257 li
46.9314 49.3076 li
46.7496 49.4837 li
46.3972 49.1199 mo
46.221 48.9381 li
46.4029 48.7618 li
46.5791 48.9438 li
46.3972 49.1199 li
46.0448 48.7562 mo
45.8686 48.5743 li
46.0504 48.3981 li
46.2266 48.58 li
46.0448 48.7562 li
45.6923 48.3924 mo
45.5162 48.2106 li
45.6981 48.0344 li
45.8742 48.2162 li
45.6923 48.3924 li
45.34 48.0287 mo
45.1638 47.8468 li
45.3456 47.6706 li
45.5219 47.8525 li
45.34 48.0287 li
44.9876 47.6649 mo
44.8113 47.4831 li
44.9932 47.3069 li
45.1694 47.4887 li
44.9876 47.6649 li
44.6352 47.3011 mo
44.459 47.1192 li
44.6409 46.9431 li
44.8171 47.125 li
44.6352 47.3011 li
44.2828 46.9373 mo
44.1066 46.7555 li
44.2884 46.5793 li
44.4646 46.7612 li
44.2828 46.9373 li
43.9303 46.5736 mo
43.7542 46.3917 li
43.9361 46.2155 li
44.1122 46.3974 li
43.9303 46.5736 li
43.578 46.2099 mo
43.4018 46.028 li
43.5836 45.8518 li
43.7599 46.0336 li
43.578 46.2099 li
43.2256 45.8461 mo
43.0493 45.6642 li
43.2312 45.488 li
43.4074 45.6699 li
43.2256 45.8461 li
42.8732 45.4824 mo
42.697 45.3004 li
42.8789 45.1243 li
43.0551 45.3061 li
42.8732 45.4824 li
42.5208 45.1185 mo
42.3446 44.9366 li
42.5264 44.7605 li
42.7026 44.9424 li
42.5208 45.1185 li
42.1683 44.7548 mo
41.9922 44.5729 li
42.1741 44.3967 li
42.3502 44.5786 li
42.1683 44.7548 li
41.816 44.391 mo
41.6398 44.2092 li
41.8216 44.0329 li
41.9979 44.2148 li
41.816 44.391 li
41.4636 44.0273 mo
41.2873 43.8454 li
41.4692 43.6692 li
41.6454 43.8511 li
41.4636 44.0273 li
41.1112 43.6635 mo
40.935 43.4816 li
41.1169 43.3054 li
41.2931 43.4873 li
41.1112 43.6635 li
40.7588 43.2998 mo
40.5826 43.1178 li
40.7644 42.9417 li
40.9406 43.1236 li
40.7588 43.2998 li
40.4063 42.9359 mo
40.2302 42.7541 li
40.4121 42.5779 li
40.5882 42.7598 li
40.4063 42.9359 li
40.054 42.5722 mo
39.8778 42.3903 li
40.0596 42.2141 li
40.2359 42.396 li
40.054 42.5722 li
39.7016 42.2084 mo
39.5253 42.0266 li
39.7072 41.8504 li
39.8834 42.0322 li
39.7016 42.2084 li
39.3492 41.8447 mo
39.173 41.6628 li
39.3549 41.4866 li
39.5311 41.6685 li
39.3492 41.8447 li
38.9968 41.4809 mo
38.8206 41.2991 li
39.0024 41.1228 li
39.1786 41.3047 li
38.9968 41.4809 li
38.6443 41.1172 mo
38.4682 40.9352 li
38.6501 40.7591 li
38.8262 40.941 li
38.6443 41.1172 li
38.292 40.7533 mo
38.1158 40.5715 li
38.2977 40.3953 li
38.4739 40.5772 li
38.292 40.7533 li
37.9396 40.3896 mo
37.7633 40.2077 li
37.9452 40.0315 li
38.1214 40.2134 li
37.9396 40.3896 li
37.5872 40.0258 mo
37.411 39.844 li
37.5929 39.6678 li
37.7691 39.8496 li
37.5872 40.0258 li
37.2348 39.6621 mo
37.0586 39.4802 li
37.2404 39.304 li
37.4167 39.4859 li
37.2348 39.6621 li
36.8823 39.2984 mo
36.7062 39.1165 li
36.8881 38.9403 li
37.0642 39.1221 li
36.8823 39.2984 li
36.53 38.9346 mo
36.3538 38.7526 li
36.5357 38.5765 li
36.7119 38.7584 li
36.53 38.9346 li
36.1776 38.5708 mo
36.0013 38.3889 li
36.1832 38.2127 li
36.3594 38.3946 li
36.1776 38.5708 li
35.8252 38.207 mo
35.649 38.0251 li
35.8309 37.8489 li
36.0071 38.0308 li
35.8252 38.207 li
35.4728 37.8433 mo
35.2966 37.6614 li
35.4784 37.4852 li
35.6547 37.667 li
35.4728 37.8433 li
35.1203 37.4795 mo
34.9442 37.2976 li
35.1261 37.1214 li
35.3022 37.3033 li
35.1203 37.4795 li
34.768 37.1158 mo
34.5918 36.9339 li
34.7737 36.7577 li
34.9499 36.9396 li
34.768 37.1158 li
34.4156 36.752 mo
34.2393 36.5701 li
34.4212 36.3939 li
34.5974 36.5758 li
34.4156 36.752 li
34.0632 36.3882 mo
33.887 36.2063 li
34.0689 36.0301 li
34.2451 36.212 li
34.0632 36.3882 li
33.7108 36.0244 mo
33.5346 35.8426 li
33.7164 35.6663 li
33.8927 35.8482 li
33.7108 36.0244 li
33.3583 35.6607 mo
33.1822 35.4788 li
33.3641 35.3026 li
33.5402 35.4845 li
33.3583 35.6607 li
33.006 35.2969 mo
32.8298 35.1151 li
33.0117 34.9388 li
33.1879 35.1207 li
33.006 35.2969 li
32.6536 34.9332 mo
32.4773 34.7513 li
32.6592 34.5751 li
32.8354 34.757 li
32.6536 34.9332 li
32.3012 34.5694 mo
32.125 34.3875 li
32.3069 34.2114 li
32.4831 34.3932 li
32.3012 34.5694 li
31.9488 34.2056 mo
31.7726 34.0237 li
31.9544 33.8475 li
32.1307 34.0294 li
31.9488 34.2056 li
31.5963 33.8418 mo
31.4202 33.66 li
31.6021 33.4838 li
31.7782 33.6656 li
31.5963 33.8418 li
31.244 33.4781 mo
31.0678 33.2962 li
31.2497 33.12 li
31.4259 33.3019 li
31.244 33.4781 li
30.8916 33.1144 mo
30.7153 32.9325 li
30.8972 32.7563 li
31.0734 32.9381 li
30.8916 33.1144 li
30.5392 32.7506 mo
30.363 32.5687 li
30.5449 32.3925 li
30.7211 32.5744 li
30.5392 32.7506 li
30.1868 32.3867 mo
30.0106 32.2049 li
30.1924 32.0288 li
30.3687 32.2106 li
30.1868 32.3867 li
29.8343 32.023 mo
29.6582 31.8411 li
29.8401 31.6649 li
30.0162 31.8468 li
29.8343 32.023 li
29.482 31.6593 mo
29.3058 31.4774 li
29.4877 31.3012 li
29.6639 31.483 li
29.482 31.6593 li
29.1296 31.2955 mo
28.9533 31.1136 li
29.1352 30.9374 li
29.3114 31.1193 li
29.1296 31.2955 li
28.7772 30.9318 mo
28.601 30.7499 li
28.7829 30.5737 li
28.9591 30.7556 li
28.7772 30.9318 li
28.4248 30.568 mo
28.2486 30.3861 li
28.4304 30.2099 li
28.6067 30.3918 li
28.4248 30.568 li
28.0724 30.2042 mo
27.8962 30.0223 li
28.0781 29.8462 li
28.2542 30.0281 li
28.0724 30.2042 li
27.72 29.8404 mo
27.5438 29.6586 li
27.7257 29.4823 li
27.9019 29.6642 li
27.72 29.8404 li
27.3676 29.4767 mo
27.1913 29.2948 li
27.3732 29.1186 li
27.5494 29.3005 li
27.3676 29.4767 li
27.0152 29.1129 mo
26.839 28.9311 li
27.0209 28.7548 li
27.1971 28.9367 li
27.0152 29.1129 li
26.6628 28.7492 mo
26.4866 28.5673 li
26.6684 28.3911 li
26.8447 28.573 li
26.6628 28.7492 li
26.3104 28.3854 mo
26.1342 28.2035 li
26.3161 28.0273 li
26.4922 28.2092 li
26.3104 28.3854 li
25.958 28.0216 mo
25.7818 27.8397 li
25.9637 27.6636 li
26.1399 27.8455 li
25.958 28.0216 li
25.6056 27.6578 mo
25.4294 27.476 li
25.6112 27.2998 li
25.7874 27.4816 li
25.6056 27.6578 li
25.2532 27.2941 mo
25.077 27.1122 li
25.2589 26.936 li
25.4351 27.1179 li
25.2532 27.2941 li
24.9008 26.9303 mo
24.7246 26.7485 li
24.9064 26.5722 li
25.0827 26.7541 li
24.9008 26.9303 li
24.5484 26.5666 mo
24.3722 26.3847 li
24.5541 26.2085 li
24.7302 26.3904 li
24.5484 26.5666 li
24.196 26.2028 mo
24.0198 26.0209 li
24.2017 25.8448 li
24.3779 26.0266 li
24.196 26.2028 li
23.8436 25.839 mo
23.6674 25.6571 li
23.8492 25.4809 li
24.0254 25.6629 li
23.8436 25.839 li
23.4911 25.4753 mo
23.315 25.2934 li
23.4969 25.1172 li
23.6731 25.299 li
23.4911 25.4753 li
23.1388 25.1115 mo
22.9626 24.9296 li
23.1444 24.7534 li
23.3207 24.9353 li
23.1388 25.1115 li
22.7864 24.7478 mo
22.6102 24.5659 li
22.7921 24.3897 li
22.9682 24.5715 li
22.7864 24.7478 li
22.434 24.384 mo
22.2578 24.2021 li
22.4397 24.0259 li
22.6159 24.2078 li
22.434 24.384 li
22.0816 24.0202 mo
21.9054 23.8383 li
22.0872 23.6622 li
22.2634 23.8441 li
22.0816 24.0202 li
21.7292 23.6564 mo
21.553 23.4745 li
21.7349 23.2983 li
21.9111 23.4803 li
21.7292 23.6564 li
21.3768 23.2927 mo
21.2006 23.1108 li
21.3824 22.9346 li
21.5587 23.1165 li
21.3768 23.2927 li
21.0244 22.9289 mo
20.8482 22.747 li
21.0301 22.5708 li
21.2062 22.7527 li
21.0244 22.9289 li
20.672 22.5652 mo
20.4958 22.3833 li
20.6777 22.2071 li
20.8539 22.389 li
20.672 22.5652 li
20.3196 22.2014 mo
20.1434 22.0196 li
20.3252 21.8433 li
20.5014 22.0252 li
20.3196 22.2014 li
19.9671 21.8376 mo
19.791 21.6557 li
19.9729 21.4796 li
20.1491 21.6615 li
19.9671 21.8376 li
19.6148 21.4738 mo
19.4386 21.292 li
19.6204 21.1157 li
19.7967 21.2977 li
19.6148 21.4738 li
19.2624 21.1101 mo
19.0861 20.9282 li
19.2681 20.752 li
19.4442 20.9339 li
19.2624 21.1101 li
18.91 20.7463 mo
18.7338 20.5645 li
18.9157 20.3882 li
19.0919 20.5701 li
18.91 20.7463 li
18.5576 20.3826 mo
18.3814 20.2007 li
18.5632 20.0245 li
18.7394 20.2064 li
18.5576 20.3826 li
18.2052 20.0188 mo
18.029 19.837 li
18.2109 19.6607 li
18.3871 19.8426 li
18.2052 20.0188 li
17.8528 19.655 mo
17.6766 19.4731 li
17.8584 19.297 li
18.0347 19.4789 li
17.8528 19.655 li
17.5004 19.2912 mo
17.3242 19.1094 li
17.5061 18.9332 li
17.6822 19.1151 li
17.5004 19.2912 li
17.148 18.9275 mo
16.9718 18.7456 li
17.1537 18.5694 li
17.3299 18.7513 li
17.148 18.9275 li
16.7956 18.5638 mo
16.6194 18.3819 li
16.8012 18.2057 li
16.9774 18.3875 li
16.7956 18.5638 li
16.4431 18.2 mo
16.267 18.0181 li
16.4489 17.8419 li
16.6251 18.0238 li
16.4431 18.2 li
16.0908 17.8362 mo
15.9146 17.6544 li
16.0964 17.4782 li
16.2727 17.66 li
16.0908 17.8362 li
15.7384 17.4724 mo
15.7025 17.4354 li
15.7641 17.3776 15.8238 17.318 15.8817 17.2565 cv
15.9202 17.2963 li
15.7384 17.4724 li
.36408 .213107 0 0 cmyk
f
54.7429 57.7348 mo
54.6785 57.6684 li
54.8604 57.4923 li
54.9248 57.5586 li
54.7429 57.7348 li
.904997 .707607 .0103151 0 cmyk
f
15.7025 17.4354 mo
15.5622 17.2905 li
15.7441 17.1144 li
15.8817 17.2565 li
15.8238 17.318 15.7641 17.3776 15.7025 17.4354 cv
f
66.0745 57.7348 mo
65.8925 57.5586 li
65.9574 57.4917 li
66.1393 57.6679 li
66.0745 57.7348 li
f
66.3155 57.4861 mo
66.1335 57.3098 li
66.3097 57.128 li
66.4916 57.3042 li
66.3155 57.4861 li
66.6678 57.1223 mo
66.486 56.9461 li
66.6622 56.7642 li
66.8441 56.9403 li
66.6678 57.1223 li
67.0203 56.7585 mo
66.8384 56.5823 li
67.0145 56.4004 li
67.1965 56.5766 li
67.0203 56.7585 li
67.3726 56.3947 mo
67.1908 56.2185 li
67.367 56.0366 li
67.5488 56.2129 li
67.3726 56.3947 li
67.7251 56.031 mo
67.5432 55.8548 li
67.7194 55.6729 li
67.9013 55.8491 li
67.7251 56.031 li
68.0775 55.6672 mo
67.8955 55.491 li
68.0718 55.3091 li
68.2536 55.4854 li
68.0775 55.6672 li
68.4299 55.3035 mo
68.248 55.1273 li
68.4242 54.9454 li
68.6061 55.1216 li
68.4299 55.3035 li
68.7823 54.9397 mo
68.6004 54.7635 li
68.7766 54.5817 li
68.9585 54.7578 li
68.7823 54.9397 li
69.1346 54.5759 mo
68.9528 54.3997 li
69.129 54.2178 li
69.3109 54.394 li
69.1346 54.5759 li
69.4871 54.2122 mo
69.3052 54.0359 li
69.4814 53.8541 li
69.6633 54.0303 li
69.4871 54.2122 li
69.8395 53.8484 mo
69.6576 53.6722 li
69.8338 53.4903 li
70.0157 53.6665 li
69.8395 53.8484 li
70.1919 53.4847 mo
70.01 53.3085 li
70.1862 53.1266 li
70.3681 53.3028 li
70.1919 53.4847 li
70.5443 53.1209 mo
70.3625 52.9447 li
70.5386 52.7629 li
70.7205 52.939 li
70.5443 53.1209 li
70.8967 52.7571 mo
70.7148 52.581 li
70.891 52.3991 li
71.0729 52.5752 li
70.8967 52.7571 li
71.2491 52.3934 mo
71.0673 52.2171 li
71.2435 52.0353 li
71.4253 52.2115 li
71.2491 52.3934 li
71.6015 52.0296 mo
71.4196 51.8534 li
71.5958 51.6715 li
71.7777 51.8477 li
71.6015 52.0296 li
71.9539 51.6659 mo
71.772 51.4897 li
71.9483 51.3078 li
72.1301 51.484 li
71.9539 51.6659 li
72.3064 51.3021 mo
72.1245 51.1259 li
72.3006 50.944 li
72.4826 51.1203 li
72.3064 51.3021 li
72.6587 50.9384 mo
72.4768 50.7622 li
72.6531 50.5803 li
72.8349 50.7564 li
72.6587 50.9384 li
73.0111 50.5745 mo
72.8293 50.3984 li
73.0055 50.2165 li
73.1874 50.3927 li
73.0111 50.5745 li
73.3635 50.2108 mo
73.1816 50.0346 li
73.3578 49.8527 li
73.5397 50.0289 li
73.3635 50.2108 li
73.7159 49.8471 mo
73.5341 49.6708 li
73.7103 49.489 li
73.8922 49.6652 li
73.7159 49.8471 li
74.0684 49.4833 mo
73.8865 49.3071 li
74.0626 49.1252 li
74.2445 49.3014 li
74.0684 49.4833 li
74.4207 49.1196 mo
74.2389 48.9434 li
74.4151 48.7615 li
74.597 48.9377 li
74.4207 49.1196 li
74.7732 48.7558 mo
74.5913 48.5796 li
74.7675 48.3977 li
74.9494 48.5739 li
74.7732 48.7558 li
75.1255 48.392 mo
74.9436 48.2159 li
75.1199 48.0339 li
75.3017 48.2101 li
75.1255 48.392 li
75.478 48.0282 mo
75.2961 47.852 li
75.4723 47.6702 li
75.6542 47.8464 li
75.478 48.0282 li
75.8304 47.6645 mo
75.6485 47.4883 li
75.8247 47.3064 li
76.0065 47.4826 li
75.8304 47.6645 li
76.1827 47.3008 mo
76.0009 47.1246 li
76.1771 46.9427 li
76.359 47.1189 li
76.1827 47.3008 li
76.5352 46.937 mo
76.3533 46.7608 li
76.5295 46.5789 li
76.7114 46.7551 li
76.5352 46.937 li
76.8876 46.5732 mo
76.7057 46.3971 li
76.8819 46.2152 li
77.0638 46.3913 li
76.8876 46.5732 li
77.24 46.2094 mo
77.0581 46.0332 li
77.2343 45.8514 li
77.4162 46.0276 li
77.24 46.2094 li
77.5924 45.8457 mo
77.4106 45.6695 li
77.5867 45.4876 li
77.7686 45.6638 li
77.5924 45.8457 li
77.9448 45.482 mo
77.7629 45.3057 li
77.9391 45.1239 li
78.121 45.3001 li
77.9448 45.482 li
78.2972 45.1182 mo
78.1154 44.942 li
78.2916 44.7601 li
78.4734 44.9363 li
78.2972 45.1182 li
78.6496 44.7545 mo
78.4677 44.5783 li
78.6439 44.3964 li
78.8258 44.5725 li
78.6496 44.7545 li
79.002 44.3906 mo
78.8201 44.2145 li
78.9964 44.0326 li
79.1782 44.2088 li
79.002 44.3906 li
79.3545 44.0269 mo
79.1726 43.8507 li
79.3487 43.6688 li
79.5306 43.845 li
79.3545 44.0269 li
79.7068 43.6631 mo
79.5249 43.4869 li
79.7012 43.3051 li
79.883 43.4813 li
79.7068 43.6631 li
80.0592 43.2994 mo
79.8774 43.1232 li
80.0536 42.9413 li
80.2355 43.1175 li
80.0592 43.2994 li
80.4116 42.9357 mo
80.2297 42.7594 li
80.4059 42.5776 li
80.5878 42.7538 li
80.4116 42.9357 li
80.764 42.5719 mo
80.5822 42.3957 li
80.7584 42.2138 li
80.9403 42.3899 li
80.764 42.5719 li
81.1165 42.2081 mo
80.9346 42.032 li
81.1107 41.85 li
81.2926 42.0262 li
81.1165 42.2081 li
81.4688 41.8443 mo
81.287 41.6681 li
81.4632 41.4863 li
81.645 41.6625 li
81.4688 41.8443 li
81.8213 41.4806 mo
81.6394 41.3044 li
81.8156 41.1225 li
81.9975 41.2987 li
81.8213 41.4806 li
82.1736 41.1169 mo
81.9917 40.9406 li
82.168 40.7588 li
82.3498 40.935 li
82.1736 41.1169 li
82.5261 40.7531 mo
82.3442 40.5769 li
82.5204 40.395 li
82.7023 40.5712 li
82.5261 40.7531 li
82.8785 40.3893 mo
82.6966 40.2132 li
82.8728 40.0313 li
83.0546 40.2074 li
82.8785 40.3893 li
83.2308 40.0255 mo
83.049 39.8493 li
83.2252 39.6674 li
83.4071 39.8437 li
83.2308 40.0255 li
83.5833 39.6618 mo
83.4014 39.4856 li
83.5776 39.3037 li
83.7595 39.4799 li
83.5833 39.6618 li
83.9356 39.298 mo
83.7538 39.1218 li
83.93 38.94 li
84.1119 39.1162 li
83.9356 39.298 li
84.2881 38.9343 mo
84.1062 38.7581 li
84.2824 38.5762 li
84.4643 38.7524 li
84.2881 38.9343 li
84.6405 38.5706 mo
84.4586 38.3943 li
84.6348 38.2125 li
84.8167 38.3886 li
84.6405 38.5706 li
84.9929 38.2067 mo
84.811 38.0306 li
84.9872 37.8487 li
85.1691 38.0248 li
84.9929 38.2067 li
85.3453 37.843 mo
85.1634 37.6667 li
85.3396 37.4849 li
85.5215 37.6611 li
85.3453 37.843 li
85.6977 37.4792 mo
85.5158 37.303 li
85.692 37.1212 li
85.8739 37.2974 li
85.6977 37.4792 li
86.0501 37.1155 mo
85.8682 36.9393 li
86.0445 36.7574 li
86.2263 36.9336 li
86.0501 37.1155 li
86.4026 36.7518 mo
86.2206 36.5755 li
86.3968 36.3937 li
86.5787 36.5699 li
86.4026 36.7518 li
86.7549 36.388 mo
86.573 36.2118 li
86.7493 36.0299 li
86.9311 36.206 li
86.7549 36.388 li
87.1073 36.0242 mo
86.9255 35.8481 li
87.1016 35.6661 li
87.2836 35.8423 li
87.1073 36.0242 li
87.4597 35.6604 mo
87.2778 35.4842 li
87.454 35.3023 li
87.6359 35.4785 li
87.4597 35.6604 li
87.8121 35.2967 mo
87.6303 35.1205 li
87.8065 34.9386 li
87.9884 35.1148 li
87.8121 35.2967 li
88.1646 34.9329 mo
87.9827 34.7567 li
88.1588 34.5748 li
88.3407 34.7511 li
88.1646 34.9329 li
88.5169 34.5692 mo
88.3351 34.393 li
88.5113 34.2111 li
88.6931 34.3873 li
88.5169 34.5692 li
88.8694 34.2054 mo
88.6875 34.0292 li
88.8636 33.8474 li
89.0456 34.0235 li
88.8694 34.2054 li
89.2217 33.8416 mo
89.0398 33.6655 li
89.2161 33.4835 li
89.3979 33.6597 li
89.2217 33.8416 li
89.5742 33.4779 mo
89.3923 33.3016 li
89.5685 33.1198 li
89.7504 33.296 li
89.5742 33.4779 li
89.9266 33.1141 mo
89.7446 32.9379 li
89.9209 32.756 li
90.1027 32.9322 li
89.9266 33.1141 li
90.279 32.7504 mo
90.0971 32.5742 li
90.2733 32.3923 li
90.4552 32.5685 li
90.279 32.7504 li
90.6314 32.3866 mo
90.4495 32.2104 li
90.6256 32.0286 li
90.8076 32.2048 li
90.6314 32.3866 li
90.9837 32.0228 mo
90.8019 31.8467 li
90.9781 31.6648 li
91.16 31.8409 li
90.9837 32.0228 li
91.3362 31.6591 mo
91.1543 31.4828 li
91.3305 31.301 li
91.5124 31.4772 li
91.3362 31.6591 li
91.6886 31.2953 mo
91.5067 31.1191 li
91.6829 30.9372 li
91.8648 31.1134 li
91.6886 31.2953 li
92.041 30.9316 mo
91.8591 30.7554 li
92.0353 30.5735 li
92.2172 30.7497 li
92.041 30.9316 li
92.3934 30.5678 mo
92.2116 30.3916 li
92.3877 30.2097 li
92.5696 30.386 li
92.3934 30.5678 li
92.7458 30.2041 mo
92.5639 30.0279 li
92.7401 29.846 li
92.922 30.0222 li
92.7458 30.2041 li
93.0982 29.8402 mo
92.9163 29.6641 li
93.0926 29.4822 li
93.2744 29.6584 li
93.0982 29.8402 li
93.4506 29.4765 mo
93.2687 29.3003 li
93.4449 29.1184 li
93.6268 29.2946 li
93.4506 29.4765 li
93.803 29.1128 mo
93.6211 28.9365 li
93.7974 28.7547 li
93.9792 28.9309 li
93.803 29.1128 li
94.1554 28.749 mo
93.9736 28.5728 li
94.1497 28.3909 li
94.3316 28.5671 li
94.1554 28.749 li
94.5078 28.3853 mo
94.3259 28.2091 li
94.5021 28.0272 li
94.684 28.2034 li
94.5078 28.3853 li
94.8602 28.0215 mo
94.6784 27.8453 li
94.8546 27.6634 li
95.0365 27.8396 li
94.8602 28.0215 li
95.2126 27.6577 mo
95.0307 27.4816 li
95.2069 27.2996 li
95.3888 27.4758 li
95.2126 27.6577 li
95.565 27.2939 mo
95.3832 27.1177 li
95.5594 26.9359 li
95.7412 27.1121 li
95.565 27.2939 li
95.9175 26.9302 mo
95.7356 26.754 li
95.9117 26.5721 li
96.0937 26.7483 li
95.9175 26.9302 li
96.2698 26.5665 mo
96.0879 26.3903 li
96.2642 26.2084 li
96.446 26.3846 li
96.2698 26.5665 li
96.6223 26.2027 mo
96.4404 26.0265 li
96.6166 25.8446 li
96.7985 26.0209 li
96.6223 26.2027 li
96.9746 25.8389 mo
96.7927 25.6628 li
96.969 25.4809 li
97.1508 25.657 li
96.9746 25.8389 li
97.3271 25.4751 mo
97.1452 25.299 li
97.3214 25.1171 li
97.5033 25.2933 li
97.3271 25.4751 li
97.6795 25.1114 mo
97.4976 24.9352 li
97.6737 24.7533 li
97.8556 24.9295 li
97.6795 25.1114 li
98.0318 24.7477 mo
97.85 24.5714 li
98.0262 24.3896 li
98.2081 24.5658 li
98.0318 24.7477 li
98.3843 24.3839 mo
98.2024 24.2077 li
98.3786 24.0258 li
98.5605 24.202 li
98.3843 24.3839 li
98.7366 24.0202 mo
98.5548 23.844 li
98.731 23.6621 li
98.9129 23.8383 li
98.7366 24.0202 li
99.0891 23.6563 mo
98.9072 23.4802 li
99.0834 23.2983 li
99.2653 23.4745 li
99.0891 23.6563 li
99.4415 23.2926 mo
99.2597 23.1164 li
99.4358 22.9345 li
99.6176 23.1107 li
99.4415 23.2926 li
99.7939 22.9288 mo
99.612 22.7526 li
99.7882 22.5708 li
99.9701 22.747 li
99.7939 22.9288 li
100.146 22.5651 mo
99.9644 22.3889 li
100.141 22.207 li
100.322 22.3832 li
100.146 22.5651 li
100.499 22.2014 mo
100.317 22.0251 li
100.493 21.8433 li
100.675 22.0195 li
100.499 22.2014 li
100.851 21.8376 mo
100.669 21.6614 li
100.845 21.4795 li
101.027 21.6556 li
100.851 21.8376 li
101.203 21.4738 mo
101.022 21.2977 li
101.198 21.1157 li
101.38 21.2919 li
101.203 21.4738 li
101.556 21.11 mo
101.374 20.9338 li
101.55 20.7519 li
101.732 20.9281 li
101.556 21.11 li
101.908 20.7463 mo
101.726 20.5701 li
101.903 20.3882 li
102.085 20.5644 li
101.908 20.7463 li
102.261 20.3825 mo
102.079 20.2063 li
102.255 20.0245 li
102.437 20.2007 li
102.261 20.3825 li
102.613 20.0188 mo
102.431 19.8426 li
102.607 19.6607 li
102.789 19.8369 li
102.613 20.0188 li
102.966 19.655 mo
102.784 19.4789 li
102.96 19.297 li
103.142 19.4731 li
102.966 19.655 li
103.318 19.2912 mo
103.136 19.1151 li
103.312 18.9331 li
103.494 19.1094 li
103.318 19.2912 li
103.67 18.9275 mo
103.488 18.7513 li
103.665 18.5694 li
103.847 18.7456 li
103.67 18.9275 li
104.023 18.5637 mo
103.841 18.3875 li
104.017 18.2056 li
104.199 18.3819 li
104.023 18.5637 li
104.375 18.2 mo
104.193 18.0238 li
104.369 17.8419 li
104.551 18.0181 li
104.375 18.2 li
104.728 17.8362 mo
104.546 17.66 li
104.722 17.4782 li
104.904 17.6544 li
104.728 17.8362 li
105.08 17.4724 mo
104.898 17.2963 li
104.908 17.2862 li
104.966 17.347 105.027 17.4062 105.089 17.4633 cv
105.08 17.4724 li
.36408 .213107 0 0 cmyk
f
105.089 17.4633 mo
105.027 17.4062 104.966 17.347 104.908 17.2862 cv
105.074 17.1144 li
105.256 17.2905 li
105.089 17.4633 li
.904997 .707607 .0103151 0 cmyk
f
15.9137 169.757 mo
15.8565 169.695 15.7974 169.634 15.7365 169.576 cv
15.7396 169.573 li
15.9207 169.75 li
15.9137 169.757 li
.36408 .213107 0 0 cmyk
f
15.7437 169.931 mo
15.5626 169.754 li
15.7365 169.576 li
15.7974 169.634 15.8565 169.695 15.9137 169.757 cv
15.7437 169.931 li
.904997 .707607 .0103151 0 cmyk
f
16.0977 169.569 mo
15.9166 169.392 li
16.0936 169.21 li
16.2747 169.387 li
16.0977 169.569 li
16.4517 169.206 mo
16.2707 169.029 li
16.4476 168.848 li
16.6287 169.025 li
16.4517 169.206 li
16.8058 168.844 mo
16.6246 168.667 li
16.8016 168.486 li
16.9828 168.663 li
16.8058 168.844 li
17.1598 168.482 mo
16.9786 168.305 li
17.1556 168.124 li
17.3368 168.301 li
17.1598 168.482 li
17.5138 168.12 mo
17.3326 167.943 li
17.5097 167.762 li
17.6908 167.939 li
17.5138 168.12 li
17.8678 167.758 mo
17.6867 167.581 li
17.8637 167.4 li
18.0449 167.577 li
17.8678 167.758 li
18.2218 167.395 mo
18.0407 167.218 li
18.2177 167.037 li
18.3988 167.214 li
18.2218 167.395 li
18.5758 167.033 mo
18.3947 166.856 li
18.5717 166.675 li
18.7528 166.852 li
18.5758 167.033 li
18.9298 166.671 mo
18.7487 166.494 li
18.9258 166.313 li
19.1068 166.49 li
18.9298 166.671 li
19.2838 166.309 mo
19.1028 166.132 li
19.2798 165.951 li
19.4609 166.128 li
19.2838 166.309 li
19.6379 165.947 mo
19.4568 165.77 li
19.6338 165.589 li
19.8149 165.766 li
19.6379 165.947 li
19.9919 165.585 mo
19.8108 165.408 li
19.9878 165.226 li
20.1689 165.403 li
19.9919 165.585 li
20.3459 165.222 mo
20.1648 165.045 li
20.3419 164.864 li
20.5229 165.041 li
20.3459 165.222 li
20.6999 164.86 mo
20.5189 164.683 li
20.6959 164.502 li
20.877 164.679 li
20.6999 164.86 li
21.054 164.498 mo
20.8729 164.321 li
21.0499 164.14 li
21.231 164.317 li
21.054 164.498 li
21.408 164.136 mo
21.2269 163.959 li
21.4039 163.778 li
21.585 163.955 li
21.408 164.136 li
21.762 163.774 mo
21.5809 163.597 li
21.758 163.415 li
21.939 163.593 li
21.762 163.774 li
22.116 163.411 mo
21.935 163.234 li
22.112 163.053 li
22.2931 163.23 li
22.116 163.411 li
22.4701 163.049 mo
22.289 162.872 li
22.466 162.691 li
22.6471 162.868 li
22.4701 163.049 li
22.8241 162.687 mo
22.643 162.51 li
22.82 162.329 li
23.0011 162.506 li
22.8241 162.687 li
23.1781 162.325 mo
22.997 162.148 li
23.1741 161.967 li
23.3551 162.144 li
23.1781 162.325 li
23.5321 161.963 mo
23.3511 161.786 li
23.5281 161.605 li
23.7092 161.782 li
23.5321 161.963 li
23.8862 161.6 mo
23.7051 161.423 li
23.8821 161.242 li
24.0632 161.419 li
23.8862 161.6 li
24.2402 161.238 mo
24.0591 161.061 li
24.2361 160.88 li
24.4172 161.057 li
24.2402 161.238 li
24.5942 160.876 mo
24.4131 160.699 li
24.5902 160.518 li
24.7712 160.695 li
24.5942 160.876 li
24.9482 160.514 mo
24.7672 160.337 li
24.9442 160.156 li
25.1253 160.333 li
24.9482 160.514 li
25.3023 160.152 mo
25.1212 159.975 li
25.2982 159.794 li
25.4793 159.971 li
25.3023 160.152 li
25.6563 159.79 mo
25.4751 159.612 li
25.6521 159.431 li
25.8333 159.608 li
25.6563 159.79 li
26.0103 159.427 mo
25.8292 159.25 li
26.0062 159.069 li
26.1873 159.246 li
26.0103 159.427 li
26.3644 159.065 mo
26.1832 158.888 li
26.3602 158.707 li
26.5414 158.884 li
26.3644 159.065 li
26.7184 158.703 mo
26.5372 158.526 li
26.7142 158.345 li
26.8954 158.522 li
26.7184 158.703 li
27.0724 158.341 mo
26.8912 158.164 li
27.0682 157.983 li
27.2494 158.16 li
27.0724 158.341 li
27.4263 157.979 mo
27.2453 157.802 li
27.4223 157.62 li
27.6033 157.797 li
27.4263 157.979 li
27.7804 157.616 mo
27.5993 157.439 li
27.7763 157.258 li
27.9574 157.435 li
27.7804 157.616 li
28.1344 157.254 mo
27.9533 157.077 li
28.1303 156.896 li
28.3114 157.073 li
28.1344 157.254 li
28.4884 156.892 mo
28.3073 156.715 li
28.4843 156.534 li
28.6654 156.711 li
28.4884 156.892 li
28.8424 156.53 mo
28.6614 156.353 li
28.8384 156.172 li
29.0194 156.349 li
28.8424 156.53 li
29.1965 156.168 mo
29.0154 155.991 li
29.1924 155.809 li
29.3735 155.987 li
29.1965 156.168 li
29.5505 155.805 mo
29.3694 155.628 li
29.5464 155.447 li
29.7275 155.624 li
29.5505 155.805 li
29.9045 155.443 mo
29.7234 155.266 li
29.9004 155.085 li
30.0815 155.262 li
29.9045 155.443 li
30.2585 155.081 mo
30.0775 154.904 li
30.2545 154.723 li
30.4355 154.9 li
30.2585 155.081 li
30.6126 154.719 mo
30.4315 154.542 li
30.6085 154.361 li
30.7896 154.538 li
30.6126 154.719 li
30.9666 154.357 mo
30.7855 154.18 li
30.9625 153.999 li
31.1436 154.176 li
30.9666 154.357 li
31.3206 153.994 mo
31.1395 153.817 li
31.3165 153.636 li
31.4976 153.813 li
31.3206 153.994 li
31.6746 153.632 mo
31.4936 153.455 li
31.6706 153.274 li
31.8516 153.451 li
31.6746 153.632 li
32.0287 153.27 mo
31.8476 153.093 li
32.0246 152.912 li
32.2057 153.089 li
32.0287 153.27 li
32.3827 152.908 mo
32.2016 152.731 li
32.3786 152.55 li
32.5597 152.727 li
32.3827 152.908 li
32.7367 152.546 mo
32.5556 152.369 li
32.7326 152.188 li
32.9137 152.365 li
32.7367 152.546 li
33.0907 152.184 mo
32.9097 152.007 li
33.0867 151.825 li
33.2677 152.002 li
33.0907 152.184 li
33.4448 151.821 mo
33.2637 151.644 li
33.4407 151.463 li
33.6218 151.64 li
33.4448 151.821 li
33.7988 151.459 mo
33.6177 151.282 li
33.7947 151.101 li
33.9758 151.278 li
33.7988 151.459 li
34.1528 151.097 mo
33.9717 150.92 li
34.1487 150.739 li
34.3298 150.916 li
34.1528 151.097 li
34.5068 150.735 mo
34.3258 150.558 li
34.5027 150.377 li
34.6838 150.554 li
34.5068 150.735 li
34.8609 150.373 mo
34.6797 150.196 li
34.8567 150.015 li
35.0379 150.192 li
34.8609 150.373 li
35.2149 150.01 mo
35.0337 149.833 li
35.2107 149.652 li
35.3919 149.829 li
35.2149 150.01 li
35.5689 149.648 mo
35.3877 149.471 li
35.5648 149.29 li
35.7459 149.467 li
35.5689 149.648 li
35.9229 149.286 mo
35.7418 149.109 li
35.9188 148.928 li
36.0999 149.105 li
35.9229 149.286 li
36.2769 148.924 mo
36.0958 148.747 li
36.2728 148.566 li
36.4539 148.743 li
36.2769 148.924 li
36.6309 148.562 mo
36.4498 148.385 li
36.6268 148.204 li
36.8079 148.381 li
36.6309 148.562 li
36.9849 148.2 mo
36.8038 148.023 li
36.9809 147.841 li
37.1619 148.018 li
36.9849 148.2 li
37.3389 147.837 mo
37.1579 147.66 li
37.3349 147.479 li
37.516 147.656 li
37.3389 147.837 li
37.693 147.475 mo
37.5119 147.298 li
37.6889 147.117 li
37.87 147.294 li
37.693 147.475 li
38.047 147.113 mo
37.8659 146.936 li
38.0429 146.755 li
38.224 146.932 li
38.047 147.113 li
38.401 146.751 mo
38.2199 146.574 li
38.397 146.393 li
38.578 146.57 li
38.401 146.751 li
38.755 146.389 mo
38.574 146.212 li
38.751 146.031 li
38.9321 146.208 li
38.755 146.389 li
39.1091 146.026 mo
38.928 145.849 li
39.105 145.668 li
39.2861 145.845 li
39.1091 146.026 li
39.4631 145.664 mo
39.282 145.487 li
39.459 145.306 li
39.6401 145.483 li
39.4631 145.664 li
39.8171 145.302 mo
39.636 145.125 li
39.8131 144.944 li
39.9941 145.121 li
39.8171 145.302 li
40.1711 144.94 mo
39.9901 144.763 li
40.1671 144.582 li
40.3482 144.759 li
40.1711 144.94 li
40.5252 144.578 mo
40.344 144.401 li
40.521 144.22 li
40.7022 144.397 li
40.5252 144.578 li
40.8792 144.215 mo
40.698 144.038 li
40.875 143.857 li
41.0562 144.034 li
40.8792 144.215 li
41.2332 143.853 mo
41.0521 143.676 li
41.2291 143.495 li
41.4102 143.672 li
41.2332 143.853 li
41.5872 143.491 mo
41.4061 143.314 li
41.5831 143.133 li
41.7642 143.31 li
41.5872 143.491 li
41.9412 143.129 mo
41.7601 142.952 li
41.9371 142.771 li
42.1182 142.948 li
41.9412 143.129 li
42.2952 142.767 mo
42.1141 142.59 li
42.2911 142.409 li
42.4722 142.586 li
42.2952 142.767 li
42.6492 142.405 mo
42.4682 142.228 li
42.6452 142.046 li
42.8262 142.223 li
42.6492 142.405 li
43.0033 142.042 mo
42.8222 141.865 li
42.9992 141.684 li
43.1803 141.861 li
43.0033 142.042 li
43.3573 141.68 mo
43.1762 141.503 li
43.3532 141.322 li
43.5343 141.499 li
43.3573 141.68 li
43.7113 141.318 mo
43.5302 141.141 li
43.7072 140.96 li
43.8883 141.137 li
43.7113 141.318 li
44.0653 140.956 mo
43.8843 140.779 li
44.0613 140.598 li
44.2423 140.775 li
44.0653 140.956 li
44.4194 140.594 mo
44.2383 140.417 li
44.4153 140.236 li
44.5964 140.413 li
44.4194 140.594 li
44.7734 140.231 mo
44.5923 140.054 li
44.7693 139.873 li
44.9504 140.05 li
44.7734 140.231 li
45.1274 139.869 mo
44.9463 139.692 li
45.1233 139.511 li
45.3044 139.688 li
45.1274 139.869 li
45.4814 139.507 mo
45.3004 139.33 li
45.4774 139.149 li
45.6584 139.326 li
45.4814 139.507 li
45.8355 139.145 mo
45.6543 138.968 li
45.8313 138.787 li
46.0125 138.964 li
45.8355 139.145 li
46.1895 138.783 mo
46.0083 138.606 li
46.1853 138.425 li
46.3665 138.602 li
46.1895 138.783 li
46.5435 138.421 mo
46.3623 138.244 li
46.5394 138.062 li
46.7205 138.239 li
46.5435 138.421 li
46.8975 138.058 mo
46.7164 137.881 li
46.8934 137.7 li
47.0745 137.877 li
46.8975 138.058 li
47.2515 137.696 mo
47.0704 137.519 li
47.2474 137.338 li
47.4285 137.515 li
47.2515 137.696 li
47.6055 137.334 mo
47.4244 137.157 li
47.6014 136.976 li
47.7825 137.153 li
47.6055 137.334 li
47.9595 136.972 mo
47.7784 136.795 li
47.9555 136.614 li
48.1365 136.791 li
47.9595 136.972 li
48.3135 136.61 mo
48.1325 136.433 li
48.3095 136.251 li
48.4906 136.429 li
48.3135 136.61 li
48.6676 136.247 mo
48.4865 136.07 li
48.6635 135.889 li
48.8446 136.066 li
48.6676 136.247 li
49.0216 135.885 mo
48.8405 135.708 li
49.0175 135.527 li
49.1986 135.704 li
49.0216 135.885 li
49.3756 135.523 mo
49.1945 135.346 li
49.3716 135.165 li
49.5526 135.342 li
49.3756 135.523 li
49.7296 135.161 mo
49.5486 134.984 li
49.7256 134.803 li
49.9067 134.98 li
49.7296 135.161 li
50.0837 134.799 mo
49.9026 134.622 li
50.0796 134.441 li
50.2607 134.618 li
50.0837 134.799 li
50.4377 134.436 mo
50.2566 134.259 li
50.4336 134.078 li
50.6147 134.255 li
50.4377 134.436 li
50.7917 134.074 mo
50.6106 133.897 li
50.7877 133.716 li
50.9687 133.893 li
50.7917 134.074 li
51.1457 133.712 mo
50.9647 133.535 li
51.1416 133.354 li
51.3228 133.531 li
51.1457 133.712 li
51.4998 133.35 mo
51.3186 133.173 li
51.4956 132.992 li
51.6768 133.169 li
51.4998 133.35 li
51.8538 132.988 mo
51.6726 132.811 li
51.8496 132.63 li
52.0308 132.807 li
51.8538 132.988 li
52.2078 132.626 mo
52.0267 132.449 li
52.2037 132.267 li
52.3848 132.444 li
52.2078 132.626 li
52.5618 132.263 mo
52.3807 132.086 li
52.5577 131.905 li
52.7388 132.082 li
52.5618 132.263 li
52.9158 131.901 mo
52.7347 131.724 li
52.9117 131.543 li
53.0928 131.72 li
52.9158 131.901 li
53.2698 131.539 mo
53.0887 131.362 li
53.2657 131.181 li
53.4468 131.358 li
53.2698 131.539 li
53.6238 131.177 mo
53.4428 131 li
53.6198 130.819 li
53.8008 130.996 li
53.6238 131.177 li
53.9779 130.815 mo
53.7968 130.638 li
53.9738 130.457 li
54.1549 130.634 li
53.9779 130.815 li
54.3319 130.452 mo
54.1508 130.275 li
54.3278 130.094 li
54.5089 130.271 li
54.3319 130.452 li
54.6859 130.09 mo
54.5048 129.913 li
54.6818 129.732 li
54.8629 129.909 li
54.6859 130.09 li
55.0399 129.728 mo
54.8589 129.551 li
54.9297 129.479 li
54.9567 129.505 54.984 129.532 55.0114 129.559 cv
55.0447 129.591 55.0783 129.623 55.1123 129.654 cv
55.0399 129.728 li
.36408 .213107 0 0 cmyk
f
55.1123 129.654 mo
55.0783 129.623 55.0447 129.591 55.0114 129.559 cv
54.984 129.532 54.9567 129.505 54.9297 129.479 cv
55.0359 129.37 li
55.2169 129.547 li
55.1123 129.654 li
.904997 .707607 .0103151 0 cmyk
f
104.885 169.717 mo
104.843 169.673 li
105.026 169.498 li
105.065 169.538 li
105.003 169.596 104.943 169.655 104.885 169.717 cv
.36408 .213107 0 0 cmyk
f
105.018 169.856 mo
104.885 169.717 li
104.943 169.655 105.003 169.596 105.065 169.538 cv
105.201 169.68 li
105.018 169.856 li
.904997 .707607 .0103151 0 cmyk
f
104.668 169.49 mo
104.492 169.307 li
104.675 169.132 li
104.85 169.315 li
104.668 169.49 li
104.317 169.125 mo
104.142 168.942 li
104.324 168.767 li
104.5 168.949 li
104.317 169.125 li
103.966 168.759 mo
103.791 168.576 li
103.974 168.401 li
104.149 168.584 li
103.966 168.759 li
103.616 168.394 mo
103.44 168.211 li
103.623 168.036 li
103.798 168.218 li
103.616 168.394 li
103.265 168.028 mo
103.09 167.846 li
103.272 167.67 li
103.448 167.853 li
103.265 168.028 li
102.914 167.663 mo
102.739 167.48 li
102.922 167.305 li
103.097 167.488 li
102.914 167.663 li
102.564 167.297 mo
102.389 167.115 li
102.571 166.939 li
102.747 167.122 li
102.564 167.297 li
102.213 166.932 mo
102.038 166.749 li
102.221 166.574 li
102.396 166.757 li
102.213 166.932 li
101.862 166.567 mo
101.687 166.384 li
101.87 166.208 li
102.045 166.391 li
101.862 166.567 li
101.512 166.201 mo
101.337 166.018 li
101.519 165.843 li
101.695 166.026 li
101.512 166.201 li
101.161 165.836 mo
100.986 165.653 li
101.169 165.478 li
101.344 165.66 li
101.161 165.836 li
100.811 165.47 mo
100.635 165.287 li
100.818 165.112 li
100.993 165.295 li
100.811 165.47 li
100.46 165.105 mo
100.285 164.922 li
100.467 164.747 li
100.643 164.929 li
100.46 165.105 li
100.109 164.739 mo
99.934 164.557 li
100.117 164.381 li
100.292 164.564 li
100.109 164.739 li
99.7587 164.374 mo
99.5833 164.191 li
99.766 164.016 li
99.9414 164.199 li
99.7587 164.374 li
99.408 164.008 mo
99.2327 163.826 li
99.4154 163.65 li
99.5908 163.833 li
99.408 164.008 li
99.0573 163.643 mo
98.8821 163.46 li
99.0648 163.285 li
99.2401 163.468 li
99.0573 163.643 li
98.7067 163.277 mo
98.5314 163.095 li
98.7141 162.919 li
98.8895 163.102 li
98.7067 163.277 li
98.3561 162.912 mo
98.1808 162.729 li
98.3635 162.554 li
98.5389 162.737 li
98.3561 162.912 li
98.0054 162.547 mo
97.8302 162.364 li
98.0128 162.189 li
98.1882 162.371 li
98.0054 162.547 li
97.6548 162.181 mo
97.4795 161.998 li
97.6622 161.823 li
97.8375 162.006 li
97.6548 162.181 li
97.3042 161.816 mo
97.1289 161.633 li
97.3116 161.458 li
97.4868 161.64 li
97.3042 161.816 li
96.9535 161.45 mo
96.7782 161.268 li
96.9609 161.092 li
97.1362 161.275 li
96.9535 161.45 li
96.6029 161.085 mo
96.4275 160.902 li
96.6103 160.727 li
96.7856 160.909 li
96.6029 161.085 li
96.2522 160.719 mo
96.0769 160.537 li
96.2597 160.361 li
96.4349 160.544 li
96.2522 160.719 li
95.9016 160.354 mo
95.7262 160.171 li
95.909 159.996 li
96.0843 160.179 li
95.9016 160.354 li
95.551 159.988 mo
95.3756 159.806 li
95.5584 159.63 li
95.7337 159.813 li
95.551 159.988 li
95.2003 159.623 mo
95.0249 159.44 li
95.2077 159.265 li
95.383 159.448 li
95.2003 159.623 li
94.8497 159.258 mo
94.6743 159.075 li
94.8571 158.9 li
95.0324 159.082 li
94.8497 159.258 li
94.499 158.892 mo
94.3237 158.709 li
94.5064 158.534 li
94.6817 158.717 li
94.499 158.892 li
94.1484 158.527 mo
93.973 158.344 li
94.1557 158.169 li
94.3311 158.351 li
94.1484 158.527 li
93.7977 158.161 mo
93.6224 157.978 li
93.8051 157.803 li
93.9805 157.986 li
93.7977 158.161 li
93.447 157.796 mo
93.2718 157.613 li
93.4545 157.438 li
93.6298 157.62 li
93.447 157.796 li
93.0964 157.43 mo
92.9211 157.248 li
93.1038 157.072 li
93.2792 157.255 li
93.0964 157.43 li
92.7458 157.065 mo
92.5705 156.882 li
92.7532 156.707 li
92.9285 156.889 li
92.7458 157.065 li
92.3951 156.699 mo
92.2198 156.517 li
92.4025 156.341 li
92.5779 156.524 li
92.3951 156.699 li
92.0445 156.334 mo
91.8692 156.151 li
92.0519 155.976 li
92.2273 156.159 li
92.0445 156.334 li
91.6938 155.969 mo
91.5186 155.786 li
91.7013 155.61 li
91.8766 155.793 li
91.6938 155.969 li
91.3432 155.603 mo
91.1679 155.42 li
91.3506 155.245 li
91.5259 155.428 li
91.3432 155.603 li
90.9926 155.238 mo
90.8173 155.055 li
91 154.879 li
91.1753 155.062 li
90.9926 155.238 li
90.6419 154.872 mo
90.4666 154.689 li
90.6494 154.514 li
90.8246 154.697 li
90.6419 154.872 li
90.2913 154.507 mo
90.1159 154.324 li
90.2987 154.149 li
90.474 154.331 li
90.2913 154.507 li
89.9406 154.141 mo
89.7653 153.958 li
89.9481 153.783 li
90.1233 153.966 li
89.9406 154.141 li
89.59 153.776 mo
89.4146 153.593 li
89.5974 153.418 li
89.7727 153.6 li
89.59 153.776 li
89.2394 153.41 mo
89.064 153.228 li
89.2468 153.052 li
89.4221 153.235 li
89.2394 153.41 li
88.8887 153.045 mo
88.7134 152.862 li
88.8961 152.687 li
89.0714 152.87 li
88.8887 153.045 li
88.5381 152.679 mo
88.3627 152.497 li
88.5454 152.321 li
88.7208 152.504 li
88.5381 152.679 li
88.1875 152.314 mo
88.0121 152.131 li
88.1948 151.956 li
88.3701 152.139 li
88.1875 152.314 li
87.8368 151.949 mo
87.6615 151.766 li
87.8441 151.59 li
88.0195 151.773 li
87.8368 151.949 li
87.4861 151.583 mo
87.3108 151.4 li
87.4935 151.225 li
87.6689 151.408 li
87.4861 151.583 li
87.1354 151.218 mo
86.9602 151.035 li
87.1429 150.86 li
87.3182 151.042 li
87.1354 151.218 li
86.7848 150.852 mo
86.6095 150.669 li
86.7922 150.494 li
86.9676 150.677 li
86.7848 150.852 li
86.4342 150.487 mo
86.2589 150.304 li
86.4416 150.129 li
86.617 150.311 li
86.4342 150.487 li
86.0835 150.121 mo
85.9083 149.939 li
86.091 149.763 li
86.2663 149.946 li
86.0835 150.121 li
85.7329 149.756 mo
85.5576 149.573 li
85.7403 149.398 li
85.9157 149.58 li
85.7329 149.756 li
85.3823 149.39 mo
85.207 149.208 li
85.3897 149.032 li
85.5649 149.215 li
85.3823 149.39 li
85.0316 149.025 mo
84.8563 148.842 li
85.039 148.667 li
85.2143 148.85 li
85.0316 149.025 li
84.681 148.659 mo
84.5056 148.477 li
84.6884 148.301 li
84.8637 148.484 li
84.681 148.659 li
84.3303 148.294 mo
84.155 148.111 li
84.3378 147.936 li
84.513 148.119 li
84.3303 148.294 li
83.9797 147.929 mo
83.8043 147.746 li
83.9871 147.571 li
84.1624 147.753 li
83.9797 147.929 li
83.629 147.563 mo
83.4537 147.38 li
83.6365 147.205 li
83.8117 147.388 li
83.629 147.563 li
83.2784 147.198 mo
83.103 147.015 li
83.2858 146.84 li
83.4611 147.022 li
83.2784 147.198 li
82.9278 146.832 mo
82.7524 146.649 li
82.9352 146.474 li
83.1105 146.657 li
82.9278 146.832 li
82.5771 146.467 mo
82.4018 146.284 li
82.5845 146.109 li
82.7598 146.291 li
82.5771 146.467 li
82.2265 146.101 mo
82.0511 145.919 li
82.2338 145.743 li
82.4092 145.926 li
82.2265 146.101 li
81.8759 145.736 mo
81.7005 145.553 li
81.8832 145.378 li
82.0585 145.561 li
81.8759 145.736 li
81.5251 145.37 mo
81.3498 145.188 li
81.5325 145.012 li
81.7079 145.195 li
81.5251 145.37 li
81.1745 145.005 mo
80.9992 144.822 li
81.1819 144.647 li
81.3573 144.83 li
81.1745 145.005 li
80.8238 144.64 mo
80.6486 144.457 li
80.8312 144.281 li
81.0066 144.464 li
80.8238 144.64 li
80.4732 144.274 mo
80.2979 144.091 li
80.4806 143.916 li
80.656 144.099 li
80.4732 144.274 li
80.1225 143.909 mo
79.9473 143.726 li
80.13 143.55 li
80.3053 143.733 li
80.1225 143.909 li
79.7719 143.543 mo
79.5966 143.36 li
79.7793 143.185 li
79.9547 143.368 li
79.7719 143.543 li
79.4213 143.178 mo
79.246 142.995 li
79.4287 142.82 li
79.604 143.002 li
79.4213 143.178 li
79.0706 142.812 mo
78.8954 142.629 li
79.078 142.454 li
79.2533 142.637 li
79.0706 142.812 li
78.72 142.447 mo
78.5447 142.264 li
78.7274 142.089 li
78.9027 142.271 li
78.72 142.447 li
78.3693 142.081 mo
78.194 141.899 li
78.3768 141.723 li
78.552 141.906 li
78.3693 142.081 li
78.0187 141.716 mo
77.8433 141.533 li
78.0261 141.358 li
78.2014 141.541 li
78.0187 141.716 li
77.6681 141.35 mo
77.4927 141.168 li
77.6755 140.992 li
77.8508 141.175 li
77.6681 141.35 li
77.3174 140.985 mo
77.142 140.802 li
77.3248 140.627 li
77.5001 140.81 li
77.3174 140.985 li
76.9668 140.619 mo
76.7914 140.437 li
76.9742 140.261 li
77.1495 140.444 li
76.9668 140.619 li
76.6161 140.254 mo
76.4408 140.071 li
76.6236 139.896 li
76.7988 140.079 li
76.6161 140.254 li
76.2655 139.889 mo
76.0901 139.706 li
76.2729 139.531 li
76.4482 139.713 li
76.2655 139.889 li
75.9149 139.523 mo
75.7395 139.34 li
75.9222 139.165 li
76.0976 139.348 li
75.9149 139.523 li
75.5642 139.158 mo
75.3888 138.975 li
75.5715 138.8 li
75.7469 138.982 li
75.5642 139.158 li
75.2135 138.792 mo
75.0382 138.609 li
75.2209 138.434 li
75.3963 138.617 li
75.2135 138.792 li
74.8628 138.427 mo
74.6876 138.244 li
74.8703 138.069 li
75.0456 138.251 li
74.8628 138.427 li
74.5122 138.061 mo
74.3369 137.879 li
74.5196 137.703 li
74.695 137.886 li
74.5122 138.061 li
74.1615 137.696 mo
73.9863 137.513 li
74.169 137.338 li
74.3443 137.521 li
74.1615 137.696 li
73.8109 137.33 mo
73.6356 137.148 li
73.8183 136.972 li
73.9937 137.155 li
73.8109 137.33 li
73.4603 136.965 mo
73.285 136.782 li
73.4677 136.607 li
73.6431 136.79 li
73.4603 136.965 li
73.1096 136.6 mo
72.9344 136.417 li
73.117 136.241 li
73.2924 136.424 li
73.1096 136.6 li
72.759 136.234 mo
72.5837 136.051 li
72.7664 135.876 li
72.9417 136.059 li
72.759 136.234 li
72.4083 135.869 mo
72.233 135.686 li
72.4158 135.511 li
72.591 135.693 li
72.4083 135.869 li
72.0577 135.503 mo
71.8823 135.32 li
72.0651 135.145 li
72.2404 135.328 li
72.0577 135.503 li
71.7071 135.138 mo
71.5317 134.955 li
71.7145 134.78 li
71.8897 134.962 li
71.7071 135.138 li
71.3564 134.772 mo
71.181 134.589 li
71.3638 134.414 li
71.5391 134.597 li
71.3564 134.772 li
71.0058 134.407 mo
70.8304 134.224 li
71.0132 134.049 li
71.1885 134.231 li
71.0058 134.407 li
70.6551 134.041 mo
70.4798 133.859 li
70.6626 133.683 li
70.8378 133.866 li
70.6551 134.041 li
70.3045 133.676 mo
70.1291 133.493 li
70.3119 133.318 li
70.4872 133.501 li
70.3045 133.676 li
69.9538 133.31 mo
69.7785 133.128 li
69.9613 132.952 li
70.1365 133.135 li
69.9538 133.31 li
69.6032 132.945 mo
69.4278 132.762 li
69.6105 132.587 li
69.7859 132.77 li
69.6032 132.945 li
69.2526 132.579 mo
69.0772 132.397 li
69.2599 132.221 li
69.4353 132.404 li
69.2526 132.579 li
68.9019 132.214 mo
68.7265 132.031 li
68.9092 131.856 li
69.0846 132.039 li
68.9019 132.214 li
68.5512 131.849 mo
68.3759 131.666 li
68.5586 131.491 li
68.734 131.673 li
68.5512 131.849 li
68.2005 131.483 mo
68.0253 131.3 li
68.208 131.125 li
68.3833 131.308 li
68.2005 131.483 li
67.8499 131.118 mo
67.6746 130.935 li
67.8573 130.76 li
68.0327 130.942 li
67.8499 131.118 li
67.4993 130.752 mo
67.324 130.569 li
67.5067 130.394 li
67.682 130.577 li
67.4993 130.752 li
67.1486 130.387 mo
66.9733 130.204 li
67.156 130.029 li
67.3314 130.211 li
67.1486 130.387 li
66.798 130.021 mo
66.6227 129.839 li
66.8054 129.663 li
66.9808 129.846 li
66.798 130.021 li
66.4473 129.656 mo
66.4282 129.636 li
66.4555 129.61 66.4826 129.585 66.5096 129.559 cv
66.5434 129.526 66.5769 129.493 66.6102 129.46 cv
66.6301 129.481 li
66.4473 129.656 li
.36408 .213107 0 0 cmyk
f
66.4282 129.636 mo
66.2721 129.473 li
66.4547 129.298 li
66.6102 129.46 li
66.5769 129.493 66.5434 129.526 66.5096 129.559 cv
66.4826 129.585 66.4555 129.61 66.4282 129.636 cv
.904997 .707607 .0103151 0 cmyk
f
223.081 57.7348 mo
223.016 57.6684 li
223.198 57.4923 li
223.263 57.5586 li
223.081 57.7348 li
f
222.84 57.4865 mo
222.664 57.3047 li
222.846 57.1284 li
223.022 57.3103 li
222.84 57.4865 li
222.488 57.1228 mo
222.312 56.9409 li
222.493 56.7647 li
222.67 56.9466 li
222.488 57.1228 li
222.135 56.759 mo
221.959 56.5771 li
222.141 56.4009 li
222.317 56.5828 li
222.135 56.759 li
221.783 56.3953 mo
221.607 56.2134 li
221.789 56.0372 li
221.965 56.2191 li
221.783 56.3953 li
221.431 56.0315 mo
221.254 55.8496 li
221.436 55.6734 li
221.612 55.8553 li
221.431 56.0315 li
221.078 55.6677 mo
220.902 55.4858 li
221.084 55.3097 li
221.26 55.4916 li
221.078 55.6677 li
220.726 55.3039 mo
220.55 55.1221 li
220.731 54.9459 li
220.908 55.1277 li
220.726 55.3039 li
220.373 54.9402 mo
220.197 54.7583 li
220.379 54.5821 li
220.555 54.764 li
220.373 54.9402 li
220.021 54.5764 mo
219.845 54.3946 li
220.027 54.2184 li
220.203 54.4002 li
220.021 54.5764 li
219.669 54.2127 mo
219.492 54.0308 li
219.674 53.8546 li
219.85 54.0365 li
219.669 54.2127 li
219.316 53.8489 mo
219.14 53.667 li
219.322 53.4909 li
219.498 53.6727 li
219.316 53.8489 li
218.964 53.4851 mo
218.788 53.3032 li
218.969 53.127 li
219.146 53.309 li
218.964 53.4851 li
218.611 53.1213 mo
218.435 52.9395 li
218.617 52.7633 li
218.793 52.9451 li
218.611 53.1213 li
218.259 52.7576 mo
218.083 52.5757 li
218.265 52.3995 li
218.441 52.5814 li
218.259 52.7576 li
217.907 52.3939 mo
217.73 52.212 li
217.912 52.0358 li
218.088 52.2176 li
217.907 52.3939 li
217.554 52.0301 mo
217.378 51.8482 li
217.56 51.672 li
217.736 51.8539 li
217.554 52.0301 li
217.202 51.6663 mo
217.026 51.4844 li
217.207 51.3083 li
217.384 51.4902 li
217.202 51.6663 li
216.849 51.3025 mo
216.673 51.1206 li
216.855 50.9444 li
217.031 51.1264 li
216.849 51.3025 li
216.497 50.9388 mo
216.321 50.7569 li
216.503 50.5807 li
216.679 50.7625 li
216.497 50.9388 li
216.145 50.575 mo
215.968 50.3931 li
216.15 50.2169 li
216.326 50.3988 li
216.145 50.575 li
215.792 50.2113 mo
215.616 50.0294 li
215.798 49.8532 li
215.974 50.0351 li
215.792 50.2113 li
215.44 49.8475 mo
215.264 49.6657 li
215.445 49.4894 li
215.622 49.6713 li
215.44 49.8475 li
215.087 49.4837 mo
214.911 49.3018 li
215.093 49.1257 li
215.269 49.3076 li
215.087 49.4837 li
214.735 49.1199 mo
214.559 48.9381 li
214.741 48.7618 li
214.917 48.9438 li
214.735 49.1199 li
214.383 48.7562 mo
214.206 48.5743 li
214.388 48.3981 li
214.564 48.58 li
214.383 48.7562 li
214.03 48.3924 mo
213.854 48.2106 li
214.036 48.0344 li
214.212 48.2162 li
214.03 48.3924 li
213.678 48.0287 mo
213.502 47.8468 li
213.683 47.6706 li
213.86 47.8525 li
213.678 48.0287 li
213.325 47.6649 mo
213.149 47.4831 li
213.331 47.3069 li
213.507 47.4887 li
213.325 47.6649 li
212.973 47.3011 mo
212.797 47.1192 li
212.979 46.9431 li
213.155 47.125 li
212.973 47.3011 li
212.621 46.9373 mo
212.444 46.7555 li
212.626 46.5793 li
212.802 46.7612 li
212.621 46.9373 li
212.268 46.5736 mo
212.092 46.3917 li
212.274 46.2155 li
212.45 46.3974 li
212.268 46.5736 li
211.916 46.2099 mo
211.74 46.028 li
211.921 45.8518 li
212.098 46.0336 li
211.916 46.2099 li
211.563 45.8461 mo
211.387 45.6642 li
211.569 45.488 li
211.745 45.6699 li
211.563 45.8461 li
211.211 45.4824 mo
211.035 45.3004 li
211.217 45.1243 li
211.393 45.3061 li
211.211 45.4824 li
210.859 45.1185 mo
210.682 44.9366 li
210.864 44.7605 li
211.04 44.9424 li
210.859 45.1185 li
210.506 44.7548 mo
210.33 44.5729 li
210.512 44.3967 li
210.688 44.5786 li
210.506 44.7548 li
210.154 44.391 mo
209.978 44.2092 li
210.159 44.0329 li
210.336 44.2148 li
210.154 44.391 li
209.801 44.0273 mo
209.625 43.8454 li
209.807 43.6692 li
209.983 43.8511 li
209.801 44.0273 li
209.449 43.6635 mo
209.273 43.4816 li
209.455 43.3054 li
209.631 43.4873 li
209.449 43.6635 li
209.097 43.2998 mo
208.92 43.1178 li
209.102 42.9417 li
209.278 43.1236 li
209.097 43.2998 li
208.744 42.9359 mo
208.568 42.7541 li
208.75 42.5779 li
208.926 42.7598 li
208.744 42.9359 li
208.392 42.5722 mo
208.216 42.3903 li
208.397 42.2141 li
208.574 42.396 li
208.392 42.5722 li
208.039 42.2084 mo
207.863 42.0266 li
208.045 41.8504 li
208.221 42.0322 li
208.039 42.2084 li
207.687 41.8447 mo
207.511 41.6628 li
207.693 41.4866 li
207.869 41.6685 li
207.687 41.8447 li
207.335 41.4809 mo
207.158 41.2991 li
207.34 41.1228 li
207.516 41.3047 li
207.335 41.4809 li
206.982 41.1172 mo
206.806 40.9352 li
206.988 40.7591 li
207.164 40.941 li
206.982 41.1172 li
206.63 40.7533 mo
206.454 40.5715 li
206.635 40.3953 li
206.812 40.5772 li
206.63 40.7533 li
206.277 40.3896 mo
206.101 40.2077 li
206.283 40.0315 li
206.459 40.2134 li
206.277 40.3896 li
205.925 40.0258 mo
205.749 39.844 li
205.931 39.6678 li
206.107 39.8496 li
205.925 40.0258 li
205.573 39.6621 mo
205.396 39.4802 li
205.578 39.304 li
205.754 39.4859 li
205.573 39.6621 li
205.22 39.2984 mo
205.044 39.1165 li
205.226 38.9403 li
205.402 39.1221 li
205.22 39.2984 li
204.868 38.9346 mo
204.692 38.7526 li
204.873 38.5765 li
205.05 38.7584 li
204.868 38.9346 li
204.515 38.5708 mo
204.339 38.3889 li
204.521 38.2127 li
204.697 38.3946 li
204.515 38.5708 li
204.163 38.207 mo
203.987 38.0251 li
204.169 37.8489 li
204.345 38.0308 li
204.163 38.207 li
203.811 37.8433 mo
203.634 37.6614 li
203.816 37.4852 li
203.992 37.667 li
203.811 37.8433 li
203.458 37.4795 mo
203.282 37.2976 li
203.464 37.1214 li
203.64 37.3033 li
203.458 37.4795 li
203.106 37.1158 mo
202.93 36.9339 li
203.111 36.7577 li
203.288 36.9396 li
203.106 37.1158 li
202.753 36.752 mo
202.577 36.5701 li
202.759 36.3939 li
202.935 36.5758 li
202.753 36.752 li
202.401 36.3882 mo
202.225 36.2063 li
202.407 36.0301 li
202.583 36.212 li
202.401 36.3882 li
202.049 36.0244 mo
201.872 35.8426 li
202.054 35.6663 li
202.23 35.8482 li
202.049 36.0244 li
201.696 35.6607 mo
201.52 35.4788 li
201.702 35.3026 li
201.878 35.4845 li
201.696 35.6607 li
201.344 35.2969 mo
201.168 35.1151 li
201.349 34.9388 li
201.526 35.1207 li
201.344 35.2969 li
200.991 34.9332 mo
200.815 34.7513 li
200.997 34.5751 li
201.173 34.757 li
200.991 34.9332 li
200.639 34.5694 mo
200.463 34.3875 li
200.645 34.2114 li
200.821 34.3932 li
200.639 34.5694 li
200.287 34.2056 mo
200.11 34.0237 li
200.292 33.8475 li
200.468 34.0294 li
200.287 34.2056 li
199.934 33.8418 mo
199.758 33.66 li
199.94 33.4838 li
200.116 33.6656 li
199.934 33.8418 li
199.582 33.4781 mo
199.406 33.2962 li
199.587 33.12 li
199.764 33.3019 li
199.582 33.4781 li
199.229 33.1144 mo
199.053 32.9325 li
199.235 32.7563 li
199.411 32.9381 li
199.229 33.1144 li
198.877 32.7506 mo
198.701 32.5687 li
198.883 32.3925 li
199.059 32.5744 li
198.877 32.7506 li
198.525 32.3867 mo
198.348 32.2049 li
198.53 32.0288 li
198.706 32.2106 li
198.525 32.3867 li
198.172 32.023 mo
197.996 31.8411 li
198.178 31.6649 li
198.354 31.8468 li
198.172 32.023 li
197.82 31.6593 mo
197.644 31.4774 li
197.825 31.3012 li
198.002 31.483 li
197.82 31.6593 li
197.467 31.2955 mo
197.291 31.1136 li
197.473 30.9374 li
197.649 31.1193 li
197.467 31.2955 li
197.115 30.9318 mo
196.939 30.7499 li
197.121 30.5737 li
197.297 30.7556 li
197.115 30.9318 li
196.763 30.568 mo
196.586 30.3861 li
196.768 30.2099 li
196.944 30.3918 li
196.763 30.568 li
196.41 30.2042 mo
196.234 30.0223 li
196.416 29.8462 li
196.592 30.0281 li
196.41 30.2042 li
196.058 29.8404 mo
195.882 29.6586 li
196.063 29.4823 li
196.24 29.6642 li
196.058 29.8404 li
195.705 29.4767 mo
195.529 29.2948 li
195.711 29.1186 li
195.887 29.3005 li
195.705 29.4767 li
195.353 29.1129 mo
195.177 28.9311 li
195.359 28.7548 li
195.535 28.9367 li
195.353 29.1129 li
195.001 28.7492 mo
194.824 28.5673 li
195.006 28.3911 li
195.182 28.573 li
195.001 28.7492 li
194.648 28.3854 mo
194.472 28.2035 li
194.654 28.0273 li
194.83 28.2092 li
194.648 28.3854 li
194.296 28.0216 mo
194.12 27.8397 li
194.301 27.6636 li
194.478 27.8455 li
194.296 28.0216 li
193.943 27.6578 mo
193.767 27.476 li
193.949 27.2998 li
194.125 27.4816 li
193.943 27.6578 li
193.591 27.2941 mo
193.415 27.1122 li
193.597 26.936 li
193.773 27.1179 li
193.591 27.2941 li
193.239 26.9303 mo
193.062 26.7485 li
193.244 26.5722 li
193.42 26.7541 li
193.239 26.9303 li
192.886 26.5666 mo
192.71 26.3847 li
192.892 26.2085 li
193.068 26.3904 li
192.886 26.5666 li
192.534 26.2028 mo
192.358 26.0209 li
192.539 25.8448 li
192.716 26.0266 li
192.534 26.2028 li
192.181 25.839 mo
192.005 25.6571 li
192.187 25.4809 li
192.363 25.6629 li
192.181 25.839 li
191.829 25.4753 mo
191.653 25.2934 li
191.835 25.1172 li
192.011 25.299 li
191.829 25.4753 li
191.477 25.1115 mo
191.3 24.9296 li
191.482 24.7534 li
191.658 24.9353 li
191.477 25.1115 li
191.124 24.7478 mo
190.948 24.5659 li
191.13 24.3897 li
191.306 24.5715 li
191.124 24.7478 li
190.772 24.384 mo
190.596 24.2021 li
190.777 24.0259 li
190.954 24.2078 li
190.772 24.384 li
190.419 24.0202 mo
190.243 23.8383 li
190.425 23.6622 li
190.601 23.8441 li
190.419 24.0202 li
190.067 23.6564 mo
189.891 23.4745 li
190.073 23.2983 li
190.249 23.4803 li
190.067 23.6564 li
189.715 23.2927 mo
189.538 23.1108 li
189.72 22.9346 li
189.896 23.1165 li
189.715 23.2927 li
189.362 22.9289 mo
189.186 22.747 li
189.368 22.5708 li
189.544 22.7527 li
189.362 22.9289 li
189.01 22.5652 mo
188.834 22.3833 li
189.015 22.2071 li
189.192 22.389 li
189.01 22.5652 li
188.657 22.2014 mo
188.481 22.0196 li
188.663 21.8433 li
188.839 22.0252 li
188.657 22.2014 li
188.305 21.8376 mo
188.129 21.6557 li
188.311 21.4796 li
188.487 21.6615 li
188.305 21.8376 li
187.953 21.4738 mo
187.776 21.292 li
187.958 21.1157 li
188.134 21.2977 li
187.953 21.4738 li
187.6 21.1101 mo
187.424 20.9282 li
187.606 20.752 li
187.782 20.9339 li
187.6 21.1101 li
187.248 20.7463 mo
187.072 20.5645 li
187.253 20.3882 li
187.43 20.5701 li
187.248 20.7463 li
186.895 20.3826 mo
186.719 20.2007 li
186.901 20.0245 li
187.077 20.2064 li
186.895 20.3826 li
186.543 20.0188 mo
186.367 19.837 li
186.549 19.6607 li
186.725 19.8426 li
186.543 20.0188 li
186.191 19.655 mo
186.014 19.4731 li
186.196 19.297 li
186.372 19.4789 li
186.191 19.655 li
185.838 19.2912 mo
185.662 19.1094 li
185.844 18.9332 li
186.02 19.1151 li
185.838 19.2912 li
185.486 18.9275 mo
185.31 18.7456 li
185.491 18.5694 li
185.668 18.7513 li
185.486 18.9275 li
185.133 18.5638 mo
184.957 18.3819 li
185.139 18.2057 li
185.315 18.3875 li
185.133 18.5638 li
184.781 18.2 mo
184.605 18.0181 li
184.787 17.8419 li
184.963 18.0238 li
184.781 18.2 li
184.429 17.8362 mo
184.252 17.6544 li
184.434 17.4782 li
184.61 17.66 li
184.429 17.8362 li
184.076 17.4724 mo
184.07 17.4663 li
184.132 17.4092 184.193 17.3502 184.251 17.2894 cv
184.258 17.2963 li
184.076 17.4724 li
.36408 .213107 0 0 cmyk
f
184.07 17.4663 mo
183.9 17.2905 li
184.082 17.1144 li
184.251 17.2894 li
184.193 17.3502 184.132 17.4092 184.07 17.4663 cv
.904997 .707607 .0103151 0 cmyk
f
234.412 57.7348 mo
234.23 57.5586 li
234.295 57.4917 li
234.477 57.6679 li
234.412 57.7348 li
f
234.653 57.4861 mo
234.471 57.3098 li
234.648 57.128 li
234.829 57.3042 li
234.653 57.4861 li
235.006 57.1223 mo
234.824 56.9461 li
235 56.7642 li
235.182 56.9403 li
235.006 57.1223 li
235.358 56.7585 mo
235.176 56.5823 li
235.352 56.4004 li
235.534 56.5766 li
235.358 56.7585 li
235.711 56.3947 mo
235.529 56.2185 li
235.705 56.0366 li
235.887 56.2129 li
235.711 56.3947 li
236.063 56.031 mo
235.881 55.8548 li
236.057 55.6729 li
236.239 55.8491 li
236.063 56.031 li
236.415 55.6672 mo
236.233 55.491 li
236.41 55.3091 li
236.592 55.4854 li
236.415 55.6672 li
236.768 55.3035 mo
236.586 55.1273 li
236.762 54.9454 li
236.944 55.1216 li
236.768 55.3035 li
237.12 54.9397 mo
236.938 54.7635 li
237.114 54.5817 li
237.296 54.7578 li
237.12 54.9397 li
237.473 54.5759 mo
237.291 54.3997 li
237.467 54.2178 li
237.649 54.394 li
237.473 54.5759 li
237.825 54.2122 mo
237.643 54.0359 li
237.819 53.8541 li
238.001 54.0303 li
237.825 54.2122 li
238.177 53.8484 mo
237.995 53.6722 li
238.172 53.4903 li
238.354 53.6665 li
238.177 53.8484 li
238.53 53.4847 mo
238.348 53.3085 li
238.524 53.1266 li
238.706 53.3028 li
238.53 53.4847 li
238.882 53.1209 mo
238.7 52.9447 li
238.876 52.7629 li
239.058 52.939 li
238.882 53.1209 li
239.235 52.7571 mo
239.053 52.581 li
239.229 52.3991 li
239.411 52.5752 li
239.235 52.7571 li
239.587 52.3934 mo
239.405 52.2171 li
239.581 52.0353 li
239.763 52.2115 li
239.587 52.3934 li
239.939 52.0296 mo
239.757 51.8534 li
239.934 51.6715 li
240.116 51.8477 li
239.939 52.0296 li
240.292 51.6659 mo
240.11 51.4897 li
240.286 51.3078 li
240.468 51.484 li
240.292 51.6659 li
240.644 51.3021 mo
240.462 51.1259 li
240.638 50.944 li
240.82 51.1203 li
240.644 51.3021 li
240.997 50.9384 mo
240.815 50.7622 li
240.991 50.5803 li
241.173 50.7564 li
240.997 50.9384 li
241.349 50.5745 mo
241.167 50.3984 li
241.343 50.2165 li
241.525 50.3927 li
241.349 50.5745 li
241.701 50.2108 mo
241.52 50.0346 li
241.696 49.8527 li
241.878 50.0289 li
241.701 50.2108 li
242.054 49.8471 mo
241.872 49.6708 li
242.048 49.489 li
242.23 49.6652 li
242.054 49.8471 li
242.406 49.4833 mo
242.224 49.3071 li
242.401 49.1252 li
242.582 49.3014 li
242.406 49.4833 li
242.759 49.1196 mo
242.577 48.9434 li
242.753 48.7615 li
242.935 48.9377 li
242.759 49.1196 li
243.111 48.7558 mo
242.929 48.5796 li
243.105 48.3977 li
243.287 48.5739 li
243.111 48.7558 li
243.463 48.392 mo
243.282 48.2159 li
243.458 48.0339 li
243.64 48.2101 li
243.463 48.392 li
243.816 48.0282 mo
243.634 47.852 li
243.81 47.6702 li
243.992 47.8464 li
243.816 48.0282 li
244.168 47.6645 mo
243.986 47.4883 li
244.163 47.3064 li
244.344 47.4826 li
244.168 47.6645 li
244.521 47.3008 mo
244.339 47.1246 li
244.515 46.9427 li
244.697 47.1189 li
244.521 47.3008 li
244.873 46.937 mo
244.691 46.7608 li
244.867 46.5789 li
245.049 46.7551 li
244.873 46.937 li
245.225 46.5732 mo
245.044 46.3971 li
245.22 46.2152 li
245.402 46.3913 li
245.225 46.5732 li
245.578 46.2094 mo
245.396 46.0332 li
245.572 45.8514 li
245.754 46.0276 li
245.578 46.2094 li
245.93 45.8457 mo
245.748 45.6695 li
245.925 45.4876 li
246.106 45.6638 li
245.93 45.8457 li
246.283 45.482 mo
246.101 45.3057 li
246.277 45.1239 li
246.459 45.3001 li
246.283 45.482 li
246.635 45.1182 mo
246.453 44.942 li
246.629 44.7601 li
246.811 44.9363 li
246.635 45.1182 li
246.987 44.7545 mo
246.806 44.5783 li
246.982 44.3964 li
247.164 44.5725 li
246.987 44.7545 li
247.34 44.3906 mo
247.158 44.2145 li
247.334 44.0326 li
247.516 44.2088 li
247.34 44.3906 li
247.692 44.0269 mo
247.51 43.8507 li
247.687 43.6688 li
247.868 43.845 li
247.692 44.0269 li
248.045 43.6631 mo
247.863 43.4869 li
248.039 43.3051 li
248.221 43.4813 li
248.045 43.6631 li
248.397 43.2994 mo
248.215 43.1232 li
248.391 42.9413 li
248.573 43.1175 li
248.397 43.2994 li
248.749 42.9357 mo
248.568 42.7594 li
248.744 42.5776 li
248.926 42.7538 li
248.749 42.9357 li
249.102 42.5719 mo
248.92 42.3957 li
249.096 42.2138 li
249.278 42.3899 li
249.102 42.5719 li
249.454 42.2081 mo
249.272 42.032 li
249.449 41.85 li
249.63 42.0262 li
249.454 42.2081 li
249.807 41.8443 mo
249.625 41.6681 li
249.801 41.4863 li
249.983 41.6625 li
249.807 41.8443 li
250.159 41.4806 mo
249.977 41.3044 li
250.153 41.1225 li
250.335 41.2987 li
250.159 41.4806 li
250.511 41.1169 mo
250.33 40.9406 li
250.506 40.7588 li
250.688 40.935 li
250.511 41.1169 li
250.864 40.7531 mo
250.682 40.5769 li
250.858 40.395 li
251.04 40.5712 li
250.864 40.7531 li
251.216 40.3893 mo
251.034 40.2132 li
251.211 40.0313 li
251.393 40.2074 li
251.216 40.3893 li
251.569 40.0255 mo
251.387 39.8493 li
251.563 39.6674 li
251.745 39.8437 li
251.569 40.0255 li
251.921 39.6618 mo
251.739 39.4856 li
251.915 39.3037 li
252.097 39.4799 li
251.921 39.6618 li
252.274 39.298 mo
252.092 39.1218 li
252.268 38.94 li
252.45 39.1162 li
252.274 39.298 li
252.626 38.9343 mo
252.444 38.7581 li
252.62 38.5762 li
252.802 38.7524 li
252.626 38.9343 li
252.978 38.5706 mo
252.796 38.3943 li
252.973 38.2125 li
253.155 38.3886 li
252.978 38.5706 li
253.331 38.2067 mo
253.149 38.0306 li
253.325 37.8487 li
253.507 38.0248 li
253.331 38.2067 li
253.683 37.843 mo
253.501 37.6667 li
253.677 37.4849 li
253.859 37.6611 li
253.683 37.843 li
254.036 37.4792 mo
253.854 37.303 li
254.03 37.1212 li
254.212 37.2974 li
254.036 37.4792 li
254.388 37.1155 mo
254.206 36.9393 li
254.382 36.7574 li
254.564 36.9336 li
254.388 37.1155 li
254.74 36.7518 mo
254.558 36.5755 li
254.735 36.3937 li
254.917 36.5699 li
254.74 36.7518 li
255.093 36.388 mo
254.911 36.2118 li
255.087 36.0299 li
255.269 36.206 li
255.093 36.388 li
255.445 36.0242 mo
255.263 35.8481 li
255.44 35.6661 li
255.621 35.8423 li
255.445 36.0242 li
255.798 35.6604 mo
255.616 35.4842 li
255.792 35.3023 li
255.974 35.4785 li
255.798 35.6604 li
256.15 35.2967 mo
255.968 35.1205 li
256.144 34.9386 li
256.326 35.1148 li
256.15 35.2967 li
256.502 34.9329 mo
256.321 34.7567 li
256.497 34.5748 li
256.678 34.7511 li
256.502 34.9329 li
256.855 34.5692 mo
256.673 34.393 li
256.849 34.2111 li
257.031 34.3873 li
256.855 34.5692 li
257.207 34.2054 mo
257.025 34.0292 li
257.202 33.8474 li
257.383 34.0235 li
257.207 34.2054 li
257.56 33.8416 mo
257.378 33.6655 li
257.554 33.4835 li
257.736 33.6597 li
257.56 33.8416 li
257.912 33.4779 mo
257.73 33.3016 li
257.906 33.1198 li
258.088 33.296 li
257.912 33.4779 li
258.264 33.1141 mo
258.083 32.9379 li
258.259 32.756 li
258.441 32.9322 li
258.264 33.1141 li
258.617 32.7504 mo
258.435 32.5742 li
258.611 32.3923 li
258.793 32.5685 li
258.617 32.7504 li
258.969 32.3866 mo
258.787 32.2104 li
258.964 32.0286 li
259.145 32.2048 li
258.969 32.3866 li
259.322 32.0228 mo
259.14 31.8467 li
259.316 31.6648 li
259.498 31.8409 li
259.322 32.0228 li
259.674 31.6591 mo
259.492 31.4828 li
259.668 31.301 li
259.85 31.4772 li
259.674 31.6591 li
260.026 31.2953 mo
259.845 31.1191 li
260.021 30.9372 li
260.203 31.1134 li
260.026 31.2953 li
260.379 30.9316 mo
260.197 30.7554 li
260.373 30.5735 li
260.555 30.7497 li
260.379 30.9316 li
260.731 30.5678 mo
260.549 30.3916 li
260.726 30.2097 li
260.907 30.386 li
260.731 30.5678 li
261.084 30.2041 mo
260.902 30.0279 li
261.078 29.846 li
261.26 30.0222 li
261.084 30.2041 li
261.436 29.8402 mo
261.254 29.6641 li
261.43 29.4822 li
261.612 29.6584 li
261.436 29.8402 li
261.788 29.4765 mo
261.607 29.3003 li
261.783 29.1184 li
261.965 29.2946 li
261.788 29.4765 li
262.141 29.1128 mo
261.959 28.9365 li
262.135 28.7547 li
262.317 28.9309 li
262.141 29.1128 li
262.493 28.749 mo
262.311 28.5728 li
262.488 28.3909 li
262.669 28.5671 li
262.493 28.749 li
262.846 28.3853 mo
262.664 28.2091 li
262.84 28.0272 li
263.022 28.2034 li
262.846 28.3853 li
263.198 28.0215 mo
263.016 27.8453 li
263.192 27.6634 li
263.374 27.8396 li
263.198 28.0215 li
263.55 27.6577 mo
263.369 27.4816 li
263.545 27.2996 li
263.727 27.4758 li
263.55 27.6577 li
263.903 27.2939 mo
263.721 27.1177 li
263.897 26.9359 li
264.079 27.1121 li
263.903 27.2939 li
264.255 26.9302 mo
264.073 26.754 li
264.25 26.5721 li
264.431 26.7483 li
264.255 26.9302 li
264.608 26.5665 mo
264.426 26.3903 li
264.602 26.2084 li
264.784 26.3846 li
264.608 26.5665 li
264.96 26.2027 mo
264.778 26.0265 li
264.954 25.8446 li
265.136 26.0209 li
264.96 26.2027 li
265.312 25.8389 mo
265.131 25.6628 li
265.307 25.4809 li
265.489 25.657 li
265.312 25.8389 li
265.665 25.4751 mo
265.483 25.299 li
265.659 25.1171 li
265.841 25.2933 li
265.665 25.4751 li
266.017 25.1114 mo
265.835 24.9352 li
266.012 24.7533 li
266.193 24.9295 li
266.017 25.1114 li
266.37 24.7477 mo
266.188 24.5714 li
266.364 24.3896 li
266.546 24.5658 li
266.37 24.7477 li
266.722 24.3839 mo
266.54 24.2077 li
266.716 24.0258 li
266.898 24.202 li
266.722 24.3839 li
267.075 24.0202 mo
266.893 23.844 li
267.069 23.6621 li
267.251 23.8383 li
267.075 24.0202 li
267.427 23.6563 mo
267.245 23.4802 li
267.421 23.2983 li
267.603 23.4745 li
267.427 23.6563 li
267.779 23.2926 mo
267.597 23.1164 li
267.774 22.9345 li
267.956 23.1107 li
267.779 23.2926 li
268.132 22.9288 mo
267.95 22.7526 li
268.126 22.5708 li
268.308 22.747 li
268.132 22.9288 li
268.484 22.5651 mo
268.302 22.3889 li
268.478 22.207 li
268.66 22.3832 li
268.484 22.5651 li
268.837 22.2014 mo
268.655 22.0251 li
268.831 21.8433 li
269.013 22.0195 li
268.837 22.2014 li
269.189 21.8376 mo
269.007 21.6614 li
269.183 21.4795 li
269.365 21.6556 li
269.189 21.8376 li
269.541 21.4738 mo
269.359 21.2977 li
269.536 21.1157 li
269.718 21.2919 li
269.541 21.4738 li
269.894 21.11 mo
269.712 20.9338 li
269.888 20.7519 li
270.07 20.9281 li
269.894 21.11 li
270.246 20.7463 mo
270.064 20.5701 li
270.24 20.3882 li
270.422 20.5644 li
270.246 20.7463 li
270.599 20.3825 mo
270.417 20.2063 li
270.593 20.0245 li
270.775 20.2007 li
270.599 20.3825 li
270.951 20.0188 mo
270.769 19.8426 li
270.945 19.6607 li
271.127 19.8369 li
270.951 20.0188 li
271.303 19.655 mo
271.122 19.4789 li
271.298 19.297 li
271.48 19.4731 li
271.303 19.655 li
271.656 19.2912 mo
271.474 19.1151 li
271.65 18.9331 li
271.832 19.1093 li
271.656 19.2912 li
272.008 18.9275 mo
271.826 18.7513 li
272.003 18.5694 li
272.184 18.7456 li
272.008 18.9275 li
272.361 18.5637 mo
272.179 18.3875 li
272.355 18.2056 li
272.537 18.3819 li
272.361 18.5637 li
272.713 18.2 mo
272.531 18.0238 li
272.707 17.8419 li
272.889 18.0181 li
272.713 18.2 li
273.065 17.8362 mo
272.884 17.66 li
273.06 17.4782 li
273.242 17.6544 li
273.065 17.8362 li
273.418 17.4724 mo
273.236 17.2963 li
273.246 17.2862 li
273.304 17.3471 273.365 17.4061 273.427 17.4633 cv
273.418 17.4724 li
.36408 .213107 0 0 cmyk
f
273.427 17.4633 mo
273.365 17.4061 273.304 17.3471 273.246 17.2862 cv
273.412 17.1144 li
273.594 17.2905 li
273.427 17.4633 li
.904997 .707607 .0103151 0 cmyk
f
184.153 169.858 mo
183.972 169.681 li
184.149 169.5 li
184.33 169.677 li
184.153 169.858 li
1 .87277 .340093 .34934 cmyk
f
184.507 169.496 mo
184.453 169.442 li
184.563 169.196 li
184.684 169.314 li
184.507 169.496 li
.36408 .213107 0 0 cmyk
f
184.453 169.442 mo
184.326 169.318 li
184.503 169.137 li
184.563 169.196 li
184.453 169.442 li
1 .87277 .340093 .34934 cmyk
f
184.861 169.133 mo
184.68 168.956 li
184.857 168.775 li
185.038 168.952 li
184.861 169.133 li
185.215 168.771 mo
185.034 168.594 li
185.211 168.413 li
185.392 168.59 li
185.215 168.771 li
185.569 168.409 mo
185.388 168.232 li
185.565 168.051 li
185.746 168.228 li
185.569 168.409 li
185.923 168.047 mo
185.742 167.87 li
185.919 167.689 li
186.1 167.866 li
185.923 168.047 li
186.277 167.685 mo
186.096 167.508 li
186.273 167.326 li
186.454 167.503 li
186.277 167.685 li
186.631 167.322 mo
186.45 167.145 li
186.627 166.964 li
186.808 167.141 li
186.631 167.322 li
186.985 166.96 mo
186.804 166.783 li
186.981 166.602 li
187.162 166.779 li
186.985 166.96 li
187.339 166.598 mo
187.158 166.421 li
187.335 166.24 li
187.516 166.417 li
187.339 166.598 li
187.693 166.236 mo
187.512 166.059 li
187.689 165.878 li
187.87 166.055 li
187.693 166.236 li
188.047 165.874 mo
187.866 165.697 li
188.043 165.516 li
188.224 165.693 li
188.047 165.874 li
188.401 165.511 mo
188.22 165.334 li
188.397 165.153 li
188.578 165.33 li
188.401 165.511 li
188.755 165.149 mo
188.574 164.972 li
188.751 164.791 li
188.932 164.968 li
188.755 165.149 li
189.109 164.787 mo
188.928 164.61 li
189.105 164.429 li
189.286 164.606 li
189.109 164.787 li
189.463 164.425 mo
189.282 164.248 li
189.459 164.067 li
189.64 164.244 li
189.463 164.425 li
189.817 164.063 mo
189.636 163.886 li
189.813 163.705 li
189.994 163.882 li
189.817 164.063 li
190.171 163.701 mo
189.99 163.524 li
190.167 163.342 li
190.348 163.519 li
190.171 163.701 li
190.525 163.338 mo
190.344 163.161 li
190.521 162.98 li
190.702 163.157 li
190.525 163.338 li
190.88 162.976 mo
190.698 162.799 li
190.875 162.618 li
191.057 162.795 li
190.88 162.976 li
191.234 162.614 mo
191.052 162.437 li
191.229 162.256 li
191.411 162.433 li
191.234 162.614 li
191.588 162.252 mo
191.406 162.075 li
191.583 161.894 li
191.765 162.071 li
191.588 162.252 li
191.942 161.89 mo
191.76 161.713 li
191.937 161.532 li
192.119 161.709 li
191.942 161.89 li
192.296 161.527 mo
192.114 161.35 li
192.291 161.169 li
192.473 161.346 li
192.296 161.527 li
192.65 161.165 mo
192.468 160.988 li
192.645 160.807 li
192.827 160.984 li
192.65 161.165 li
193.004 160.803 mo
192.822 160.626 li
192.999 160.445 li
193.181 160.622 li
193.004 160.803 li
193.358 160.441 mo
193.177 160.264 li
193.354 160.083 li
193.535 160.26 li
193.358 160.441 li
193.712 160.079 mo
193.531 159.902 li
193.708 159.721 li
193.889 159.898 li
193.712 160.079 li
194.066 159.717 mo
193.885 159.54 li
194.062 159.358 li
194.243 159.535 li
194.066 159.717 li
194.42 159.354 mo
194.239 159.177 li
194.416 158.996 li
194.597 159.173 li
194.42 159.354 li
194.774 158.992 mo
194.593 158.815 li
194.77 158.634 li
194.951 158.811 li
194.774 158.992 li
195.128 158.63 mo
194.947 158.453 li
195.124 158.272 li
195.305 158.449 li
195.128 158.63 li
195.482 158.268 mo
195.301 158.091 li
195.478 157.91 li
195.659 158.087 li
195.482 158.268 li
195.836 157.906 mo
195.655 157.729 li
195.832 157.547 li
196.013 157.725 li
195.836 157.906 li
196.19 157.543 mo
196.009 157.366 li
196.186 157.185 li
196.367 157.362 li
196.19 157.543 li
196.544 157.181 mo
196.363 157.004 li
196.54 156.823 li
196.721 157 li
196.544 157.181 li
196.898 156.819 mo
196.717 156.642 li
196.894 156.461 li
197.075 156.638 li
196.898 156.819 li
197.252 156.457 mo
197.071 156.28 li
197.248 156.099 li
197.429 156.276 li
197.252 156.457 li
197.606 156.095 mo
197.425 155.918 li
197.602 155.737 li
197.783 155.914 li
197.606 156.095 li
197.96 155.732 mo
197.779 155.555 li
197.956 155.374 li
198.137 155.551 li
197.96 155.732 li
198.314 155.37 mo
198.133 155.193 li
198.31 155.012 li
198.491 155.189 li
198.314 155.37 li
198.668 155.008 mo
198.487 154.831 li
198.664 154.65 li
198.845 154.827 li
198.668 155.008 li
199.022 154.646 mo
198.841 154.469 li
199.018 154.288 li
199.199 154.465 li
199.022 154.646 li
199.376 154.284 mo
199.195 154.107 li
199.372 153.926 li
199.553 154.103 li
199.376 154.284 li
199.73 153.922 mo
199.549 153.745 li
199.726 153.563 li
199.907 153.74 li
199.73 153.922 li
200.084 153.559 mo
199.903 153.382 li
200.08 153.201 li
200.261 153.378 li
200.084 153.559 li
200.438 153.197 mo
200.257 153.02 li
200.434 152.839 li
200.615 153.016 li
200.438 153.197 li
200.792 152.835 mo
200.611 152.658 li
200.788 152.477 li
200.969 152.654 li
200.792 152.835 li
201.146 152.473 mo
200.965 152.296 li
201.142 152.115 li
201.323 152.292 li
201.146 152.473 li
201.5 152.111 mo
201.319 151.934 li
201.496 151.753 li
201.677 151.93 li
201.5 152.111 li
201.854 151.748 mo
201.673 151.571 li
201.85 151.39 li
202.031 151.567 li
201.854 151.748 li
202.208 151.386 mo
202.027 151.209 li
202.204 151.028 li
202.385 151.205 li
202.208 151.386 li
202.562 151.024 mo
202.381 150.847 li
202.558 150.666 li
202.739 150.843 li
202.562 151.024 li
202.916 150.662 mo
202.735 150.485 li
202.912 150.304 li
203.093 150.481 li
202.916 150.662 li
203.27 150.3 mo
203.089 150.123 li
203.266 149.942 li
203.447 150.119 li
203.27 150.3 li
203.624 149.938 mo
203.443 149.76 li
203.62 149.579 li
203.801 149.756 li
203.624 149.938 li
203.978 149.575 mo
203.797 149.398 li
203.974 149.217 li
204.155 149.394 li
203.978 149.575 li
204.332 149.213 mo
204.151 149.036 li
204.328 148.855 li
204.509 149.032 li
204.332 149.213 li
204.686 148.851 mo
204.505 148.674 li
204.682 148.493 li
204.863 148.67 li
204.686 148.851 li
205.04 148.489 mo
204.859 148.312 li
205.036 148.131 li
205.217 148.308 li
205.04 148.489 li
205.394 148.127 mo
205.213 147.95 li
205.39 147.768 li
205.571 147.945 li
205.394 148.127 li
205.748 147.764 mo
205.567 147.587 li
205.744 147.406 li
205.925 147.583 li
205.748 147.764 li
206.102 147.402 mo
205.921 147.225 li
206.098 147.044 li
206.279 147.221 li
206.102 147.402 li
206.456 147.04 mo
206.275 146.863 li
206.452 146.682 li
206.633 146.859 li
206.456 147.04 li
206.81 146.678 mo
206.629 146.501 li
206.806 146.32 li
206.987 146.497 li
206.81 146.678 li
207.164 146.316 mo
206.983 146.139 li
207.16 145.958 li
207.341 146.135 li
207.164 146.316 li
207.518 145.953 mo
207.337 145.776 li
207.514 145.595 li
207.695 145.772 li
207.518 145.953 li
207.872 145.591 mo
207.691 145.414 li
207.868 145.233 li
208.049 145.41 li
207.872 145.591 li
208.226 145.229 mo
208.045 145.052 li
208.222 144.871 li
208.403 145.048 li
208.226 145.229 li
208.58 144.867 mo
208.399 144.69 li
208.576 144.509 li
208.758 144.686 li
208.58 144.867 li
208.935 144.505 mo
208.753 144.328 li
208.93 144.147 li
209.112 144.324 li
208.935 144.505 li
209.289 144.143 mo
209.107 143.966 li
209.284 143.784 li
209.466 143.961 li
209.289 144.143 li
209.643 143.78 mo
209.461 143.603 li
209.638 143.422 li
209.819 143.599 li
209.643 143.78 li
209.997 143.418 mo
209.815 143.241 li
209.992 143.06 li
210.174 143.237 li
209.997 143.418 li
210.351 143.056 mo
210.169 142.879 li
210.346 142.698 li
210.528 142.875 li
210.351 143.056 li
210.705 142.694 mo
210.523 142.517 li
210.7 142.336 li
210.882 142.513 li
210.705 142.694 li
211.059 142.332 mo
210.878 142.155 li
211.055 141.974 li
211.236 142.151 li
211.059 142.332 li
211.413 141.969 mo
211.232 141.792 li
211.409 141.611 li
211.59 141.788 li
211.413 141.969 li
211.767 141.607 mo
211.586 141.43 li
211.763 141.249 li
211.944 141.426 li
211.767 141.607 li
212.121 141.245 mo
211.94 141.068 li
212.117 140.887 li
212.298 141.064 li
212.121 141.245 li
212.475 140.883 mo
212.294 140.706 li
212.471 140.525 li
212.652 140.702 li
212.475 140.883 li
212.829 140.521 mo
212.648 140.344 li
212.825 140.163 li
213.006 140.34 li
212.829 140.521 li
213.183 140.159 mo
213.002 139.982 li
213.179 139.8 li
213.36 139.977 li
213.183 140.159 li
213.537 139.796 mo
213.356 139.619 li
213.533 139.438 li
213.714 139.615 li
213.537 139.796 li
213.891 139.434 mo
213.71 139.257 li
213.887 139.076 li
214.068 139.253 li
213.891 139.434 li
214.245 139.072 mo
214.064 138.895 li
214.241 138.714 li
214.422 138.891 li
214.245 139.072 li
214.599 138.71 mo
214.418 138.533 li
214.595 138.352 li
214.776 138.529 li
214.599 138.71 li
214.953 138.348 mo
214.772 138.171 li
214.949 137.989 li
215.13 138.167 li
214.953 138.348 li
215.307 137.985 mo
215.126 137.808 li
215.303 137.627 li
215.484 137.804 li
215.307 137.985 li
215.661 137.623 mo
215.48 137.446 li
215.657 137.265 li
215.838 137.442 li
215.661 137.623 li
216.015 137.261 mo
215.834 137.084 li
216.011 136.903 li
216.192 137.08 li
216.015 137.261 li
216.369 136.899 mo
216.188 136.722 li
216.365 136.541 li
216.546 136.718 li
216.369 136.899 li
216.723 136.537 mo
216.542 136.36 li
216.719 136.179 li
216.9 136.356 li
216.723 136.537 li
217.077 136.174 mo
216.896 135.997 li
217.073 135.816 li
217.254 135.993 li
217.077 136.174 li
217.431 135.812 mo
217.25 135.635 li
217.427 135.454 li
217.608 135.631 li
217.431 135.812 li
217.785 135.45 mo
217.604 135.273 li
217.781 135.092 li
217.962 135.269 li
217.785 135.45 li
218.139 135.088 mo
217.958 134.911 li
218.135 134.73 li
218.316 134.907 li
218.139 135.088 li
218.493 134.726 mo
218.312 134.549 li
218.489 134.368 li
218.67 134.545 li
218.493 134.726 li
218.847 134.364 mo
218.666 134.186 li
218.843 134.005 li
219.024 134.182 li
218.847 134.364 li
219.201 134.001 mo
219.02 133.824 li
219.197 133.643 li
219.378 133.82 li
219.201 134.001 li
219.555 133.639 mo
219.374 133.462 li
219.551 133.281 li
219.732 133.458 li
219.555 133.639 li
219.909 133.277 mo
219.728 133.1 li
219.905 132.919 li
220.086 133.096 li
219.909 133.277 li
220.263 132.915 mo
220.082 132.738 li
220.259 132.557 li
220.44 132.734 li
220.263 132.915 li
220.617 132.553 mo
220.436 132.376 li
220.613 132.194 li
220.794 132.371 li
220.617 132.553 li
220.971 132.19 mo
220.79 132.013 li
220.967 131.832 li
221.148 132.009 li
220.971 132.19 li
221.325 131.828 mo
221.144 131.651 li
221.321 131.47 li
221.502 131.647 li
221.325 131.828 li
221.679 131.466 mo
221.498 131.289 li
221.675 131.108 li
221.856 131.285 li
221.679 131.466 li
222.033 131.104 mo
221.852 130.927 li
222.029 130.746 li
222.21 130.923 li
222.033 131.104 li
222.387 130.742 mo
222.206 130.565 li
222.383 130.383 li
222.564 130.561 li
222.387 130.742 li
222.741 130.379 mo
222.56 130.202 li
222.737 130.021 li
222.918 130.198 li
222.741 130.379 li
223.095 130.017 mo
222.914 129.84 li
223.091 129.659 li
223.272 129.836 li
223.095 130.017 li
223.449 129.655 mo
223.41 129.616 li
223.423 129.629 223.437 129.642 223.45 129.654 cv
223.449 129.655 li
.36408 .213107 0 0 cmyk
f
223.45 129.654 mo
223.437 129.642 223.423 129.629 223.41 129.616 cv
223.268 129.478 li
223.445 129.297 li
223.626 129.474 li
223.45 129.654 li
.904997 .707607 .0103151 0 cmyk
f
273.223 169.717 mo
273.181 169.673 li
273.363 169.498 li
273.402 169.538 li
273.341 169.596 273.281 169.655 273.223 169.717 cv
273.005 169.49 mo
272.83 169.307 li
273.013 169.132 li
273.188 169.315 li
273.005 169.49 li
272.655 169.125 mo
272.48 168.942 li
272.662 168.767 li
272.838 168.949 li
272.655 169.125 li
272.304 168.759 mo
272.129 168.576 li
272.312 168.401 li
272.487 168.584 li
272.304 168.759 li
271.954 168.394 mo
271.778 168.211 li
271.961 168.036 li
272.136 168.218 li
271.954 168.394 li
271.603 168.028 mo
271.428 167.846 li
271.61 167.67 li
271.786 167.853 li
271.603 168.028 li
271.252 167.663 mo
271.077 167.48 li
271.26 167.305 li
271.435 167.488 li
271.252 167.663 li
270.902 167.297 mo
270.726 167.115 li
270.909 166.939 li
271.084 167.122 li
270.902 167.297 li
270.551 166.932 mo
270.376 166.749 li
270.558 166.574 li
270.734 166.757 li
270.551 166.932 li
270.2 166.567 mo
270.025 166.384 li
270.208 166.208 li
270.383 166.391 li
270.2 166.567 li
269.85 166.201 mo
269.674 166.018 li
269.857 165.843 li
270.032 166.026 li
269.85 166.201 li
269.499 165.836 mo
269.324 165.653 li
269.506 165.478 li
269.682 165.66 li
269.499 165.836 li
269.148 165.47 mo
268.973 165.287 li
269.156 165.112 li
269.331 165.295 li
269.148 165.47 li
268.798 165.105 mo
268.622 164.922 li
268.805 164.747 li
268.98 164.929 li
268.798 165.105 li
268.447 164.739 mo
268.272 164.557 li
268.454 164.381 li
268.63 164.564 li
268.447 164.739 li
268.097 164.374 mo
267.921 164.191 li
268.104 164.016 li
268.279 164.199 li
268.097 164.374 li
267.746 164.008 mo
267.571 163.826 li
267.753 163.65 li
267.929 163.833 li
267.746 164.008 li
267.395 163.643 mo
267.22 163.46 li
267.403 163.285 li
267.578 163.468 li
267.395 163.643 li
267.044 163.277 mo
266.869 163.095 li
267.052 162.919 li
267.227 163.102 li
267.044 163.277 li
266.694 162.912 mo
266.519 162.729 li
266.701 162.554 li
266.877 162.737 li
266.694 162.912 li
266.343 162.547 mo
266.168 162.364 li
266.351 162.189 li
266.526 162.371 li
266.343 162.547 li
265.993 162.181 mo
265.817 161.998 li
266 161.823 li
266.175 162.006 li
265.993 162.181 li
265.642 161.816 mo
265.467 161.633 li
265.649 161.458 li
265.825 161.64 li
265.642 161.816 li
265.291 161.45 mo
265.116 161.268 li
265.299 161.092 li
265.474 161.275 li
265.291 161.45 li
264.941 161.085 mo
264.765 160.902 li
264.948 160.727 li
265.123 160.909 li
264.941 161.085 li
264.59 160.719 mo
264.415 160.537 li
264.597 160.361 li
264.773 160.544 li
264.59 160.719 li
264.239 160.354 mo
264.064 160.171 li
264.247 159.996 li
264.422 160.179 li
264.239 160.354 li
263.889 159.988 mo
263.713 159.806 li
263.896 159.63 li
264.071 159.813 li
263.889 159.988 li
263.538 159.623 mo
263.363 159.44 li
263.546 159.265 li
263.721 159.448 li
263.538 159.623 li
263.187 159.258 mo
263.012 159.075 li
263.195 158.9 li
263.37 159.082 li
263.187 159.258 li
262.837 158.892 mo
262.661 158.709 li
262.844 158.534 li
263.019 158.717 li
262.837 158.892 li
262.486 158.527 mo
262.311 158.344 li
262.494 158.169 li
262.669 158.351 li
262.486 158.527 li
262.136 158.161 mo
261.96 157.978 li
262.143 157.803 li
262.318 157.986 li
262.136 158.161 li
261.785 157.796 mo
261.61 157.613 li
261.792 157.438 li
261.968 157.62 li
261.785 157.796 li
261.434 157.43 mo
261.259 157.248 li
261.442 157.072 li
261.617 157.255 li
261.434 157.43 li
261.084 157.065 mo
260.908 156.882 li
261.091 156.707 li
261.266 156.889 li
261.084 157.065 li
260.733 156.699 mo
260.558 156.517 li
260.74 156.341 li
260.916 156.524 li
260.733 156.699 li
260.382 156.334 mo
260.207 156.151 li
260.39 155.976 li
260.565 156.159 li
260.382 156.334 li
260.032 155.969 mo
259.856 155.786 li
260.039 155.61 li
260.214 155.793 li
260.032 155.969 li
259.681 155.603 mo
259.506 155.42 li
259.688 155.245 li
259.864 155.428 li
259.681 155.603 li
259.33 155.238 mo
259.155 155.055 li
259.338 154.879 li
259.513 155.062 li
259.33 155.238 li
258.98 154.872 mo
258.804 154.689 li
258.987 154.514 li
259.163 154.697 li
258.98 154.872 li
258.629 154.507 mo
258.454 154.324 li
258.636 154.149 li
258.812 154.331 li
258.629 154.507 li
258.278 154.141 mo
258.103 153.958 li
258.286 153.783 li
258.461 153.966 li
258.278 154.141 li
257.928 153.776 mo
257.753 153.593 li
257.935 153.418 li
258.111 153.6 li
257.928 153.776 li
257.577 153.41 mo
257.402 153.228 li
257.585 153.052 li
257.76 153.235 li
257.577 153.41 li
257.227 153.045 mo
257.051 152.862 li
257.234 152.687 li
257.409 152.87 li
257.227 153.045 li
256.876 152.679 mo
256.701 152.497 li
256.883 152.321 li
257.059 152.504 li
256.876 152.679 li
256.525 152.314 mo
256.35 152.131 li
256.533 151.956 li
256.708 152.139 li
256.525 152.314 li
256.175 151.949 mo
255.999 151.766 li
256.182 151.59 li
256.357 151.773 li
256.175 151.949 li
255.824 151.583 mo
255.649 151.4 li
255.831 151.225 li
256.007 151.408 li
255.824 151.583 li
255.473 151.218 mo
255.298 151.035 li
255.481 150.86 li
255.656 151.042 li
255.473 151.218 li
255.123 150.852 mo
254.947 150.669 li
255.13 150.494 li
255.305 150.677 li
255.123 150.852 li
254.772 150.487 mo
254.597 150.304 li
254.779 150.129 li
254.955 150.311 li
254.772 150.487 li
254.421 150.121 mo
254.246 149.939 li
254.429 149.763 li
254.604 149.946 li
254.421 150.121 li
254.071 149.756 mo
253.895 149.573 li
254.078 149.398 li
254.253 149.58 li
254.071 149.756 li
253.72 149.39 mo
253.545 149.208 li
253.727 149.032 li
253.903 149.215 li
253.72 149.39 li
253.369 149.025 mo
253.194 148.842 li
253.377 148.667 li
253.552 148.85 li
253.369 149.025 li
253.019 148.659 mo
252.844 148.477 li
253.026 148.301 li
253.202 148.484 li
253.019 148.659 li
252.668 148.294 mo
252.493 148.111 li
252.676 147.936 li
252.851 148.119 li
252.668 148.294 li
252.317 147.929 mo
252.142 147.746 li
252.325 147.571 li
252.5 147.753 li
252.317 147.929 li
251.967 147.563 mo
251.792 147.38 li
251.974 147.205 li
252.15 147.388 li
251.967 147.563 li
251.616 147.198 mo
251.441 147.015 li
251.624 146.84 li
251.799 147.022 li
251.616 147.198 li
251.266 146.832 mo
251.09 146.649 li
251.273 146.474 li
251.448 146.657 li
251.266 146.832 li
250.915 146.467 mo
250.74 146.284 li
250.922 146.109 li
251.098 146.291 li
250.915 146.467 li
250.564 146.101 mo
250.389 145.919 li
250.572 145.743 li
250.747 145.926 li
250.564 146.101 li
250.214 145.736 mo
250.038 145.553 li
250.221 145.378 li
250.396 145.561 li
250.214 145.736 li
249.863 145.37 mo
249.688 145.188 li
249.87 145.012 li
250.046 145.195 li
249.863 145.37 li
249.512 145.005 mo
249.337 144.822 li
249.52 144.647 li
249.695 144.83 li
249.512 145.005 li
249.162 144.64 mo
248.986 144.457 li
249.169 144.281 li
249.344 144.464 li
249.162 144.64 li
248.811 144.274 mo
248.636 144.091 li
248.818 143.916 li
248.994 144.099 li
248.811 144.274 li
248.46 143.909 mo
248.285 143.726 li
248.468 143.55 li
248.643 143.733 li
248.46 143.909 li
248.11 143.543 mo
247.934 143.36 li
248.117 143.185 li
248.293 143.368 li
248.11 143.543 li
247.759 143.178 mo
247.584 142.995 li
247.766 142.82 li
247.942 143.002 li
247.759 143.178 li
247.408 142.812 mo
247.233 142.629 li
247.416 142.454 li
247.591 142.637 li
247.408 142.812 li
247.058 142.447 mo
246.883 142.264 li
247.065 142.089 li
247.241 142.271 li
247.058 142.447 li
246.707 142.081 mo
246.532 141.899 li
246.715 141.723 li
246.89 141.906 li
246.707 142.081 li
246.357 141.716 mo
246.181 141.533 li
246.364 141.358 li
246.539 141.541 li
246.357 141.716 li
246.006 141.35 mo
245.831 141.168 li
246.013 140.992 li
246.189 141.175 li
246.006 141.35 li
245.655 140.985 mo
245.48 140.802 li
245.663 140.627 li
245.838 140.81 li
245.655 140.985 li
245.305 140.619 mo
245.129 140.437 li
245.312 140.261 li
245.487 140.444 li
245.305 140.619 li
244.954 140.254 mo
244.779 140.071 li
244.961 139.896 li
245.137 140.079 li
244.954 140.254 li
244.603 139.889 mo
244.428 139.706 li
244.611 139.531 li
244.786 139.713 li
244.603 139.889 li
244.253 139.523 mo
244.077 139.34 li
244.26 139.165 li
244.435 139.348 li
244.253 139.523 li
243.902 139.158 mo
243.727 138.975 li
243.909 138.8 li
244.085 138.982 li
243.902 139.158 li
243.551 138.792 mo
243.376 138.609 li
243.559 138.434 li
243.734 138.617 li
243.551 138.792 li
243.201 138.427 mo
243.025 138.244 li
243.208 138.069 li
243.383 138.251 li
243.201 138.427 li
242.85 138.061 mo
242.675 137.879 li
242.857 137.703 li
243.033 137.886 li
242.85 138.061 li
242.499 137.696 mo
242.324 137.513 li
242.507 137.338 li
242.682 137.521 li
242.499 137.696 li
242.149 137.33 mo
241.973 137.148 li
242.156 136.972 li
242.331 137.155 li
242.149 137.33 li
241.798 136.965 mo
241.623 136.782 li
241.805 136.607 li
241.981 136.79 li
241.798 136.965 li
241.447 136.6 mo
241.272 136.417 li
241.455 136.241 li
241.63 136.424 li
241.447 136.6 li
241.097 136.234 mo
240.922 136.051 li
241.104 135.876 li
241.28 136.059 li
241.097 136.234 li
240.746 135.869 mo
240.571 135.686 li
240.754 135.511 li
240.929 135.693 li
240.746 135.869 li
240.396 135.503 mo
240.22 135.32 li
240.403 135.145 li
240.578 135.328 li
240.396 135.503 li
240.045 135.138 mo
239.87 134.955 li
240.052 134.78 li
240.228 134.962 li
240.045 135.138 li
239.694 134.772 mo
239.519 134.589 li
239.702 134.414 li
239.877 134.597 li
239.694 134.772 li
239.344 134.407 mo
239.168 134.224 li
239.351 134.049 li
239.526 134.231 li
239.344 134.407 li
238.993 134.041 mo
238.818 133.859 li
239 133.683 li
239.176 133.866 li
238.993 134.041 li
238.642 133.676 mo
238.467 133.493 li
238.65 133.318 li
238.825 133.501 li
238.642 133.676 li
238.292 133.31 mo
238.116 133.128 li
238.299 132.952 li
238.474 133.135 li
238.292 133.31 li
237.941 132.945 mo
237.766 132.762 li
237.948 132.587 li
238.124 132.77 li
237.941 132.945 li
237.59 132.579 mo
237.415 132.397 li
237.598 132.221 li
237.773 132.404 li
237.59 132.579 li
237.24 132.214 mo
237.064 132.031 li
237.247 131.856 li
237.422 132.039 li
237.24 132.214 li
236.889 131.849 mo
236.714 131.666 li
236.896 131.491 li
237.072 131.673 li
236.889 131.849 li
236.538 131.483 mo
236.363 131.3 li
236.546 131.125 li
236.721 131.308 li
236.538 131.483 li
236.188 131.118 mo
236.012 130.935 li
236.195 130.76 li
236.37 130.942 li
236.188 131.118 li
235.837 130.752 mo
235.662 130.569 li
235.844 130.394 li
236.02 130.577 li
235.837 130.752 li
235.486 130.387 mo
235.311 130.204 li
235.494 130.029 li
235.669 130.211 li
235.486 130.387 li
235.136 130.021 mo
234.961 129.839 li
235.143 129.663 li
235.319 129.846 li
235.136 130.021 li
234.785 129.656 mo
234.766 129.636 li
234.793 129.61 234.82 129.584 234.847 129.559 cv
234.881 129.526 234.915 129.493 234.948 129.46 cv
234.968 129.481 li
234.785 129.656 li
.36408 .213107 0 0 cmyk
f
234.766 129.636 mo
234.61 129.473 li
234.793 129.298 li
234.948 129.46 li
234.915 129.493 234.881 129.526 234.847 129.559 cv
234.82 129.584 234.793 129.61 234.766 129.636 cv
.904997 .707607 .0103151 0 cmyk
f
273.356 169.856 mo
273.223 169.717 li
273.281 169.655 273.341 169.596 273.402 169.538 cv
273.539 169.68 li
273.356 169.856 li
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
/VALTWF+Calibri*1 uf
/VALTWF+Calibri uf
/PBAAAA+Calibri uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
