%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: water_distances.pdf
%%Creator: Adobe Acrobat 11.0.23
%%For: Gollum
%%CreationDate: 2/27/2018, 5:56:27 PM
%%BoundingBox: 0 0 288 216
%%HiResBoundingBox: 0 0 288 216
%%CropBox: 0 0 288 216
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1093 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.4-c006 80.159825, 2016/09/16-03:31:08        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   xmp:ModifyDate="2018-02-27T17:56:14-05:00"
   xmp:CreateDate="2018-02-27T17:54:55-05:00"
   xmp:MetadataDate="2018-02-27T17:56:14-05:00"
   xmp:CreatorTool="Acrobat PDFMaker 11 for PowerPoint"
   xmpMM:DocumentID="uuid:7ba52d38-78ab-4c62-9a69-dd82e84e2688"
   xmpMM:InstanceID="uuid:d7b0a9ba-3121-4bf9-b991-c1e1b7150fb5"
   dc:format="application/pdf"
   pdf:Producer="Adobe PDF Library 11.0">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">PowerPoint Presentation</rdf:li>
    </rdf:Alt>
   </dc:title>
   <dc:creator>
    <rdf:Seq>
     <rdf:li>Volodymyr Sakun</rdf:li>
    </rdf:Seq>
   </dc:creator>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 2 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -216 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 216 li
288 216 li
288 0 li
cp
clp
gsave
0 216 mo
288 216 li
288 0 li
0 0 li
0 216 li
clp
-67.5165 220.088 mo
361.492 220.088 li
361.492 -21.2298 li
-67.5165 -21.2298 li
-67.5165 220.088 li
false sop
0 0 0 0 cmyk
f
62.0442 70.9534 mo
62.0442 67.3994 65.0334 64.5183 68.7206 64.5183 cv
72.4079 64.5183 75.3971 67.3994 75.3971 70.9534 cv
75.3971 74.5076 72.4079 77.3886 68.7206 77.3886 cv
65.0334 77.3886 62.0442 74.5076 62.0442 70.9534 cv
0 1 1 0 cmyk
ef
62.0442 70.9534 mo
61.8296 70.9534 li
61.8295 69.1155 62.6035 67.4504 63.8508 66.2486 cv
65.098 65.0464 66.8207 64.3038 68.7206 64.3038 cv
70.6205 64.3038 72.3433 65.0464 73.5904 66.2486 cv
74.8378 67.4504 75.6117 69.1155 75.6115 70.9534 cv
75.6117 72.7914 74.8378 74.4565 73.5904 75.6582 cv
72.3433 76.8605 70.6205 77.6032 68.7206 77.6032 cv
66.8207 77.6032 65.098 76.8605 63.8508 75.6582 cv
62.6035 74.4565 61.8295 72.7914 61.8296 70.9534 cv
62.0442 70.9534 li
62.2587 70.9534 li
62.2589 72.6696 62.9795 74.2221 64.1485 75.3494 cv
65.3178 76.4761 66.9333 77.174 68.7206 77.1741 cv
70.5079 77.174 72.1235 76.4761 73.2927 75.3494 cv
74.4618 74.2221 75.1824 72.6696 75.1826 70.9534 cv
75.1824 69.2374 74.4618 67.6849 73.2927 66.5576 cv
72.1235 65.4307 70.5079 64.7328 68.7206 64.7328 cv
66.9333 64.7328 65.3178 65.4307 64.1485 66.5576 cv
62.9795 67.6849 62.2589 69.2374 62.2587 70.9534 cv
62.0442 70.9534 li
1 .816159 .15967 .0319219 cmyk
f
32.0136 117.125 mo
32.0136 113.571 35.0028 110.69 38.69 110.69 cv
42.3773 110.69 45.3665 113.571 45.3665 117.125 cv
45.3665 120.68 42.3773 123.561 38.69 123.561 cv
35.0028 123.561 32.0136 120.68 32.0136 117.125 cv
0 1 1 0 cmyk
ef
32.0135 117.125 mo
31.7991 117.125 li
31.7989 115.288 32.5729 113.622 33.8202 112.421 cv
35.0674 111.218 36.7901 110.476 38.69 110.476 cv
40.5899 110.476 42.3126 111.218 43.5598 112.421 cv
44.8072 113.622 45.5811 115.288 45.5809 117.125 cv
45.5811 118.963 44.8072 120.629 43.5598 121.83 cv
42.3126 123.033 40.5899 123.775 38.69 123.775 cv
36.7901 123.775 35.0674 123.033 33.8202 121.83 cv
32.5729 120.629 31.7989 118.963 31.7991 117.125 cv
32.0135 117.125 li
32.2281 117.125 li
32.2282 118.842 32.9489 120.394 34.1179 121.521 cv
35.2871 122.648 36.9027 123.346 38.69 123.346 cv
40.4773 123.346 42.0929 122.648 43.2621 121.521 cv
44.4312 120.394 45.1518 118.842 45.152 117.125 cv
45.1518 115.409 44.4312 113.857 43.2621 112.73 cv
42.0929 111.603 40.4773 110.905 38.69 110.905 cv
36.9027 110.905 35.2871 111.603 34.1179 112.73 cv
32.9489 113.857 32.2282 115.409 32.2281 117.125 cv
32.0135 117.125 li
1 .816159 .15967 .0319219 cmyk
f
7.82816 145.118 mo
7.82816 143.342 9.26894 141.901 11.0457 141.901 cv
12.8225 141.901 14.2633 143.342 14.2633 145.118 cv
14.2633 146.895 12.8225 148.336 11.0457 148.336 cv
9.26894 148.336 7.82816 146.895 7.82816 145.118 cv
.808743 .585351 0 0 cmyk
ef
7.82816 145.118 mo
7.61369 145.118 li
7.61387 143.223 9.1504 141.686 11.0457 141.686 cv
12.9411 141.686 14.4776 143.223 14.4778 145.118 cv
14.4777 147.014 12.9411 148.55 11.0457 148.55 cv
9.1504 148.55 7.61387 147.014 7.61369 145.118 cv
7.82816 145.118 li
8.04273 145.118 li
8.04571 146.777 9.38749 148.118 11.0457 148.121 cv
12.704 148.118 14.0458 146.777 14.0488 145.118 cv
14.0458 143.46 12.704 142.118 11.0457 142.115 cv
9.38749 142.118 8.04571 143.46 8.04273 145.118 cv
7.82816 145.118 li
1 .816159 .15967 .0319219 cmyk
f
35.4993 46.2319 mo
35.4993 44.455 36.94 43.0143 38.7168 43.0143 cv
40.4936 43.0143 41.9344 44.455 41.9344 46.2319 cv
41.9344 48.0087 40.4936 49.4494 38.7168 49.4494 cv
36.94 49.4494 35.4993 48.0087 35.4993 46.2319 cv
.808743 .585351 0 0 cmyk
ef
35.4993 46.2319 mo
35.2848 46.2319 li
35.2849 44.3365 36.8214 42.8 38.7168 42.7998 cv
40.6122 42.8 42.1487 44.3365 42.1489 46.2319 cv
42.1487 48.1272 40.6122 49.6637 38.7168 49.6639 cv
36.8214 49.6637 35.2849 48.1272 35.2848 46.2319 cv
35.4993 46.2319 li
35.7137 46.2319 li
35.7167 47.8901 37.0586 49.2319 38.7168 49.235 cv
40.3751 49.2319 41.7169 47.8901 41.7198 46.2319 cv
41.7169 44.5736 40.3751 43.2318 38.7168 43.2289 cv
37.0586 43.2318 35.7167 44.5736 35.7137 46.2319 cv
35.4993 46.2319 li
1 .816159 .15967 .0319219 cmyk
f
93.7909 46.2319 mo
93.7909 44.455 95.2316 43.0143 97.0084 43.0143 cv
98.7852 43.0143 100.226 44.455 100.226 46.2319 cv
100.226 48.0087 98.7852 49.4494 97.0084 49.4494 cv
95.2316 49.4494 93.7909 48.0087 93.7909 46.2319 cv
.808743 .585351 0 0 cmyk
ef
93.7908 46.2319 mo
93.5763 46.2319 li
93.5765 44.3365 95.113 42.8 97.0084 42.7998 cv
98.9038 42.8 100.44 44.3365 100.44 46.2319 cv
100.44 48.1272 98.9038 49.6637 97.0084 49.6639 cv
95.113 49.6637 93.5765 48.1272 93.5763 46.2319 cv
93.7908 46.2319 li
94.0053 46.2319 li
94.0083 47.8901 95.3501 49.2319 97.0084 49.235 cv
98.6666 49.2319 100.008 47.8901 100.011 46.2319 cv
100.008 44.5736 98.6666 43.2318 97.0084 43.2289 cv
95.3501 43.2318 94.0083 44.5736 94.0053 46.2319 cv
93.7908 46.2319 li
1 .816159 .15967 .0319219 cmyk
f
8.47168 87.2021 mo
8.47168 85.4253 9.91246 83.9847 11.6893 83.9847 cv
13.4661 83.9847 14.9068 85.4253 14.9068 87.2021 cv
14.9068 88.979 13.4661 90.4197 11.6893 90.4197 cv
9.91246 90.4197 8.47168 88.979 8.47168 87.2021 cv
.808743 .585351 0 0 cmyk
ef
8.47168 87.2021 mo
8.2572 87.2021 li
8.25738 85.3068 9.79391 83.7703 11.6893 83.7701 cv
13.5846 83.7703 15.1211 85.3068 15.1213 87.2021 cv
15.1211 89.0976 13.5846 90.6341 11.6893 90.6343 cv
9.79391 90.6341 8.25738 89.0976 8.2572 87.2021 cv
8.47168 87.2021 li
8.68615 87.2021 li
8.68923 88.8604 10.031 90.2023 11.6893 90.2052 cv
13.3475 90.2023 14.6893 88.8604 14.6923 87.2021 cv
14.6893 85.5439 13.3475 84.2021 11.6893 84.1991 cv
10.031 84.2021 8.68923 85.5439 8.68615 87.2021 cv
8.47168 87.2021 li
1 .816159 .15967 .0319219 cmyk
f
.750271 .679713 .654902 .901945 cmyk
%ADOBeginSubsetFont: PBAAAA+Calibri Initial
ct_T42Dict begin
-0.5 -0.305 1.238 0.961
 256 array 0 1 255 {1 index exch /.notdef put} for  /PBAAAA+Calibri
Type42DictBegin
[<00010000000c000c000c000c4f532f32f9e5b7d7000000cc000000606376
7420b09bc4d20000012c0000051c6670676df6f64d0c000006480000091a
676c7966bb6e81290000b18c0000175868656164e625fe3e00000f640000
0036686865610dad124400000f9c00000024686d74780b0cadc000000fc0
00003c4a6c6f63610123b65000004c0c00003c8c6d617870214303970000
8898000000206e616d65cf334127000088b8000004c1707265706baf02fe
00008d7c00002410676469720000000000000000000000000003042b0190
00050008059905330000011e05990533000003d0008602000800020f0502
020204030204e10002ff4000acff00000009000000004d53202000400000
feff0600fe0001c4079e02262000019f0000000003b7050e000000200003
0000079e0000fe930000000000000000000000000050006a007300800080
0086008d009300bf00db006200830093009900a000a600a900b000c100c9
00d700000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000fe79056d000c03b700060013
0000fffaffedfea6ffedfeb8050e000600130000fffaffedfe93050e0013
0420000600130000fffaffedff10ffee050e00130420000600130000fffa
ffeefe93ff10feb80612000a050e0006000d02d2fffafff301fdfffa023f
0006000dff36fffafff302870006000f0000fffafff1079efeaffea70000
0000000000000000000000500051005a005b005c005d0060006100620064
00680069006a006b006c006d006e00680069006e00600067006e00660068
005f00610063006400660068006a006b006c006d006e006f0070006f0072
0074007500760076007000720073007400750076006f0070007100720073
00750077007700780079007a007b007c007d007b007c007d00770079007a
007c0078007a007c007d0078007d007e007f008000810082007e007f0081
0082007e007f008000810082008300840085008600870088008900830084
008500860087008800890083008400850086008700880089008900860087
00880089008a008b008c008d008e008f008a008b008c008d008e008f008a
008b008c008d008e008f008d008a008b008c008d008e008f009000900091
0092009300940095009600980099009b009c009000910092009300940095
0096009700980099009a009e009f00a60090009100950098009f00900091
0096009700bc00c600b500ae00af00b6006800690063006a006f00700071
006f0070007100720066006c006d00700079007c007f0083008600870088
0089008a0074007500760077007a007b007c007d007e008200850086008a
0088008900830078007b00820083008600870088008900760079007a007c
007d007e0083008500880089008a0073007400750077007a007d00880089
008a008b008c008d008e00900094008b008c008d00910092009300940095
008c008d00910095008f009000910092009300940095008b008c008d008e
008f009000910092009300940095008b008c008d008e008f009000910092
00930096009700980099009c0096009700980099009a009b009c00960099
009a009c0096009700980099009a009b009c009700980099009a009b009c
009700980099009a009b009c0096009d00a000a1009d009e009f00a000a1
00a2009d009f00a000a1009f00a2009d009e009f00a000a100a2009d009e
00a000a1009d009e00a000a2009d00a300a400a500a600a700a300a400a6
00a700a300a400a500a600a700a600a300a700a800a900aa00ab00ac00ac
00a800a900aa00ab00ac00a800a900aa00ab00ac00a800aa00ab00ac00ae
00ad00ae00af00b000b100b200b300b400b500b600b700b800ad00ae00ad
00ae00af00b000b100b200b300b400b500b600b700b800ad00ae00af00b0
00b100b200b300b400b500b600b700b800b300ae00af00b000b200b500b6
00b700b800b900ba00bb00bc00be00c000c100c200c200b900ba00bb00bc
00bd00be00bf00c000c100c200c400ba00bb00be00bf00c000c200c300c4
00b900ba00bf00c000c200c600c700c900ca00cb00cc00cf00c500c700ce
00c500c700c800cf00d000d200d300d7010d00d000d100e900d000fd00d0
05e4000e0041000005ba009c009c005e005e4047645f5e5d5c5b5a595855
54535251504f4e4d4c4b4a494847464544434241403f3e3d3c3b3a393837
36352f2e2d2c2826252423221f181411100f0d0b0a090807060504030201
002c4523466020b02660b004262348482d2c452346236120b02661b00426
2348482d2c45234660b0206120b04660b004262348482d2c4523462361b0
206020b02661b02061b004262348482d2c45234660b0406120b06660b004
262348482d2c4523462361b0406020b02661b04061b004262348482d2c01
10203c003c2d2c20452320b0cd442320b8015a51582320b08d44235920b0
ed51582320b04d44235920b0042651582320b00d44235921212d2c202045
18684420b001602045b04676688a4560442d2c01b10b0a432343650a2d2c
00b10a0b4323430b2d2c00b0282370b101283e01b0282370b10228453ab1
0200080d2d2c2045b00325456164b050515845441b2121592d2c2045b000
4360442d2c01b00643b00743650a2d2c2069b04061b0008b20b12cc08a8c
b8100062602b0c642364615c58b00361592d2c8a03458a8a87b0112bb029
2344b0297ae4182d2c4565b02c234445b02b23442d2c4b525845441b2121
592d2c01b005251023208af500b0016023edec2d2c01b005251023208af5
00b0016123edec2d2c01b0062510f500edec2d2c20b001600110203c003c
2d2c20b001610110203c003c2d2c00b00743b006430b2d2c21210c642364
8bb84000622d2c21b08051580c6423648bb82000621bb200402f2b59b002
602d2c21b0c051580c6423648bb81555621bb200802f2b59b002602d2c0c
6423648bb84000626023212d2c4523456023456023456023766818b08062
202d2cb00426b00426b00425b0042545234520b003266062636820b00326
61658a2344442d2c2045b0005458b040442045b04061441b2121592d2c45
b1302f4523456160b0016069442d2c4b5158b02f2370b01423421b212159
2d2c4b515820b0032545695358441b2121591b2121592d2c45b01443b000
6063b0016069442d2cb02f45442d2c452320458a60442d2c45234560442d
2c4b235158b90033ffe0b134201bb3330034005944442d2cb0164358b003
26458a586466b01f601b64b020606620581b21b04059b001615923586559
b02923442310b029e01b2121212121592d2cb0164358b004254564b02060
6620581b21b04059b0016123586559b0292344b00425b00725082058021b
0359b0052510b004252046b0042523423cb0072510b006252046b00425b0
016023423c2058011b0059b0052510b00425b029e0b0072510b00625b029
e0b00425b00725082058021b0359b00425b003254348b00625b00325b001
6043481b2159212121212121212d2cb0164358b004254564b02060662058
1b21b04059b0016123581b6559b0292344b00525b00825082058021b0359
b0042510b005252046b0042523423cb00425b0072508b0072510b0062520
46b00425b0016023423c2058011b0059b0042510b00525b029e0b0292045
6544b0072510b00625b029e0b00525b00825082058021b0359b00525b003
254348b00425b0072508b00625b00325b0016043481b2159212121212121
212d2c02b00425202046b004252342b0052508b003254548212121212d2c
02b0032520b0042508b0022543482121212d2c452320451820b000502058
23652359236820b040505821b04059235865598a60442d2c4b53234b515a
5820458a60441b2121592d2c4b545820458a60441b2121592d2c4b53234b
515a58381b2121592d2cb000214b5458381b2121592d2cb002435458b046
2b1b21212121592d2cb002435458b0472b1b212121592d2cb002435458b0
482b1b21212121592d2cb002435458b0492b1b212121592d2c208a08234b
538a4b515a5823381b2121592d2c0020b200400325b0062649618b381234
2d2c014623466023466123201020468a61b8ff80628ab140408a70456068
3a2d2c208a2349648a2353583c1b21592d2c4b52587d1b7a592d2cb01200
4b014b54422d2cb1020042b123018851b1400188535a58b9100000208854
58b202010243604259b12401885158b920000040885458b2020202436042
b12401885458b2022002436042004b014b5258b2020802436042591bb940
000080885458b202040243604259b94000008063b80100885458b2020802
43604259b94000010063b80200885458b202100243604259b94000020063
b80400885458b202400243604259595959592d2c451868234b5158232045
2064b04050587c59688a6059442d2cb00016b00225b0022501b001233e00
b002233eb10102060cb00a236542b00b234201b001233f00b002233fb101
02060cb006236542b0072342b00116012d2c20b82000628a6023622d2cb0
072558001b0159b0042510b00325b0022520b8ffff545821cd1bed5921b0
06255cb006255a58b0092b5920b005254ab0042547b004254760b0062547
b0806361b00225b0005558b00325b00725496359b0082558001b0159b004
25b0062549b009255cb009255a58b0092b59b0072546b0806361b0032520
b0005558631b2159612320b0005558b080631b21b08059b0592bb006255c
586959b00425202010b00048233ab0062658001b0159b0052658b003252f
598a12233221212d2cb00625b00a2587b00625b009254ab0005358b00625
b00a251bb00925b0072559b00225b00225070cb005256323b00625636020
b94000040063535821b00426b00426b00a1bb94000040063655158b00426
65b0042665b00a1bb00426b00426b000b00325b003250b0d0ab0092eb007
25b007250b0d0ab00b2eb00525b0052507595920b0005558b00525b00525
87b00725b007250bb0092510b00b25b0092620b8ffff545821cd1bed59b0
0525b0052507b00825b00b254923b00625b0062587b00a2510b00b25c159
20b00051b800522378b00161b00225b00725b0072507b00a25b00d254961
b08062b00525b005250bb00a252338b00625b0062587b00825b008250bb0
0a2510b00b25c4b00625b0062507b00925b00c2549b0032554b8ffa72379
2121212121212121212121212d2c23b0005458b9400000001bb900004000
598ab0005458b9400000001bb90000400059b05b2b2d2c08b0005458b940
0000001bb900004000590db05b2b2d2c8a8a080d8ab0005458b940000000
1bb90000400059b05b2b2d2cb00426b00426080db00426b00426080db05b
2b2d2c204569442d00000001000000059eb828685d5a5f0f3cf500190800
00000000bbeb7ccc00000000c522987afbfafd8b09ec07b6000000090002
000100000000000100000600fe0001c40aa0fbfafaa009ec000100000000
000000000000000000000f03040e0000000000000000000001cf000004a1
002304a1002304a1002304a1002304a1002304a1002304a1002304a10023
04a1002304a1002304a10023061bffcc061bffcc045a00ac044400610444
00610444006104440061044400610444006104ec00ac04ec009704ff001b
04ff001b03e800ac03e8004503e800ac03e8004603e8004603e8006303e8
005f03e8008103e800ac03e800ac03ad00ac050c005b050c005b050c005b
050c005b050c005b04fc00ac04fc00ac05400020020400ac0204ff4a0204
00280204ff390204ff310204ff500204ff4f0204ff7b0204001e02040027
049200ac028d0007028dffa9042800ac042800ac035d00ac035d00810362
00ac035d00ac0370001c045e00ac06d700ac052a00ac052a00ac052a00ac
052a00ac052a00ac050700ac054c0063054c0063054c0063054c0063054c
0063054c0063054c0063054c0063054c0063054f0063054f006306ef0063
042200ac042200ac05620063045800ac045800ac04580053045800ac03ad
004703ad004703ad001503ad001803ad004703ad004703e6000f03e6000f
03e6000f03e6000f052200aa052200aa052200aa052200aa052200aa0522
00aa052200aa052200aa052200aa052200aa052200aa048a0022071e003d
071e003d071e003d071e003d071e003d0427003003e6001e03e6001e03e6
001e03e6001e03e6001e03bf003b03bf003b03bf001a03bf003b03f40010
03f4001003f4001003f4001003f4001003f4001003f4001003f4001003f4
001003f4001003f40010055cffe2055cffe2040400a103cb006d03cb006d
03cb006d03cb006d03cb006d03cb006d046500a10465006a047700320477
0032038000a103800030038000a103800020038000200380002c03800029
03800042038000a1038000a1035000a10482006c0482006c0482006c0482
006c0482006c047800a10478008c049d004001ec00a101ecff5801ec0019
01ecff4801ecff2701ecff5501ecff5201ecff7101ec001101ec0018041b
00a1023e0000023eff8c03c900a103c900a102e000a102e0008702e600a1
02e000a102f0003203d500a1060600a1049100a1049100a1049100990491
0078049100a1046600a104aa006604aa006604aa006604aa006604aa0066
04aa006604aa006604aa006604aa006604ba006604ba00660606006603c5
00a103c500a104b1006603ed00a103ed00a103ed004503ed00a1034f0049
034f0049034ffff5034ffff6034f0049034f00490359001c0359fffe0359
001c0359001c048d009f048d009c048d009f048d0097048d0075048d009f
048d009f048d009f048d009f048d009f048d009f03fd0021063e0037063e
0037063e0037063e0037063e003703cc0036038300100383001003830010
03830010038300100369004403690044036900080369004403d5005c03d5
005c03d5005c03d5005c03d5001e03d5005c03d5005c03d5005c03d5005c
03d5005c03d5005c062f005c062f005c043400990362005a0362005a0362
004e036200570362005a0362005a076f005a06dd005a0601005a0601005a
04340060048c0060046a00600434006103fb005d03fb005d03fb005d03fb
005d03fb005d03fb005d03fb005d03fb005d03fb005d03fb005d02710025
069a002508d5002504ab0025069b002508d50025043c0025043c0025043c
0025043c0025044f0025044f0025044f0025044f0025043c0025043c0025
067600250676002506760025067600250689002506890025068900250689
00250676002506760025043c0025043c0025067600250609002508430025
043c0025043c002504830025043c00250676002504ed002504ed00250513
00250728002503c4003503c4003503c4003503c4003503c4003504340060
04340060043400600434006004340060043400990434ffad0443fff901d6
008501d6ff6e01d6000f01d6ff5a01d6ff2001d6ff7201d6ff5801d6ff67
01d6001101d6009903c00085041e008801eaffd501eaffd501eaff6303a3
009903a3009903a3009901d6009901d6002a021c009901d6004b01fb001c
02fd0099066400990434009904340099043400990434004e0434009904a2
ff9d043400990438005a0438005a0438005a0438005a0438004f0438005a
0438005a0438005a0438005a043c005a043c005a06cc005a043400990434
00990434006002ca009902ca009902cafff902ca006e0321005103210051
0321fffe0321fffd032100510321005105ae005105ae00510438009901f1
009902ae002102c4002102ae002102bc002604e600210475002104750021
047500210475002104750021047500210475002104750021047500210475
002105130021074b002106d9002106d9002106d9002106d9002106d90021
06d9002106d9002106d9002106d9002106d90021043400940434008e0434
0094043400860434004d0434008904340086043400940434009404340094
04340094039d002205b8003505b8003505b8003505b8003505b800350377
0029039f0022039f0022039f0022039f0022039f00220329005903290059
032900070329005903380072036100640378005d02ac004402e5006c024e
004402e5004802b8004701c100240297002a02e9006c01630061016dffd8
0297006c015e006c0456006c02e6006c02e6004502e5006c02e5004801f6
006c0230004201e3002302e9006c0285001f03ef002c027e00280286001f
023700420254000002750000029400000000fd080000fce8025600000275
0000029400000000fd080000fce803290000035f0000039400000000fc9f
0000fc6703290000035f0000039400000000fc9d0000fc6901ff0000039a
000003a2000003a800000000fc650000fc600324000002f5000003460000
036700000000fca00000fc7e0327000003490000036a00000000fc9d0000
fc7d030c0000030f0000031100000000fcac0000fca90291000002980000
02a000000000fce90000fce202cf000002c2000002b5000003c1000003e1
0000040000000000fc520000fc3101ce000001d6000001ce000001ce0000
0000fd4d0000fd4d027500840000fd7a027f00840000fd7601f700840231
000004a1002304a1ff89045a00ac035300ac0484003a03e800ac03e8fec7
03bf003b04fc00ac04fcfe9e054c0063020400ac0204feb20204ff520428
00ac0495002406d700ac052a00ac03ef0053054c0063054cff1604fc00ac
042200ac03ab004603e6000f03e6001e03e6fe6e03e6001e061300000427
0030060000900550005e0550fef903f4001003f40010040400a102fb00a1
03c90023038000a1038000a103690044047800a1047800a104b4006601ec
00a101ec000001ecff5403c900a103e10011060600a1049100a10387005e
04aa006604aa0066047800a103c500a1035b004b0359001c038300100383
0010038300100552000003cc00360558008704b1006604b10066048a0061
048a00610440009904320064039200180430000003a5005903a5005902c8
004e044c0099044c00990441006004780006023200940232ffec0232ff7a
0232ff0f03a3009903b4000004660099039700220302004d0303004d0438
005a0438005a046c002804120076044100590349005c0319000304550090
045500900455007d0455001605360055053b00550369001205a900940592
006405920064028900000000fd0a03f400000000fc360205009702050097
020500970224004801ff006e01ff006e04a10023044d00ad045a00ac0370
00ac037000ac037600ac0527000303e800ac03e8004503e8006106680055
03ca004b052200ac052200ac052200ac020400ac0204ff50028d00070458
00ac045800ac04e3000306fa000306d700ac04fc00ac070300ac054c0063
054c006304f900ac042200ac0444006103ad004703e6000f0438000f0438
000f04b800220594000004270030051c00ac04f500ac0472007406f200ac
071e00ac04eb000f061800ac044000ac0462005d04610062070800ac0471
005304ff000f04f2000f0504000003f4001003ee00a2040400a1031400a1
031400a1032700a10480000e038000a1038000300380002c057800440380
0057048900a1048900960489009501ec00a101ecff55023e000003ca00a1
03ca00a104320001060600a1047800a104aa006604a90066046a00a103c5
00a103cb006d034f00490359001c039d001e039d001b042f0022050a0000
03cc0036048e00a1046900a103fa006d062300a1064500a1045f00170583
00a103e800a103e4006b03f00066063200a103ff005c045f001f0463001f
044d000006010001063200a103d5005c044300000430000003d5009902c4
009902c4009902d5009901d6ff58047700170434006003fb005d03fb005d
03fb005d0583003e0362004b04530099045300780453008801d6008501d6
ff7201eaffd503b6009903b6009904150016060200130569005f04470099
062800990438005a0431005a042a009904340086043400990362005a0321
00510319000a06640099039f0022039f001803d2002204fe005103770029
045500990433009903c0004205d4009905fe0099044a000a0554009903c2
0099038b004d038d005d05c6009903cb00380453fff90443fff904270018
036e0000036e0000036e00000000fca50000fca5029b010a029b00bf029b
00bf03b5008503b5005e03b5005e03de0064026000ed026000b10364007a
0361005f01ff002a02240048022400bb020500970586009601ff008c01ff
002a01ff008c01ff002a035900880359002b035900880359002b01ff002a
0359002b02b6007402b600c002b6007402b600c004190075041900ad0419
0075041900ad0317000102df001f03af018a03fc01ae0317000b02df002d
027300450273004503fcfff603fcfff6073e0095073e0095073e0095073e
009503fcfff903fc00c10205009702050097026d0085026d007a027400bf
0274005a0284005602840075024000840240007a024a00b0024a0067026d
0085026d007a027400bf0274005a028400560284007503fc009e03fc0077
03fc007803fc007604b0006b043d006e03fc006a03fc003d01c4008b0335
008b057500000556000007f7000007270000073c00000727000006ad00af
06ad00af040e008005a4003f05ac004d02b6000003fc003f04b30049040e
002a03fc0057040e00600434005803fc00b903fc004a040e005303fc006d
0419002b040e003403f30035039f006103be005f039f0058039f00250621
0049083300ac03fc002406e300a10411001d0494005f02cb002303ec0062
03ec00510455002203d700510436007e03b20035043600630436005c040e
0048040e00ae040e0072040e0067040e0020040e0065040e006b040e0063
040e0052040e005204430067028d00190381005c0373005903ac00260368
006103b7006e0349002f03b5004b03bc0052039f0050039f008d039f0065
039f0062039f003a039f0067039f0061039f005e039f0051039f00500494
005f02cb002303ec006203ec00510428002203d700510436007e03b20035
043600630436005c040e0048040e00ae040e0072040e0067040e0030040e
0065040e006b040e0063040e0052040e00520321004801f8002302b0004b
02ad004102db002502a6004502df005b0291003202e1004b02df004402ea
005102df005102d0005701bc006001bc00580321004801f8002302b0004b
02ad004102db002502a6004502df005b0291003202e1004b02df004402ea
005102df005102d0005701bc006001bc0058029d003801f500310252003c
0249002d024a001402460032025100300238002202570025024d0023029d
003801f500310252003c0249002d024a0014024600320251003002380022
02570025024d002302b1ff4b03130044055f004405690044051700440569
0044052e00440553004405c9004e05c9004e0567004705b7004705a20047
05cd0027057d004505a20045052a003505b80048084e0048057d005c07c9
005c03fc004603fc004c03fc006003fc002b03fc005e03fc006003fc0059
03fc004503fc006503fc004c03fc005503fc005603fc003d05e9002c0405
003506d300690443006102ed000703fc00080484003a0550005e04660099
066500660454005b0416004a073e009a073e0096073e00c9073e00c9070e
00af070e013a070e00af070e013a0a4e009a0638009f04660028018a0000
01da00000466000004660000046600000466000004660000046600000466
000004660000046600000466000004660000046600000466000004660000
0466000004660000046601d004a1002304a1002304a1002304a1001904a1
001504a1001d04a1002304a1001c04a1001c04a1001c04a1001d04a10023
03e800ac03e800ac03e8003703e8ffe803e8ffe903e8ffe803e8ffe803e8
003702040015020400a0054c0063054c0063054c0063054c0063054c0063
054c0063054c006305940063059400630594006305940063059400630594
0063052200aa052200aa05c600aa05c600aa05c600aa05c600aa05c600aa
05c600aa03e6001e03e6001e03e6001e03d5005c03d5005c03d5ffbb03d5
ffb103d5ffb803d5ffb803d5005703d5ffb803d5ffb803d5ffb803d5ffb8
03d5005c03fb005d03fb005d03fb003003fbffdb03fbffdb03fbffd903fb
ffcb03fb005d01d6002601d600850438005a0438005a0438ffe80438ffea
0438ffe80438ffea0438005a04a0005a04a0005a04a0005a04a0005a04a0
004904a0005a043400940434009404d2009404d2009404d2008c04d20094
04d2004604d20094039f0022039f0002039f0022046a00530466003803f4
001003f4001003f4ffbd03f4ffc003f4ffbd03f4ffc803f4001003f4ffc8
03f4ffc803f4ffc803f4ffc803f40010038000a1038000a10380fff00380
ffa70380ffa00380ffa20380ff8e0380001101ec000901ec009404aa0066
04aa006604aa002104aa002204aa002104aa002204aa006604ec006604ec
006604ec006604ec006604ec006604ec0066048d009f048d009f0515009f
0515009f0515009a0515009f051500750515009f038300100383fff10383
001001da0000046600000466000004660000046600000466000004660000
046600000466000004c10066052400ac052400ac050600ac049300a10493
00a1047c00a103e6000f02ae00210359001c01d60011043c0025043c0025
043c002506760025067600250676002502f5001c02e7008e0306005a034b
008e02a8008e028c008e0344005a035b008e01a6008e01cb000502e0008e
025b008e046d008e0375008d0375005a02d8008e0375005a029b00570280
0046025700040314005702e3001a0445002202b5001c028b001c02b80050
0000fdfd0000fdfd0466ffff0466ffff0466ffff0466ffff03c1ffff03c1
0000030cffff030c0000030cffff030c0002023100000231000001ffffff
01ffffff01ffffff01ffffff0000fd090000fd0902aa008202aa008202aa
009802aa009801ce008402aa008202aa008202aa008202aa0082027f008e
027f008e0324000002910084046601fd02aa001402aa0013032900000329
0000032900000329ffff039a00000327000003fcfff903fcfff9039a0000
039a00000000ff080000fe4c0000fdfb0000fdfb0000fe3f0000fe3f0000
fdc20000fdc201ce008402aa00140291008302aa001502aa009302aa0093
039a014c039a00000000fdfd0000fdfd0000fd090000fce90000fd090000
feb702aa001402aa001403fcfff90466ffff02aa0098039a0000039a0000
039a0000039a0000039a0000039a000004010014040101470000000002aa
ffff02aaffff01ceffff01ceffff030c0000030c000002aa009302aa00c8
02aa00c803f100c801ceffff01ceffff01ce000001ce000002aa00a003b1
008402aaffff02aaffff075c003c075cffff075cffff075cffff075cffff
075c003f06d0ffff06d0ffff075c0003075c0003075c004001df003001df
003001e7003201e7003200f8004400f8004402070030020700300209004c
0209004c019d0030019d003002070032020700320209004c0209004c0309
004c0309004c015f004c015f004c015200180152001801c3001601c30016
01bf001c01bf001c032700510327005103270051032700510000ffab03bd
ffff041a0000041a00000416000104160001041a0001041a0001041a0001
041a000104010002040100020401000204010002015f004c02aa00c801ce
00c803f100c804ec000f044d00ad0440001e0462005d049d006104ff001b
057e000f044d004c03e8006c0525006403ca005a03adffd6050e005b048a
001c025000ac0226001b042800ac070900aa052affd6054c0063062f0061
04e4000f045800ac03ad004703ab0046043f000f03e6000f0550005e0522
00aa0442001e03bf003b03ca004b03ca005a040e006808ab00ac081500ac
060300ac054700ac07b700ac071400ac04a100230204ff3a054c00630522
00aa052200aa052200aa052200aa052200aa04a1002304a10023061bffcc
050c005b050c005b04280073054c0063054c006303ca0008089500ac0815
00ac050c005b072800ac04d400ac052a00ac04a1ffef04a1002303e8ffe1
03e8006e0204feac0204ff4c054c003b054c00630458ffbf0458006e0522
002f052200aa03ca004b04fc00ac052400ac040e004d03ef003b04a10023
03e800ac054c0063054c0063054c0063054c006303e6001e04a1ffd90444
ffe7035d001b03e6ffb803940064046b001b0545001b0495002403e8ff9e
02a10007050a00630469001a04a0001b04a10023045a00ac045a00ac045a
00990444006104ec00ac04ec00ac04ec00ac04ec00ac04ec00ac03e80084
03e8008403e8008203e8003403e8008103ad00ac050c005b04fc00ac04fc
00ac04fc00ac04fc002804fc00ac0204ff360204ff71042800ac042800ac
042800a0035d00ac035d0035035d0060035d006606d700ac06d700ac06d7
00ac052a00ac052a00ac052a00ac052a00ac054c0063054c0063054c0063
054c0063042200ac042200ac045800ac045800ac04580077045800ac03ad
004703ad004703ad004703ad004703ad004703e6000f03e6000f03e6000f
03e6000f052200aa052200aa052200aa052200aa052200aa048a0022048a
0022071e003d071e003d042700300427003003e6001e03bf001503bf003b
03bf003b035d001b03c2ff9b0433001b045800ac052400ac047100ac03e2
003b0444003803ad005903b500ac046a0027043400990434000403b3005a
043400600430005d0271ffee064300990434009903a300990241002703b4
0014044c0099053e0059043400990321005102e0002102ae002103fc001b
0329005903ca004b0366003a03680050075d006003c00099061e009903d5
005601d6ff570438005a0434007a04340088043400880434008804340088
03fb006203d5005803d50058062f005c044cffe203c4003503a3003a0438
005a0438005a03ca002e01eaff60075d006003c400350434009903d5ffbf
03d5005c03fbffe203fb005d01d6fece01d6ff650438ffed0438005a02ca
ff7302ca00100434ffff0434008703ca004b0434005104cd0060040e0052
034c005903d5005c03fb005d0438005a0438004f0438005a0438005a039f
00220289009804eb009902ae002106930060069200600362fff003210051
032900590394006403fb003c0240fff70240fff70434006002ff002703e2
002203720049040e00720321005101f300ad032900ad049700ac029b010a
03d5005c0434009904340099043400860362005a04340060043400600434
0060043400600434006003fb005d03fb005d03fb005d03fb003f03fb005d
0271002503c40035043400990434009904340067043400130434009401d6
ff1f01d6ff1f01d6ff5a03a3009903a3009903a3006b01d6008901d6ff58
01d6ff5801d6ff5906640099066400990664009904340099043400990434
0086043400860438004f0438004f0438005a0438005a0434009904340099
02ca009902ca008a02ca000a02caffff0321005103210051032100510321
00030321005102ae002102ae002102aeffd202aeffd20434008904340041
0434007b0434004d04340086039d0001039d002205b8003505b800350377
002903770029039f00220329000103290059032900000434008602aeffc6
05b80035039f002203d5005c01f100530241002703d5002902aeff960463
009903db00990344005903c200360362003b02ee003c03190099053b0055
0471000803ee00a203ee001403cb004803fc006d0477003204d3000803ee
00530380007204a40066038a00680350ffe80482006c03f300130232008e
01ecfffe03c900a1063200910491ffe804aa00660592006e0433000803ed
00a1034f0053035b004b038300080359001c04b10066048d009f03b70010
03690044039000570393006b0398005507ce00a1085500ac055a00a105cd
00ac06cf00a1076800ac03f4001001ecff4704aa0066048d0096048d009f
048d009f048d009f048d009f03f4001003f40010055cffe20482006c0482
006c03c9005204aa006604aa00660390000007ce00a1085500ac0482006c
065500a1046200a0049100a103f4ffc503f400100380ffb10380004d01ec
fed001ecff7004aa001d04aa006603edffa403ed0064048d0000048d009f
039000570478008c049300a103c50057038c004403f40010038000a104aa
006604aa006604aa006604aa00660383001003f4001003cb002402e00027
0359ffeb0339005004040027048d002703fd00210380ffff023e0000048b
006603ed00270383000c039000550339005001f300ac032900ac049700ac
026000ed03f40010040400a1040400a10404006e03cb006d046500a10465
00a104650081046500a1046500950380002a038000260380004103800000
0380004a035000a10482006c047800a1047800a10478009a047800200478
00a101ecff2a01ecff5503c900a103c900a103c9007e02e000a102e00000
02e0002802e00024060600a1060600a1060600a1049100a1049100a10491
00a1049100a104aa006604aa006604aa006604aa006603c500a103c500a1
03ed00a103ed00a103ed003e03ed0091034f0049034f0049034f0049034f
0000034f00490359001c0359001c0359001803590019048d009f048d0079
048d009f048d0075048d009f03fd002103fd0021063e0037063e003703cc
003603cc003603830010036900050369004403690020047800a10359000a
063e00370383001003f4001002e00027035effa703c5002703ed00a104b6
00a103ef00a10369004403cb004803500060039900a1043c0025043c0025
0447002504470025043c0025043c0025044f0025043c0025043c00250676
002506760025068200250682002506760025067600250689002506760025
067600250475002104750021047500210475002104750021047500210475
0021047500210475002106d9002106d9002106d9002106d9002106d90021
06d9002106d9002106d9002106d9002103d5009604340060043400990434
00990362003b039b005a043400600434006003fb006203fb0062051b0065
0362005a0362004b0435004b043b005d0241fff704340060043400600451
005a039d001f03d0001e0433009404340099043400990241002701d6fff3
0232009401d6009902e7ffa702f9002701d6009904860099066300940663
0094066400990434ffc204340099045300990438005a05b3005a05920064
0536005502ca002302ca002302ca002302ca009902ca0099028e0094028e
002303980085039800850321005101eaffd50242fff801eaffd5028affc4
02ae004102ae002104a400270476004904550090039d002205b80035039f
00220351001f0329005903d3005903bc004b03bb0056039400640394005e
039400640362005a0507005f03d50099043b005a046b005a04470099028a
ffc403a300270319009904340060039400640394005e066f006006d40060
0719006004f3002103c40021057a0021060c002504ae00990469009903ef
002c03ef00700434ffd5044dffd503d60010050fffe3062f006204120027
03cb006a0444009904590030033f0099036f005501d60085022700000391
009802f000300569005f045300990474005a03cb006304a9006604a80066
0528001406cc00560368003a0438005a0438005a03a8009903cf005203cf
0052033f001b046a009a0465004b05c7004b0664014c03de0020060e0035
034f0042032f00380321005103d0001e02f2009903de00200450009903a8
0099052f0083040e000102f5001c03f1000002e7008e02fb0027034b008e
02a8008e02a800500344005a035b008e01a6008e01cb000502e0008e025b
008e046d008e0375008d0375008d0375005a02b2004802d8008e029b0057
02570004031400570445002202ac004402ac006c02e50048042b004402e5
006c02e5004802b8004702b8004702770046027700460297002a01630061
0297006c0456006c02e6006c02e60045024e003602e6004502e6004502e5
006c01e3002302e9006c02db00460456006c0285001f024a000d02be006c
024600230283002803650055025f00180163006101f6006c02e9006c0285
001f02be006c0246002302e5006c03650050025f00180694009404bbffa7
04bd0060030affa7069cffe504b4002204beffa70352ffa7031affa7039d
0014030fffa70329ffc203c4003b0304006e03c400350688002102410027
026900270468002704db002704c40027043400990451006002710025054c
0060041e009901f0006b067f0099045100990434009902ca006a037b0051
02faffd5039d002203ed0029033c0059047c005c04d800600434006003fb
005d0362005a0362004b03fb006201d600850362003b0233001e04d80094
0376004b02e5006b024e0044026e004402b200440277004201c1002401c1
00070297002a02e9006c0192000001aa006c0163006d0192000001e50000
0194006c017b00530224006e0456006c0456006c031b0000031c006c0304
006e02e600450336004502300042016dffd801e4002302e9000002b8002c
02e6006e02e6006e0285001f023700420294004202a600420272003c02e6
004502e9006c02e9006c016dffd801f6006c01f6002502030025028b006c
03ef002c0286001f01c400540334005401ff008c01ff002a01ff008c01ce
008401ce0084029900650299006c03fc004503fc0065044b0044044b0044
025100f20256000002540000025100f20327000002540000025600000239
00980239009801ce008401ce008402aa008202aa008202aa008202aa0082
02aa004b02aa009302610024015e006c02300042027e00280299006c0310
009603100096031000960310009603100096045700960457009604570096
045700960310004304570043045700430457004304570043045700430457
00430457002f0457002f0457002f0457002f0457002f0310002f04570025
045700250457002504570025045700250310001a0457001a0457001a0457
001a0457001a0457001a0310004204570042045700420457004204570042
045700420457009604570096045700960457009603100042045700420457
0042045700420457004204570042045700420457002f0457002f0457002f
0457002f0457002f0310002f0457002f0457002f0457002f0457002f0457
002f03100026045700260457002604570026045700260457002603100042
045700420457004204570042045700420457004204570096045700960457
009604570096031000420457004204570042045700420457004204570042
031000260457002604570026045700260457002604570026031000230457
0023045700230457002304570023045700230310002f0457002f0457002f
0457002f0457002f0457002f0310004b0457004b0457004b0457004b0457
004b0457004b045700960457009604570096045700960310004204570042
045700420457004204570042045700420310001a0457001a0457001a0457
001a0457001a0457001a0310002404570024045700240457002404570024
045700240310002f0457002f0457002f0457002f0457002f0457002f0310
004e0457004e0457004e0457004e0457004e0457004e0457009604570096
045700960457009602aa006202aa006203290000049a00000359002b02aa
008502aa008502aa00c802aa00c8029100840254000003c1ffff03c10000
039a0000022400bb02aa009802aa009802aa009802aa00980440fff60440
fff60302009803270000032700000324000002aa0000071200d4071200d4
02ac004402b8004702e60045027e002802b8004701d9ffff01d9ffff01d9
000001d90000028900000289000002890000028900000000fc660000fc66
032900000329000003290000032900000324000003240000032900000329
00000329000003290000032400000324000003f4000003f4000003f40000
03f40000032400000324000003270000030c000001ffffff01d900000327
000003290000032900000329000004660000046600000466000004660000
03f4000003f4000003f4000003f40000023200b6023200b6054c00630444
006104440043044400610444004303e6000e0456fec803e6000e03ad00ac
054c0063045d001e059700ac04a2000f04440061042200ac043200640375
005a037500420478000604d700510684001404120076041200030362005a
0362003b0362005a0362003b053b0055037800940438005a0399001404c5
009904a2000f0349005c01eaffd50476ffd504d7005104a9006603cb006d
03cb004803cb006d03cb00480389001a0389fe6f0389001a035000a104b1
005b03e2001e050000a1045d002a03db006d03c500a104a1ffc504a1fe8a
04a1fe6204a1ff2204a1ffc604a1fe8b04a1fe6204a1ff2204a1ff8004a1
ff5804a1002304a1002304a1002304a1ffc504a1fe8a04a1fe6204a1ff22
04a1ffc604a1fe8b04a1fe6204a1ff22066500230665ffc50665fe8a0665
fe620665ff220665ffc60665fe8b0665fe620665ff2203e8fef004bdfe82
04bdfe7a03e8fef004c1fe8604bdfe7a03e8fea403e8fe9504fcfef005d1
fe8205d1fe7a0559feaa04fcfef005d1fe8205d1fe7a0559feaa04fcfea4
04fcfe9504fc00ac04fcfef005d1fe8205d1fe7a0559feaa04fcfef005d1
fe8205d1fe7a0559feaa06c000ac06c0fef00795fe820795fe7a071dfeaa
06c0fef00795fe820795fe7a071dfeaa0204fef002d9fe8202d9fe7a0261
feaa0204fef002d9fe8202d9fe7a0261feaa0204fea40204fe950204ff4e
0204ff7a054cff0605f5fe82060cfe7b054cff0605f2fe7f0605fe74054c
fecf054cfeac0422fef003e6fe940517fe820513fe7e049ffeaa03e6fe47
03e6fe4703e6001e03e6001e0550ff0605f2fe7b060dfe780599feaa0550
ff0605f2fe7b0611fe7c0599feaa0550fecf0550feac0550005e0550ff06
05f2fe7b060dfe780599feaa0550ff0605f2fe7b0611fe7c0599feaa0714
005e0714ff0607b6fe7b07d1fe78075dfeaa0714ff0607b6fe7b07d5fe7c
075dfeaa048a0061048a0061048a0061048a0061048a0061048a0061048a
0061048a0061048a0061048a0061048a005a048a0061048a0061048a0061
048a0061048a0061048a0061048a0061048a0061048a0061048a0061048a
0061048a0061048a0061048a005a03a5005903a5005903a5004f03a50059
03a5005203a5005203a5005903a50059044c0099044c0092044c008f044c
0094044c0099044c0092044c0092044c0094044c0099044c0099044c0059
044c0099044c0099044c0092044c008f044c0094044c0099044c0092044c
0092044c0094044c0099044c0099044c0059023200010232ff860232ff83
0232ff62023200000232ff860232ff860232ff600232ff100232fecf0232
ff600232ffef0232ff7b0232ff290232ff690232ff680438005a0438005a
0438005a0438005a0438005a0438005a0438005a0438005a041200760412
007604550090045500820455008204550084045500900455008204550082
045500840455001204550010045500800455009004550090045500410455
00710455007d059200640592006405920064059200640592006405920064
059200640592006405920064059200640592006405920064059200640592
006405920064059200640592006405920064059200640592006405920064
059200640592006403f4001003f4001003f4001003f4001003f4001003f4
001003f4001003f4001003f4001003f4001003f4001003f4001003f40010
03f4001003f4001003f4001003f4001003f4001003f4001003f4001003f4
001003f4001005b9001005b9001005b9001005b9001005b9001005b90010
05b9001005b9001005b90010038000a10380004903800049038000a10380
004903800049038000a10380007b047800a1047800a1047800a1047800a1
047800a1047800a1047800a1047800a1047800a1047800a10478006f0478
00a1047800a1047800a1047800a1047800a1047800a1047800a1047800a1
047800a1063c00a1063c00a1063c00a1063c00a1063c00a1063c00a1063c
00a1063c00a1063c00a101ec000901ecff6201ecff6201ecff6501ec0009
01ecff6201ecff6201ecff6501ecff1001ecfee901ecff6401ec000001ec
ff8c01ecff2a01ecff5301ecff7004aa006604aa006604aa006604aa0066
04aa006604aa006604aa006604aa006603c500a103c500a1038300100389
001a038300100389001a038300100389001a038300100389001a03830010
0389001a038300100389001a038300100389001a038300100389001a0383
00100389001a038300100389001a0383fff50389fff5038300100389001a
038300100389001a04b1006604b1006604b1006604b1006604b1006604b1
006604b1006604b1006604b1006604b1006604b1006604b1006604b10066
04b1006604b1006604b1006604b1006604b1006604b1006604b100660675
006606750066067500660675006606750066067500660675006606750066
0675006604a1002304a1ffc504a1fe8a04a1fe6204a1ff2204a1ffc604a1
fe8b04a1fe6204a1ff2204fc00ac04fcfef005d1fe8205d1fe7a0559feaa
04fcfef005d1fe8205d1fe7a0559feaa0550005e0550ff0605f2fe7b060d
fe780599feaa0550ff0605f2fe7b0611fe7c0599feaa066500230665ffc5
0665fe8a0665fe620665ff220665ffc60665fe8b0665fe620665ff2206c0
00ac06c0fef00795fe820795fe7a06c0fe4d06c0fef00795fe820795fe7a
06c0fe4d0714005e0714ff0607b6fe7b07d1fe780714fe610714ff0607b6
fe7b07d5fe7c0714fe6101d9ffff01d900000289000002890000039a0000
03290000032900000324000003290000032900000324000003f4000003f4
00000324000001d9000003270000030c0000023200b601c4007901c40079
01c40079054e00ac0440000a042200ac0366001b044100ac06b2005503ca
004b04a500ac045800ac046a001b050c000f052400ac05b100ac073800ac
051900610444006103e6000f03e6001e03e6001e0476003005d2000f049a
007404720074047200ad05f6002805f60028020400ac06680055045f00ac
050e000304fc00ac04fc00ac04720074070700ac04a1002304a10023061b
ffcc03e8005905250064052500640668005503ca001503ca004b052200ac
052200ac054c0063054c0063054c00630462004c0438000f0438000f0438
000f04720071035300ac061800ac0366001b048500300427003004400035
065d0037061d003d041a003d070f0003072800ac0515005b0521000f03ca
005a05090003045f009903df00270434009902f90027039f009905c0003e
0362004b03f4009903b6009903eb00270447000a0471009904d8009905f1
0099045c00590362005a0319000a039d0022039d002203b2002904c5000a
03ea004203c0004203c0009904c8001904c800190583003e03cf00990421
0016044700990454009903c0004205b6005f020400ac03d5002e03d50058
062f005c03fb005603fb006203fb00620583003e0362000803bc004b0453
0095045300970438005a0431005a0431005a038b0004039f0022039f0022
039f002203c0002902c400990554009902f9002703b10029037700290434
006006550060059b004b03ba004b061f001606500099044500500481000a
0362005a042b001604a800a103e8002703c500a10314002703ec00a105d0
004403800057041c00a103ca00a103ca002704530017049800a1050100a1
067700a104a2006503cb006d0359001c0383001003830010041300360545
001c041a006d03fa006d03fa00a1054f0020054f002001ec00a105780044
03ff00a1045a0001047800a104a100a103fa006d062f00a103f4001003f4
0010055cffe20380004204a2006504a20065057800440380000303900057
048900a0048900a004aa006604a9006604a9006603e4001e039d001e039d
001e039d001e03fa0044031400a1058300a1031400270417003603cc0036
03e8004a0588004a0559007203d8007205d20001061900a10488006c0444
001c03800068045c00010400000008000000040000000800000002af0000
02000000015500000450000001bc00000199000001000000000000000000
ffdc0000ff25040e0024040e00240329000003fcfff901ff008c03580088
01c400540334005404a400540476010a03fcfffb0273004404ee004f0444
00610444006103ad0027040e005306640099052a0020076000ac064800ac
071e002005f500ac0428001b03e6000f08a80032043afffe0482002104b2
005b0495002003ad0020044400610621004906210065057800e6059d00e6
03fc005e070100bc03fc0062045201d7045200be0400fff6040001bd0400
01bd0400fff6040001bd0400fff6070900aa045c005b047200ad04440071
04d0003a0562007403c9001006640094042f005f04180015035a0053040b
00300441006f03260010032700030327000303270003025400c0025400c0
025400c8025400c802aaff8c02aaff8c04e0005907f4000a07e200140798
0003076c0061064100ac050b002406a700ac05c80055073f00ac03ca0021
0600009004b8001c085c0063054c003b076c0061076c006104440061056a
0022053400990433001b05af00990480001b060b0099034e001605a90094
03d2ffc40745005a049c005a06420059056a00220362005a06b8006d05c3
00a10453001205c000a1050b0046066400a10380002205580087042e0022
07f10066050f006806b0006d06b8006d039c006d03c7009602aa00db040e
008d0000ffdc0000fe5101cf0000022400bb01c700000163006102b1ff4b
0aa000b404d5009202d5008302d5008304d500b202d500700aa000b40aa0
00b40aa000b40aa000b40aa000b40aa000b40aa000b40aa000b40aa000b4
0000fc48000000000000fd170000000000000000039a0000039a00000324
00000324000003240000039a000003240000032400000256000003290000
0329000003bdffff02aaff8c055001e5027f008403240000039a00000256
000000000027000000e1000000ed0000001b032400000324000003240000
032400000324000003240000032400000324000003240000032400000000
0000000000000000000000000000039a0000039a00000346000000000027
03c10000030f00000346000003460000039a0000034800000348000003a2
000003a2000002560000035f00000000009e00000067000000220000009e
0000009e0000009e0000009e0000009e0517fe820513fe7e049ffeaa03e6
fe4703e6fe4703e6000e03e6000e03f4001003f4001003f4001005b80010
05b8001005b80010047800a1047800a10478006f063c00a1063c00a1063c
006f0383ffc80383ffc80383001004b1006604b1006604b1006606750066
06750066067500660000fdbc0000fd1a0000fd770000fd4f0000fbfe0000
fbfa0000fc000000fbfa0000fc000000fbfa0000fc000000fbfa0000fc00
0000fc000000fc000000fc000000fc000000fc000000fc000000fc000000
fdd00000fc300000fc300000fbff0000fbff0000fbff0000fbff0000fbff
0000fc000000fcac0000fcad0000fcac0000fcac0000fd1b0000fd1b0000
fd340000fd340000fd340000fd340000fd600000fd600000fd730000fd73
0000fdcf0000fd5f0000fd5f0000fd5f0000fd5f0000fd7f0000fd7f0000
fca10000fd6f0000fdfd0000fcef0000fcf20000fca00000fca00000fcae
0000fcad0000fc660000fca00000fc2f0000fc2f0000fc660000fc5f0000
fdd00000fcf10000fd6d0000fcf30000fd710000fd710000fdb10000fc65
0000fcf10000fcf10000fc2f0000fbff0000fd770000fc660000fc660000
fc650000fc650000fc650000fc650000fc460000fd790000fcde0000fcde
0000fd4b0000fd4b0000fca80000fca80000fd710000fda60000fda60000
fce30000fd4c0000fd4c0000fd4b0000fd4b0000fd7e0000fcdf0000fcde
0000fcde0000fc8f0000fc520000fc520000fc520000fc520000fc920000
fc970000fc970000fc560000fc560000fc910000fd820000fd820000fd70
0000fd700000fdfa0000fdfa0000fd5f0000fd5f0000fd790000fd790000
fd8f0000fd8f0000fd6e0000fd6e0000fd7a0000fd7a0000fcfb0000fcfb
0000fdb60000fdb60000fda80000fda80000fd680000fd680000fd710000
fd710000fcf10000fcf10000fcf10000fcf10000fc540000fc260000fc26
0000fc290000fc290000fc270000fc270000fc270000fc270000fc350000
fc350000fc350000fc350000fdb60000fda80000fda80000fce30000fd46
0000fd460000fd470000fd470000fd020000fd020000fd020000fd020000
fc650000fc660000fc9f0000fc9f0000fc9f0000fc9f0000fca10000fca1
0000fc9f0000fc9f0000fc9f0000fc9f0000fca10000fca10000fc370000
fc370000fc370000fc370000fca00000fca00000fc9f0000fcad0000fd33
0000fd470000fc9f0000fc9f0000fc9f0000fc9f0000fbff0000fc020000
fbff0000fc000000fc370000fc370000fc370000fc370000fdbd0000fdbd
0000fca20000fca30000fca30000fdd10000fdd10000fdd10000fdd10000
fc6a0000fc6a03e6fe940389ffcb0389ffcb0389001a01d6008904340060
043400600434006004340060043c0025067600250aa000b400b400b400b4
00b400b400b400b400b400b400b400b400b400b400b400b400b400b400b4
00b400b400b400b400b400b400b400b400b400b400b400b400b4000000>
<00000000000001420000014200000142000001420000025e0000025e0000
025e0000025e0000025e0000025e0000025e0000025e0000025e0000025e
0000025e0000025e0000025e0000025e0000025e0000025e0000025e0000
025e0000025e0000025e0000025e0000025e0000025e0000025e0000025e
0000025e0000025e0000025e0000025e0000025e0000025e0000025e0000
025e0000025e0000025e0000025e0000025e0000025e0000025e0000025e
0000039e0000039e0000039e0000039e0000039e0000039e0000039e0000
039e0000039e0000039e0000039e0000039e0000039e0000039e0000039e
0000039e0000039e0000039e0000039e0000039e0000039e0000039e0000
039e0000039e0000039e0000039e0000039e0000039e0000039e0000039e
0000039e0000048e0000048e0000048e0000048e0000048e0000048e0000
048e0000048e0000048e0000048e0000048e0000048e0000048e0000048e
0000048e0000048e0000048e0000048e0000048e0000048e0000048e0000
048e0000048e0000048e0000048e0000055c0000055c0000055c0000055c
0000055c0000055c0000055c0000055c0000055c0000055c0000055c0000
055c0000055c0000055c0000055c0000055c0000055c0000055c0000055c
0000055c0000055c0000055c0000055c0000055c0000055c0000055c0000
055c0000055c0000055c0000055c0000055c0000055c0000055c0000055c
0000055c0000055c0000055c0000055c0000055c0000055c0000055c0000
055c0000055c0000055c0000055c0000055c0000055c0000055c0000055c
0000055c0000055c0000055c0000055c0000055c0000055c0000055c0000
055c0000055c0000055c0000055c0000055c0000055c0000055c0000055c
0000055c0000055c0000055c0000055c0000055c0000055c0000055c0000
055c0000055c0000055c0000055c0000055c0000055c0000055c0000055c
0000055c0000055c0000055c0000055c0000055c0000055c0000055c0000
055c0000055c0000055c0000055c0000055c0000055c0000055c0000055c
0000055c0000055c0000055c0000055c0000055c0000055c0000055c0000
055c0000055c0000055c0000055c0000055c0000055c0000055c0000055c
0000055c0000055c0000055c0000055c0000055c0000055c0000055c0000
055c0000055c0000055c0000055c0000055c0000055c0000055c0000055c
0000055c0000055c0000055c0000055c0000055c0000055c0000055c0000
055c0000055c0000055c0000055c0000055c0000055c0000055c0000055c
0000055c0000055c0000055c0000055c0000055c0000055c0000055c0000
055c0000055c0000055c0000055c0000055c0000055c0000055c0000055c
0000055c0000055c0000055c0000055c0000055c0000055c0000055c0000
055c0000055c0000055c0000055c0000055c0000055c0000055c0000055c
0000055c0000055c0000055c0000055c0000055c0000055c0000055c0000
055c0000055c0000055c0000055c0000055c0000055c0000055c0000055c
0000055c0000055c0000069e0000069e0000069e0000069e0000069e0000
069e0000069e0000069e0000069e0000069e0000069e0000069e0000069e
0000069e0000069e0000069e0000069e0000069e0000069e0000069e0000
069e0000069e0000069e0000069e0000069e0000069e0000069e0000069e
0000069e0000069e0000069e0000069e0000069e0000069e0000069e0000
069e0000069e0000069e0000069e0000069e0000069e0000069e0000069e
0000069e0000069e0000069e0000069e0000069e0000069e0000069e0000
069e0000069e0000069e0000069e0000069e0000069e0000069e0000069e
0000069e0000069e0000069e0000069e0000069e0000069e0000069e0000
069e0000069e0000069e0000069e0000069e0000069e0000069e0000069e
0000069e0000069e0000069e0000069e0000069e0000069e0000069e0000
069e00000724000007240000072400000724000007240000072400000724
000007240000072400000724000007240000072400000724000007240000
072400000724000007240000072400000724000007240000072400000724
000007240000072400000724000007240000085200000852000008520000
085200000852000008520000085200000852000008520000085200000852
000008520000085200000852000008520000085200000852000008520000
085200000852000008520000085200000852000008520000085200000852
000008520000085200000852000008520000085200000852000008520000
085200000852000008520000085200000852000008520000085200000852
000008520000085200000852000008520000085200000852000008520000
085200000852000008520000085200000852000008520000085200000852
0000085200000852000008520000085200000852000008520000091c0000
091c0000091c0000091c0000091c0000091c0000091c0000091c0000091c
0000091c0000091c0000091c0000091c0000091c0000091c0000091c0000
091c0000091c0000091c0000091c0000091c0000091c0000091c0000091c
0000091c0000091c0000091c0000091c0000091c0000091c0000091c0000
091c0000091c0000091c0000091c0000091c0000091c0000091c0000091c
0000091c0000091c0000091c0000091c0000091c0000091c0000091c0000
091c0000091c0000091c0000091c0000091c0000091c0000091c0000091c
0000091c0000091c0000091c0000091c0000091c0000091c0000091c0000
091c0000091c0000091c0000091c0000091c0000091c0000091c0000091c
0000091c0000091c0000091c0000091c0000091c0000091c0000091c0000
091c0000091c0000091c0000091c0000091c0000091c0000091c0000091c
0000091c0000091c0000091c0000091c0000091c0000091c0000091c0000
091c0000091c0000091c0000091c0000091c0000091c0000091c0000091c
0000091c0000091c0000091c0000091c0000091c0000091c0000091c0000
091c0000091c0000091c0000091c0000091c0000091c0000091c0000091c
0000091c0000091c0000091c0000091c0000091c0000091c0000091c0000
091c0000091c0000091c0000091c0000091c0000091c0000091c0000091c
0000091c0000091c0000091c0000091c0000091c0000091c0000091c0000
091c0000091c0000091c0000091c0000091c0000091c0000091c0000091c
0000091c0000091c0000091c0000091c0000091c0000091c0000091c0000
091c0000091c0000091c0000091c0000091c0000091c0000091c0000091c
0000091c0000091c0000091c0000091c0000091c0000091c0000091c0000
091c0000091c0000091c0000091c0000091c0000091c0000091c0000091c
0000091c0000091c0000091c0000091c0000091c0000091c0000091c0000
091c0000091c0000091c0000091c0000091c0000091c0000091c0000091c
0000091c0000091c0000091c0000091c0000091c0000091c0000091c0000
091c0000091c0000091c0000091c0000091c0000091c0000091c0000091c
0000091c0000091c0000091c0000091c0000091c0000091c0000091c0000
091c0000091c0000091c0000091c0000091c0000091c0000091c0000091c
0000091c0000091c0000091c0000091c0000091c0000091c0000091c0000
091c0000091c0000091c0000091c0000091c0000091c0000091c0000091c
0000091c0000091c0000091c0000091c0000091c0000091c0000091c0000
091c0000091c0000091c0000091c0000091c0000091c0000091c0000091c
0000091c0000091c0000091c0000091c0000091c0000091c0000091c0000
091c0000091c0000091c0000091c0000091c0000091c0000091c0000091c
0000091c0000091c0000091c0000091c0000091c0000091c0000091c0000
091c0000091c0000091c0000091c0000091c0000091c0000091c0000091c
0000091c0000091c0000091c0000091c0000091c0000091c0000091c0000
091c0000091c0000091c0000091c0000091c0000091c0000091c0000091c
0000091c0000091c0000091c0000091c0000091c0000091c0000091c0000
091c0000091c0000091c0000091c0000091c0000091c0000091c0000091c
0000091c0000091c0000091c0000091c0000091c0000091c0000091c0000
091c0000091c0000091c0000091c0000091c0000091c0000091c0000091c
0000091c0000091c0000091c0000091c0000091c0000091c0000091c0000
091c0000091c0000091c0000091c0000091c0000091c0000091c0000091c
0000091c0000091c0000091c0000091c0000091c0000091c0000091c0000
091c0000091c0000091c0000091c0000091c0000091c0000091c0000091c
0000091c0000091c0000091c0000091c0000091c0000091c0000091c0000
091c0000091c0000091c0000091c0000091c0000091c0000091c0000091c
0000091c0000091c0000091c0000091c0000091c0000091c0000091c0000
091c0000091c0000091c0000091c0000091c0000091c0000091c0000091c
0000091c0000091c0000091c0000091c0000091c0000091c0000091c0000
091c0000091c0000091c0000091c0000091c0000091c0000091c0000091c
0000091c0000091c0000091c0000091c0000091c0000091c0000091c0000
091c0000091c0000091c0000091c0000091c0000091c0000091c0000091c
0000091c0000091c0000091c0000091c0000091c0000091c0000091c0000
091c0000091c0000091c0000091c0000091c0000091c0000096200000962
000009620000096200000962000009620000096200000962000009620000
096200000962000009620000096200000962000009620000096200000962
000009620000096200000962000009620000096200000962000009620000
096200000962000009620000096200000962000009620000096200000962
000009620000096200000962000009620000096200000962000009620000
096200000962000009620000096200000962000009620000096200000962
000009620000096200000962000009620000096200000962000009620000
096200000962000009620000096200000962000009620000096200000962
000009620000096200000962000009620000096200000962000009620000
096200000962000009620000096200000962000009620000096200000962
000009620000096200000962000009620000096200000962000009620000
096200000962000009620000096200000abe00000abe00000d0a00000d0a
00000d0a00000d0a00000d0a00000d0a00000d0a00000d0a00000d0a0000
0d0a00000d0a00000d0a00000d0a00000d0a00000d0a00000d0a00000d0a
00000d0a00000d0a00000d0a00000d0a00000d0a00000d0a00000d0a0000
0d0a00000d0a00000d0a00000d0a00000d0a00000d0a00000d0a00000d0a
00000e7000000fde0000111e0000130600001490000015fa0000160a0000
174800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
0000175800001758000017580000175800001758000100000f2201200010
00c3000700020010002f0065000011900182000400010000000e00ae0000
00030000000000640000000000030000000700fa00640001000000000000
0032015e0001000000000003000e01900001000000000004000e019e0001
000000000006000e01ac0001000000000007007d01ba0003000104090000
006402370003000104090001001c029b0003000104090002000e02b70003
000104090003001c02c50003000104090004001c02e10003000104090006
001c02fd000300010409000700fa031900a9002000320030003000380020
004d006900630072006f0073006f0066007400200043006f00720070006f
0072006100740069006f006e002e00200041006c006c0020005200690067
006800740073002000520065007300650072007600650064002e00430061
006c00690062007200690020006900730020006500690074006800650072
002000610020007200650067006900730074006500720065006400200074
0072006100640065006d00610072006b0020006f00720020006100200074
0072006100640065006d00610072006b0020006f00660020004d00690063
0072006f0073006f0066007400200043006f00720070006f007200610074
0069006f006e00200069006e002000740068006500200055006e00690074
00650064002000530074006100740065007300200061006e0064002f006f
00720020006f007400680065007200200063006f0075006e007400720069
00650073002ea92032303038204d6963726f736f667420436f72706f7261
74696f6e2e20416c6c205269676874732052657365727665642e4d575658
4e512b43616c696272694d5756584e512b43616c696272694d5756584e51
2b43616c6962726943616c69627269206973206569746865722061207265
67697374657265642074726164656d61726b206f7220612074726164656d
61726b206f66204d6963726f736f667420436f72706f726174696f6e2069
6e2074686520556e697465642053746174657320616e642f6f72206f7468
657220636f756e74726965732e00a9002000320030003000380020004d00
6900630072006f0073006f0066007400200043006f00720070006f007200
6100740069006f006e002e00200041006c006c0020005200690067006800
740073002000520065007300650072007600650064002e004d0057005600
58004e0051002b00430061006c0069006200720069005200650067007500
6c00610072004d005700560058004e0051002b00430061006c0069006200
720069004d005700560058004e0051002b00430061006c00690062007200
69004d005700560058004e0051002b00430061006c006900620072006900
430061006c00690062007200690020006900730020006500690074006800
650072002000610020007200650067006900730074006500720065006400
2000740072006100640065006d00610072006b0020006f00720020006100
2000740072006100640065006d00610072006b0020006f00660020004d00
6900630072006f0073006f0066007400200043006f00720070006f007200
6100740069006f006e00200069006e002000740068006500200055006e00
69007400650064002000530074006100740065007300200061006e006400
2f006f00720020006f007400680065007200200063006f0075006e007400
72006900650073002e000000b2090320b80284b40918014a20b80283b409
18014a20b80282b40918014a20b80281b40918014a20b80280b40918014a
20b8027fb40918014a20b8027eb40918014a20b8027db40918014a20b802
7cb40918014a20b8027bb40918014a20b8027ab40918014a20b80279b409
18014a20b80278b40918014a20b80277b40918014a20b80276b40918014a
20b80275b40918014a20b80274b40918014a20b80273b40918014a20b802
71b40918014a20b80270b40918014a20b8026fb40918014a20b8026eb409
18014a20b8026db40918014a20b8026cb40918014a20b8026bb40918014a
20b8026ab40918014a20b80269b40918014a20b80268b40918014a20b802
67b40918014a20b80266b40918014a20b80265b40918014a20b80264b409
18014a20b80263b40918014a20b80262b40918014a20b80261b40918014a
20b80260b40918014a20b8025fb40918014a20b8025eb40918014a20b802
5db40918014a20b8025cb40918014a20b8025bb40918014a20b8025ab409
18014a20b80259b40918014a20b80258b40918014a20b80257b40918014a
20b80256b40918014a20b80255b40918014a20b80254b40918014a20b802
53b40918014a20b80252b40918014a20b80251b40918014a20b80250b409
18014a20b8024fb40918014a20b8024eb40918014a20b8024db40918014a
20b8024cb40918014a20b8024bb40918014a20b8024ab40918014a20b802
49b40918014a20b80248b40918014a20b80247b40918014a20b80246b409
18014a20b80245b40918014a20b80244b40918014a20b80243b40918014a
20b80242b40918014a20b80241b40918014a20b80240b40918014a20b802
3fb40918014a20b8023eb40918014a20b8023db40918014a20b8023cb409
18014a20b8023bb40918014a20b8023ab40918014a20b80239b40918014a
20b80238b40918014a20b80237b40918014a20b80236b40918014a20b802
35b40918014a20b80234b40918014a20b80233b40918014a20b80232b409
18014a20b80231b40918014a20b80230b40918014a20b8022fb40918014a
20b8022eb40918014a20b8022db40918014a20b8022cb40918014a20b802
2bb40918014a20b8022ab40918014a20b80229b40918014a20b80228b409
18014a20b80227b40918014a20b80226b40918014a20b80225b40918014a
20b80224b40918014a20b80223b40918014a20b80222b40918014a20b802
21b40918014a20b80220b40918014a20b8021fb40918014a20b8021eb409
18014a20b8021db40918014a20b8021cb40918014a20b8021bb40918014a
20b8021ab40918014a20b80219b40918014a20b80218b40918014a20b802
17b40918014a20b80216b40918014a20b80215b40918014a20b80214b409
18014a20b80213b40918014a20b80212b40918014a20b80211b40918014a
20b80210b40918014a20b8020fb40918014a20b8020eb40918014a20b802
0db40918014a20b8020cb40918014a20b8020bb40918014a20b8020ab409
18014a20b80209b40918014a20b80208b40918014a20b80207b40918014a
20b80206b40918014a20b80205b40918014a20b80204b40918014a20b802
03b40918014a20b80202b40918014a20b80201b40918014a20b80200b409
18014a20b801ffb40918014a20b801feb40918014a20b801fdb40918014a
20b801fcb40918014a20b801fbb40918014a20b801fab40918014a20b801
f9b40918014a20b801f8b40918014a20b801f7b40918014a20b801f6b409
18014a20b801f5b40918014a20b801f4b40918014a20b801f3b40918014a
20b801f2b40918014a20b801f1b40918014a20b801f0b40918014a20b801
efb40918014a20b801eeb40918014a20b801edb40918014a20b801ecb409
18014a20b801ebb40918014a20b801eab40918014a20b801e9b40918014a
20b801e8b40918014a20b801e7b40918014a20b801e6b40918014a20b801
e5b40918014a20b801e4b40918014a20b801e3b40918014a20b801e2b409
18014a20b801e1b40918014a20b801e0b40918014a20b801dfb40918014a
20b801deb40918014a20b801ddb40918014a20b801dcb40918014a20b801
dbb40918014a20b801dab40918014a20b801d9b40918014a20b801d8b409
18014a20b801d7b40918014a20b801d6b40918014a20b801d5b40918014a
20b801d4b40918014a20b801d3b40918014a20b801d2b40918014a20b801
d1b40918014a20b801d0b40918014a20b801cfb40918014a20b801ceb409
18014a20b801cdb40918014a20b801ccb40918014a20b801cbb40918014a
20b801cab40918014a20b801c9b40918014a20b801c8b40918014a20b801
c7b40918014a20b801c6b40918014a20b801c5b40918014a20b801c4b409
18014a20b801c3b40918014a20b801c2b40918014a20b801c1b40918014a
20b801c0b40918014a20b801bfb40918014a20b801beb40918014a20b801
bdb40918014a20b801bcb40918014a20b801bbb40918014a20b801bab409
18014a20b801b9b40918014a20b801b8b40918014a20b801b7b40918014a
20b801b6b40918014a20b801b5b40918014a20b801b4b40918014a20b801
b3b40918014a20b801b2b40918014a20b801b1b40918014a20b801b0b409
18014a20b801afb40918014a20b801aeb40918014a20b801adb40918014a
20b801acb40918014a20b801abb40918014a20b801aab40918014a20b801
a9b40918014a20b801a8b40918014a20b801a7b40918014a20b801a6b409
18014a20b801a5b40918014a20b801a4b40918014a20b801a3b40918014a
20b801a2b40918014a20b801a1b40918014a20b801a0b40918014a20b801
9fb40918014a20b8019eb40918014a20b8019db40918014a20b8019cb409
18014a20b8019bb40918014a20b8019ab40918014a20b80199b40918014a
20b80198b40918014a20b80197b40918014a20b80196b40918014a20b801
95b40918014a20b80194b40918014a20b80193b40918014a20b80192b409
18014a20b80191b40918014a20b80190b40918014a20b8018fb40918014a
20b8018eb40918014a20b8018db40918014a20b8018cb40918014a20b801
8bb40918014a20b8018ab40918014a20b80189b40918014a20b80188b409
18014a20b80187b40918014a20b80186b40918014a20b80185b40918014a
20b80184b40918014a20b80183b40918014a20b80182b40918014a20b801
81b40918014a20b80180b40918014a20b8017fb40918014a20b8017eb409
18014a20b8017db40918014a20b8017cb40918014a20b8017bb40918014a
20b8017ab40918014a20b80179b40918014a20b80178b40918014a20b801
77b40918014a20b80176b40918014a20b80175b40918014a20b80174b409
18014a20b80173b40918014a20b80172b40918014a20b80171b40918014a
20b80170b40918014a20b8016fb40918014a20b8016eb40918014a20b801
6db40918014a20b8016cb40918014a20b8016bb40918014a20b8016ab409
18014a20b80169b40918014a20b80168b40918014a20b80167b40918014a
20b80166b40918014a20b80165b40918014a20b80164b40918014a20b801
63b40918014a20b80162b40918014a20b80161b40918014a20b80160b409
18014a20b8015fb40918014a20b8015eb40918014a20b8015db40918014a
20b8015cb40918014a20b8015bb40918014a20b8015ab40918014a20b801
59b40918014a20b80158b40918014a20b80157b40918014a20b80156b409
18014a20b80155b40918014a20b80154b40918014a20b80153b40918014a
20b80152b40918014a20b80150b40918014a20b8014fb40918014a20b801
4eb40918014a20b8014cb40918014a20b8014bb40918014a20b8014ab409
18014a20b80149b40918014a20b80148b40918014a20b80147b40918014a
20b80146b40918014a20b80145b40918014a20b80144b40918014a20b801
43b30918014ab80284b21e3e1fb80283b21e151fb80282b21e3e1fb80281
b21e3a1fb80280b21e3e1fb8027fb21e3e1fb8027eb21e0c1fb8027db21e
3e1fb8027cb21e3e1fb8027bb21e3e1fb8027ab21e3e1fb80279b21d411f
b80278b21d431fb80277b21d431fb80276b21d431fb80275b21d411fb802
74b21d431fb80273b21d431fb80272b21d411fb80271b21d421fb80270b2
1d421fb8026fb21d421fb8026eb21d431fb8026db21d431fb8026cb21d43
1fb8026bb21c451fb8026ab21c451fb80269b21c451fb80268b21c451fb8
0267b21c451fb80266b21c441fb80265b21c451fb80264b21c451fb80263
b21c451fb80262b21c451fb80261b21c451fb80260b21c451fb8025fb21c
451fb8025eb21c441fb8025db21c451fb8025cb21c451fb8025bb21c451f
b8025ab21c451fb80259b21c451fb80258b21c451fb80257b21c451fb802
56b21c451fb80255b21c451fb80254b21c451fb80253b21c451fb80252b2
1c451fb80251b21c451fb80250b21c451fb8024fb21c451fb8024eb21c45
1fb8024db21c451fb8024cb21c451fb8024bb21c451fb8024ab21b491fb8
0249b21b491fb80248b21b4a1fb80247b21b4a1fb80246b21b4b1fb80245
b21b4c1fb80244b21b4c1fb80243b21b4c1fb80242b21b4b1fb80241b21b
491fb80240b21b491fb8023fb21b4a1fb8023eb21b4a1fb8023db21b4a1f
b8023cb21b4b1fb8023bb21b4b1fb8023ab21b4c1fb80239b21b4c1fb802
38b21b4c1fb80237b21b4c1fb80236b21b4c1fb80235b21b491fb80234b2
1b491fb80233b21b4a1fb80232b21b4a1fb80231b21b4a1fb80230b21b4b
1fb8022fb21b4b1fb8022eb21b4c1fb8022db21b4c1fb8022cb21b4c1fb8
022bb21b4c1fb8022ab21b4c1fb80229b21b4c1fb80228b21b4c1fb80227
b21b491fb80226b21b491fb80225b21b4a1fb80224b21b4a1fb80223b21b
4a1fb80222b21b4b1fb80221b21b4b1fb80220b21b4c1fb8021fb21b4c1f
b8021eb21b4c1fb8021db21b4c1fb8021cb21b4c1fb8021bb21b4c1fb802
1ab21a4e1fb80219b21a4e1fb80218b21a4f1fb80217b21a4f1fb80216b2
1a4e1fb80215b21a4e1fb80214b21a4f1fb80213b21a4f1fb80212b21a4f
1fb80211b21a4e1fb80210b21a4e1fb8020fb21a4f1fb8020eb21a4f1fb8
020db21a4f1fb8020cb21a4e1fb8020bb21a4e1fb8020ab21a4e1fb80209
b21a4f1fb80208b21a4f1fb80207b21a4f1fb80206b219501fb80205b219
511fb80204b219511fb80203b219501fb80202b219511fb80201b219511f
b80200b219511fb801ffb219511fb801feb219501fb801fdb219511fb801
fcb219511fb801fbb219511fb801fab219501fb801f9b219511fb801f8b2
19511fb801f7b219511fb801f6b219511fb801f5b218541fb801f4b21853
1fb801f3b218541fb801f2b218541fb801f1b218541fb801f0b218531fb8
01efb218541fb801eeb218541fb801edb218541fb801ecb218531fb801eb
b218531fb801eab218541fb801e9b218541fb801e8b218541fb801e7b218
541fb801e6b218531fb801e5b218541fb801e4b218531fb801e3b218541f
b801e2b218541fb801e1b218541fb801e0b218531fb801dfb218531fb801
deb218541fb801ddb218541fb801dcb218541fb801dbb218541fb801dab2
18531fb801d9b218541fb801d8b218541fb801d7b217571fb801d6b21756
1fb801d5b217561fb801d4b217571fb801d3b217571fb801d2b217571fb8
01d1b217571fb801d0b217561fb801cfb217561fb801ceb217571fb801cd
b217571fb801ccb217571fb801cbb217571fb801cab217561fb801c9b217
561fb801c8b217571fb801c7b217571fb801c6b217571fb801c5b217571f
b801c4b217571fb801c3b217561fb801c2b217571fb801c1b217571fb801
c0b217571fb801bfb217561fb801beb217561fb801bdb217571fb801bcb2
17571fb801bbb217571fb801bab217571fb801b9b217571fb801b8b21756
1fb801b7b217571fb801b6b217571fb801b5b217571fb801b4b217571fb8
01b3b2163f1fb801b2b2165b1fb801b1b2165b1fb801b0b2165b1fb801af
b2165b1fb801aeb2165b1fb801adb2165b1fb801acb2165b1fb801abb216
5b1fb801aab2163e1fb801a9b2163f1fb801a8b2163f1fb801a7b2165b1f
b801a6b2165b1fb801a5b2165b1fb801a4b2165b1fb801a3b2165b1fb801
a2b2165b1fb801a1b2165b1fb801a0b2165b1fb8019fb2163e1fb8019eb2
163f1fb8019db2163f1fb8019cb2165b1fb8019bb2165b1fb8019ab2165b
1fb80199b2165b1fb80198b2163e1fb80197b2165b1fb80196b2165b1fb8
0195b2165b1fb80194b2163e1fb80193b2163f1fb80192b2163f1fb80191
b2165b1fb80190b2165b1fb8018fb2165b1fb8018eb2165b1fb8018db216
5b1fb8018cb2163f1fb8018bb2165b1fb8018ab2165b1fb80189b2165b1f
b80188b2165b1fb80187b2165b1fb80186b215611fb80185b215621fb801
84b215621fb80183b215661fb80182b215661fb80181b215551fb80180b2
15451fb8017fb215361fb8017eb215361fb8017db215611fb8017cb21562
1fb8017bb215621fb8017ab215641fb80179b215661fb80178b215661fb8
0177b215661fb80176b215661fb80175b215661fb80174b215661fb80173
b215451fb80172b215621fb80171b215621fb80170b215631fb8016fb215
641fb8016eb215661fb8016db215661fb8016cb215661fb8016bb215661f
b8016ab215661fb80169b215621fb80168b215621fb80167b215611fb801
66b215641fb80165b215641fb80164b215661fb80163b215661fb80162b2
15661fb80161b215661fb80160b215661fb8015fb215661fb8015eb21555
1fb8015db215451fb8015cb215451fb8015bb215361fb8015ab215611fb8
0159b215621fb80158b215621fb80157b215631fb80156b215641fb80155
b215661fb80154b215661fb80153b215661fb80152b215661fb80151b214
401fb80150b214551fb8014fb214561fb8014eb214831fb8014db2142d1f
b8014cb214401fb8014bb214401fb8014ab214411fb80149b214401fb801
48b214401fb80147b214411fb80146b2147e1fb80145b214871fb80144b2
147f1fb80143b214801fb80142b212461fb80141b212461fb80140b21246
1fb8013fb212461fb8013eb212441fb8013db212461fb8013cb211591fb8
013bb211591fb8013ab2115b1fb80139b2115b1fb80138b211471fb80137
b211581fb80136b2115a1fb80135b2115b1fb80134b2115b1fb80133b211
2c1fb80132b211471fb80131b211551fb80130b211571fb8012fb211571f
b8012eb211581fb8012db211591fb8012cb211591fb8012bb2115a1fb801
2ab2115a1fb80129b2115b1fb80128b2115b1fb80127b2115b1fb80126b2
115b1fb80125b211561fb80124b211561fb80123b211571fb80122b21158
1fb80121b211591fb80120b2115a1fb8011fb2115a1fb8011eb2115b1fb8
011db2115b1fb8011cb2115b1fb8011bb2115b1fb8011ab2115b1fb80119
b2105d1fb80118b2105e1fb80117b2105f1fb80116b2105f1fb80115b210
5f1fb80114b2105f1fb80113b2105f1fb80112b2105d1fb80111b2105e1f
b80110b2105f1fb8010fb2105f1fb8010eb2105f1fb8010db2105f1fb801
0cb2105d1fb8010bb2105e1fb8010ab2105f1fb80109b2105f1fb80108b2
105f1fb80107b2105f1fb80106b2105d1fb80105b2105e1fb80104b2105f
1fb80103b2105f1fb80102b2105f1fb80101b2105f1fb8010040ff0f621f
ff0f621ffe0f631ffd0f641ffc0f621ffb0f621ffa0f621ff90f631ff80f
641ff70f641ff60f641ff50f641ff40f621ff30f621ff20f631ff10f641f
f00f641fef0f641fee0f641fed0f621fec0f621feb0f631fea0f641fe90f
641fe80f641fe70f641fe60e671fe50e681fe40e681fe30e681fe20e681f
e10e671fe00e681fdf0e681fde0e681fdd0e671fdc0e681fdb0e681fda0e
681fd90e681fd80d6b1fd70d311fd60d6b1fd50d6c1fd40d261fd30d261f
d20d6c1fd10d2b1fd00d2b1fcf0d2b1fce0d6b1fcd0d6c1fcc0d6d1fcb0d
6b1fca0d6c1fc90d6d1fc80d6a1fc70d691fc60d681fc50d671fc40d261f
c30d311fc20d311fc10d311f40ffc00d311fbf0d311fbe0d311fbd0c711f
bc0c721fbb0c731fba0c741fb90c741fb80c741fb70c711fb60c711fb50c
721fb40c731fb30c741fb20c741fb10c741fb00c741faf0b791fae0b7a1f
ad0b7c1fac0b7d1fab0b7e1faa0b7e1fa90b7e1fa80b7e1fa70b7e1fa60b
7e1fa50b2d1fa40b7e1fa30b7e1fa20b791fa10b7e1fa00b6b1f9f0b791f
9e0b7e1f9d0b7e1f9c0b791f9b0b7a1f9a0b7c1f990b7d1f980b7e1f970b
7e1f960b7e1f950b7e1f940b7e1f930b7e1f920b6b1f910b2d1f900a4e1f
8f0a4f1f8e0a671f8d0aa51f8c0aa71f8503251f8403381f8301381f8255
805581ab80557f557d557eab7d550b7d010b7d1b7d4b7d7b7dab7ddb7d40
12060a7c557a557bab7a557955775578ab7755ba028600660285403c5576
ab755504751475747503f47501ab75014475013075010200751075207503
0c7455725573ab7255007250728072b072043bb072e072020072010ab8ff
c0b3721b1e46b8ffc0407c720d104671556f5570ab6f556e666d556a0325
1f6938675568ab67556638645565ab645563386255613860555f385d555e
ab5d555c385a555bab5a55593858555703251f5638545555ab5455533851
5552ab51554f384e554e03251f4d384b554cab4b554a38485549ab485547
3846554503381f001c101c201c0310b8ffc0404e1c1b1e46001b0142301b
401be01bf01b04001bb01bc01b03120f1a1f1a02290f1901434f19016f19
7f198f19030f18cf18024018292c460f17cf17df17ef1704134017292e46
0016101620160315b8ffc0b3164d5446b8ffc0b3163f4446b8ffc0b31631
3546b8ffc0404d162326460f15010f151f1502451f15010011e011f01103
15bf10cf10020f0f010f0fff0f02400f3135460f0e1f0e020f0e1f0eff0e
03400e3137460f0d1f0d020f0d1f0dff0d0316400d313746b8ffc040270c
5054460f0b1f0b02553f0b4f0b02400b3f4346400b2d3046000301200101
0001100120010308b8ffc0b301151f46b80100b316010501b80190b15453
2b2b4bb80800524bb008505bb00188b02553b00188b040515ab00688b000
555a5b58b101018e59b101024354b0144b515a58b101018e59858d8d0042
1d4bb01d5358b0a01d594bb0805358b0401d594bb0ff5358b0001db11600
42592b5e7375732b2b745e732b2b5e73742b73742b7374745e7301755e73
742b2b2b2b5e732b5e732b7374755e735e735e73755e732b5e73002b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b5e7375
5e732b2b5e735f73737373742b2b2b2b2b2b5e73742b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b012b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2bb10002435458
41ff0284006402830064028200640281006402800064027f0064027e0064
027d0064027c0064027b0064027a00640279006402780064027700640276
00640275006402740064027300640271006402700064026f0064026e0064
026d0064026c0064026b0064026a00640269006402680064026700640266
0064026500640264006402630064026200640261006402600064025f0064
025e0064025d0064025c0064025b0064025a006402590064025800640257
006402560064025500640254006402530064025200640251006402500064
024f0064024e0064024d0064024c0064024b0064024a0064024900640248
006402470064024600640245006402440064024300640242006402410064
02400064023f0064023e0064023d0064023c0064023b0064023a00640239
006402380064023700640236006402350064023400640233006402320064
0231006402300064022f0064022e0064022d0064022c0064022b0064022a
006402290064022800640227006402260064022500640224006402230064
022200640221006402200064021f0064021e0064021d0064021c0064021b
0064021a0064021900640218006402170064021600640215006402140064
02130064021200640211006402100064020f0064020e0064020d0064020c
0064020b0064020a00640209006402080064020700640206006402050064
020441ff00640203006402020064020100640200006401ff006401fe0064
01fd006401fc006401fb006401fa006401f9006401f8006401f7006401f6
006401f5006401f4006401f3006401f2006401f1006401f0006401ef0064
01ee006401ed006401ec006401eb006401ea006401e9006401e8006401e7
006401e6006401e5006401e4006401e3006401e2006401e1006401e00064
01df006401de006401dd006401dc006401db006401da006401d9006401d8
006401d7006401d6006401d5006401d4006401d3006401d2006401d10064
01d0006401cf006401ce006401cd006401cc006401cb006401ca006401c9
006401c8006401c7006401c6006401c5006401c4006401c3006401c20064
01c1006401c0006401bf006401be006401bd006401bc006401bb006401ba
006401b9006401b8006401b7006401b6006401b5006401b4006401b30064
01b2006401b1006401b0006401af006401ae006401ad006401ac006401ab
006401aa006401a9006401a8006401a7006401a6006401a5006401a40064
01a3006401a2006401a1006401a00064019f0064019e0064019d0064019c
0064019b0064019a00640199006401980064019700640196006401950064
0194006401930064019200640191006401900064018f0064018e0064018d
0064018c0064018b0064018a006401890064018800640187006401860064
0185006441800184006401830064018200640181006401800064017f0064
017e0064017d0064017c0064017b0064017a006401790064017800640177
006401760064017500640174006401730064017200640171006401700064
016f0064016e0064016d0064016c0064016b0064016a0064016900640168
006401670064016600640165006401640064016300640162006401610064
01600064015f0064015e0064015d0064015c0064015b0064015a00640159
006401580064015700640156006401550064015400640153006401520064
01500064014f0064014e0064014c0064014b0064014a0064014900640148
006401470064014600640145006401440064014300642b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b592b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b185f5e00>
[5977 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
2 3338 1004 <00020048ffed03c705210013002b00ea4019281201291101260d01260c01
2608012507012a03012902012db8ffc040250f024d602d01141810014d14
100f014d14160d014d140a0c014d14200b014d14180c014d14bb022d0000
0020ffe8b310014d20b8fff0b30f014d20b8ffeab30d014d20b8fff6b30c
014d20b8ffe8b60c014d24200120b8022d40090a200030004000030ab8ff
f040090f014d2f0a4f0a0200b8ffd040090f014d0a100f024d00b8ffc040
0a0f024d000a000a2d2c1bb8010ab20f5325b8010ab10556003fed3fed11
120139392f2f2b2b2b5d2b5d10e15d2b2b2b2b2b10e12b2b2b2b2b2b3130
5d2b5d5d5d5d5d5d5d5d01140e0223222e0235343e0233321e0207342e04
23220e0215141e0233323e0403c72f6db0817aa7662b306cb0807ba7662b
b00e1b2b3c4d30556a3d161e41654838553d281809028a95f6b16157a9f7
a094f7b16157a9f7ac619a76553719508cbc6c91cb803a24435e7285>PBAAAA+Calibri AddT42Char 
2 3696 1005 <000100ae0000039f0517002e00e54024241e01241d01241c01231b01241a
01241901261801261701291201291101122010014d30b8ffc0400d0f024d
60300100200b014d0029b8ffe8b310014d29b8fff0b30f014d29b8fff0b3
0d014d29b8fff6b30c014d29b8fff8b30b014d29b80211400e1e18200b01
4d180b200b014d0b11b8ffe0b30f014d11b8ffd4b30f024d11b8ffc0b310
014d11b8ffe0b30f014d11b8ffc0b30c014d11b8fff040090b014da01101
111312b8013fb323522910b80107b10654003fed323ffdcd012f5d2b2b2b
2b2b2bcd2bc42b33f12b2b2b2b2bc52b31305d2b002b015d5d5d5d5d5d5d
5d5d5d25140e022321222e0235343e02332111070606262635343e023725
3e0333321e02151133321e02039f060a0d07fd5c070c0b0606090d08010e
fa13170e0503060b09012a040c12181218201206ea080e090544131a1007
07101a13121a110903d8950a040d1e171118100c06bf0304040104070b06
fb8f09111a00>PBAAAA+Calibri AddT42Char 
2 4062 1006 <000100720000039c0521003e0094400d2936012b1e01291d01261e0140b8
ffc040170f024d604001161810014d16100c0d014c16200b014d16b8022d
b633253325330039b8ffe8b310014d39ba027f000bffc0b30c014d0bb8ff
e0400b0f014d0b1138392020391bb8012eb63316062e531039b80128b106
54003fed323f123939ed11392f123939012f2b2be12bcd39392f2f10e12b
2b2b31305d2b005d015d5d5d25140e022321222e0235343e0237133e0335
342e0223220e0223222e0235343e0633321e0215140e02070721321e0203
9c05090f09fd350e150f07030a0f0cfb576939121c3550343d6149310c07
0b0704020508183b596b3b5e8d5d2e1647866fcd0233080f0b054a121c13
0907101e16141e17170d010a5c9278622b2b4d3a2222282208121e150f16
100e15242318355c7a453e7b8faf72d609121b00>PBAAAA+Calibri AddT42Char 
2 4382 1007 <00010067ffed0392052100580105b9005affc0401c0f024d605a01310810
014d31100f014d31100c0d014c31200b014d31b80235400a4e53264e4e18
13014d40b8ffe840260f014d26200f014d40264e4e2640030e1b0810014d
1b100f014d1b100c0d014c1b200b014d1bb8fff8b30b014d1bb8022db500
080b014d00b8ffe8b40f024d000eb8ffe0b30f014d0eb8fff0b30f014d0e
b8ffc040130c014d0e3b400f014d3b400c0d014c2f3b0111b8ffc0b30f01
4d11b8ffc0400a0c0d014c3b113b111636b8010b400a49532cf320200549
5316b8010bb10556003fed3f12392fed3910ed1139392f2f2b2b5d2b2b01
2f2b2b2bd42b2be12b2b2b2b2b1217392f2f2f2b2b2b11123910e12b2b2b
2b31305d2b01140e0223222e0635343633321e0233323e0235342e022323
222e0235343e023333323e0235342e0223220e0223222e0235343e063332
1e0215140e0207151e0303923e74aa6b4171583a0f0806030e0d0935536f
44426444222b53794d7b080f0b07060b0e0971426949271a3451353a614c
320a070b0703020608133a556f405a885b2d203e5a3b436f502d0172598f
6637151d1f0e0e141d15241c202520223e55323758402207101a1513190f
07224059372849361f232823050f1b160f17110e132423182e5475473d69
51390b020735506b>PBAAAA+Calibri AddT42Char 
2 4870 1008 <00020030fffa03d30514002a002e00fb403a252e01262d01272c01242701
242601251c01261b01231a01241901251801251701261601261501261401
261001260f012405012404012b1b0130b8ffc040120f024d6030012d1618
0f024d162010014d16b8ffe0b30f014d16b8ffe0b70c014d161c2e2e10b8
fffc401d0f024d101810014d10100f014d10100d014d100a0c014d10100b
014d10bb021100270004ffd4b30f024d04b8ffd0b30c014d04b8ffe0400a
0b014d0404302f271b2eb8010b400a042b2110100a21520a55003f3f1239
2f123933ed3232111201392f2b2b2b33e12b2b2b2b2b2b321133cd2b2b2b
2b3231305d2b005d015d5d5d5d5d5d5d5d5d5d5d5d5d5d5d5d5d5d011406
232311140e0223222e02351121222e0235343e0237013e0333321e021511
3332160123012103d31412920814201918201307fdea0c100d0502060a07
01d205131e2c1e21311e10921115fea102fe5b01a701702126fef0080b08
0404080b08011006101e18131e19170d0312080c080305080d09fcc62302
e9fd3a00>PBAAAA+Calibri AddT42Char 
2 5264 1009 <00010065ffed0396050e003e00c1400d27370127360126080126030140b8
ffc0b60f024d60400137b8ffe8b310014d37b8fff0b40b0d014c37ba0211
0028ffc0402810014d28400f014d280e4f326f327f3203321d1810014d1d
100f014d1d100c0d014c1d200b014d1dba02330000ffe8b30f024d00b8ff
c0b50f014d004013b8ffc0b70f10014c13131836b8012c400c2c3af42022
012222052c5118b8010bb10556003fed3f12392f5ded10ed11392f2b0110
d62b2be12b2b2b2bc45dd4d42b2be12b2b31305d2b005d5d015d5d01140e
0223222e0635343e0233321e0233323e0235342e02232206232226351134
363321321e02151406232111363633321e0203964680b16c3c6c54360f06
050203080b070a2a4769484370512e27517c563d58261c181f1d023d080f
0a051412fe1d2349306fa66f3901a068a26f3a1119180e0c111a12111b11
08191d1a2044674a3e5f3f1f0c1a25020f212009121c132428fe95050235
618a>PBAAAA+Calibri AddT42Char 
2 606 44 <000100acfffa04500514002f00b8b43f3101230cb8ffe8b310014d0cb8ff
f0b30f014d0cb8fff0b30d014d0cb8fff6b30c014d0cb8ffe8b30b014d0c
b80211401c17240b1810014d0b100f014d0b100d014d0b0a0c014d0b180b
014d0bb802104017004015014d004013014d00401011014c00400c014d00
17b8ffc0b315014d17b8ffc0b613014d172a5224b8012c400fc00c01d00c
010c0c121d5212550555003f3f3f12392f5d71ed3f012f2b2bd42b2b2b2b
e12b2b2b2b2b3210e12b2b2b2b2b3231305d25140e0223222e0235112111
140e0223222e023511343e0233321e0215112111343e0233321e02150450
081421181a201408fdb308142119182214080814221819211408024d0814
201a182114081a080c070505070c08023efdc2080c070505070c0804da08
0c070505070c08fdfa0206080c070505070c0800>PBAAAA+Calibri AddT42Char 
2 926 75 <00020063ffed04e8052100130027007c401a141810014d14100f014d1414
0d014d14120c014d14180b014d14b80233400920003000800003001eb8ff
e8b310014d1eb8fff0b30f014d1eb8ffecb30d014d1eb8ffeeb30c014d1e
b8ffe8b30b014d1ebb0233000a00190129b20f5323b8012bb10556003fed
3fed012fe12b2b2b2b2bd45de12b2b2b2b2b313001140e0223222e023534
3e0233321e0207342e0223220e0215141e0233323e0204e84a93de9492d5
8b444a94de948fd48d45b5275b987070985f29265a9772719a5e2802969d
fcb15f57a6f6a099faaf5f56a5f3a96ebd8b4e548cbb6772c08b4d548fbc
>PBAAAA+Calibri AddT42Char 
2 0 0 <00050000fe7303d2050e000300070039004d004e005bbc000d0152001600
3a01b5b5154444082d07be0143000200200154000800010143400f04020d
b71a1a3f23b735068d031149b8012db43f078d0202003ffddefdce2ffdde
ed12392fed012fdde1dee110f1ce11392f33e1d4e1313001112111011121
1101140e020707140623222e02352726363333323e0235342623220e0223
222e02353436373e0333321e0203140e0223222e0235343e0233321e0201
03d2fc5a034ffd06027e233f5633051e1a0f140d0605021c18122d3c2510
535b253c2e1d0703070603050807283742224b6c4522da07111d15161d12
0808121d16151d1107fddb050efaf2050efb43046cfb9403063b5c3f2403
980a0802040606b81e18192a3b2149560f1310040b13101116080712110c
28445cfd86151c120808121c15151d120808121dfd4d>PBAAAA+Calibri AddT42Char 
PBAAAA+Calibri /CharStrings get begin
/zero 1004 def
/one 1005 def
/two 1006 def
/three 1007 def
/four 1008 def
/five 1009 def
/H 44 def
/O 75 def
end
PBAAAA+Calibri /Encoding get
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 72 /H put
dup 79 /O put
pop
end
%ADOEndSubsetFont
/VALTWG+Calibri /PBAAAA+Calibri findfont ct_VMDictPut
/VALTWG+Calibri*1 
[48{/.notdef}rp /zero /one /two /three /four /five 18{/.notdef}rp 
/H 6{/.notdef}rp /O 176{/.notdef}rp]
VALTWG+Calibri nf
VALTWG+Calibri*1 [8.0439 0 0 -8.0439 0 0 ]msf
50.0977 44.5005 mo
(H)sh
VALTWG+Calibri*1 [5.3626 0 0 -5.3626 0 0 ]msf
55.0849 44.5005 mo
(1)sh
VALTWG+Calibri*1 [8.0439 0 0 -8.0439 0 0 ]msf
74.9665 44.3763 mo
(H)sh
VALTWG+Calibri*1 [5.3626 0 0 -5.3626 0 0 ]msf
79.9537 44.3763 mo
(2)sh
VALTWG+Calibri*1 [8.0439 0 0 -8.0439 0 0 ]msf
21.3247 87.4757 mo
(H)sh
VALTWG+Calibri*1 [5.3626 0 0 -5.3626 0 0 ]msf
26.3119 87.4757 mo
(5)sh
VALTWG+Calibri*1 [8.0439 0 0 -8.0439 0 0 ]msf
26.8767 144.463 mo
(H)sh
VALTWG+Calibri*1 [5.3626 0 0 -5.3626 0 0 ]msf
31.8639 144.463 mo
(4)sh
VALTWG+Calibri*1 [8.0439 0 0 -8.0439 0 0 ]msf
64.6118 86.5161 mo
(O)sh
VALTWG+Calibri*1 [5.3626 0 0 -5.3626 0 0 ]msf
69.9208 86.5161 mo
(0)sh
VALTWG+Calibri*1 [8.0439 0 0 -8.0439 0 0 ]msf
50.4265 107.83 mo
(O)sh
VALTWG+Calibri*1 [5.3626 0 0 -5.3626 0 0 ]msf
55.7355 107.83 mo
(3)sh
93.5763 117.125 mo
93.5763 113.571 96.5656 110.69 100.253 110.69 cv
103.94 110.69 106.929 113.571 106.929 117.125 cv
106.929 120.68 103.94 123.561 100.253 123.561 cv
96.5656 123.561 93.5763 120.68 93.5763 117.125 cv
0 1 1 0 cmyk
ef
93.5763 117.125 mo
93.3618 117.125 li
93.3616 115.288 94.1356 113.622 95.383 112.421 cv
96.6302 111.218 98.3529 110.476 100.253 110.476 cv
102.153 110.476 103.875 111.218 105.123 112.421 cv
106.37 113.622 107.144 115.288 107.144 117.125 cv
107.144 118.963 106.37 120.629 105.123 121.83 cv
103.875 123.033 102.153 123.775 100.253 123.775 cv
98.3529 123.775 96.6302 123.033 95.383 121.83 cv
94.1356 120.629 93.3616 118.963 93.3618 117.125 cv
93.5763 117.125 li
93.7908 117.125 li
93.791 118.842 94.5116 120.394 95.6807 121.521 cv
96.8499 122.648 98.4654 123.346 100.253 123.346 cv
102.04 123.346 103.656 122.648 104.825 121.521 cv
105.994 120.394 106.714 118.842 106.715 117.125 cv
106.714 115.409 105.994 113.857 104.825 112.73 cv
103.656 111.603 102.04 110.905 100.253 110.905 cv
98.4654 110.905 96.8499 111.603 95.6807 112.73 cv
94.5116 113.857 93.791 115.409 93.7908 117.125 cv
93.5763 117.125 li
1 .816159 .15967 .0319219 cmyk
f
124.519 145.118 mo
124.519 143.342 125.959 141.901 127.736 141.901 cv
129.513 141.901 130.954 143.342 130.954 145.118 cv
130.954 146.895 129.513 148.336 127.736 148.336 cv
125.959 148.336 124.519 146.895 124.519 145.118 cv
.808743 .585351 0 0 cmyk
ef
124.519 145.118 mo
124.304 145.118 li
124.304 143.223 125.841 141.686 127.736 141.686 cv
129.632 141.686 131.168 143.223 131.168 145.118 cv
131.168 147.014 129.632 148.55 127.736 148.55 cv
125.841 148.55 124.304 147.014 124.304 145.118 cv
124.519 145.118 li
124.733 145.118 li
124.736 146.777 126.078 148.118 127.736 148.121 cv
129.394 148.118 130.736 146.777 130.739 145.118 cv
130.736 143.46 129.394 142.118 127.736 142.115 cv
126.078 142.118 124.736 143.46 124.733 145.118 cv
124.519 145.118 li
1 .816159 .15967 .0319219 cmyk
f
124.304 87.2021 mo
124.304 85.4253 125.745 83.9847 127.522 83.9847 cv
129.298 83.9847 130.739 85.4253 130.739 87.2021 cv
130.739 88.979 129.298 90.4197 127.522 90.4197 cv
125.745 90.4197 124.304 88.979 124.304 87.2021 cv
.808743 .585351 0 0 cmyk
ef
124.304 87.2021 mo
124.09 87.2021 li
124.09 85.3068 125.626 83.7703 127.522 83.7701 cv
129.417 83.7703 130.954 85.3068 130.954 87.2021 cv
130.954 89.0976 129.417 90.6341 127.522 90.6343 cv
125.626 90.6341 124.09 89.0976 124.09 87.2021 cv
124.304 87.2021 li
124.519 87.2021 li
124.522 88.8604 125.863 90.2023 127.522 90.2052 cv
129.18 90.2023 130.522 88.8604 130.525 87.2021 cv
130.522 85.5439 129.18 84.2021 127.522 84.1991 cv
125.863 84.2021 124.522 85.5439 124.519 87.2021 cv
124.304 87.2021 li
1 .816159 .15967 .0319219 cmyk
f
.750271 .679713 .654902 .901945 cmyk
%ADOBeginSubsetFont: PBAAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal VALTWG+Calibri gcheck setglobal} if
2 2402 970 <0002006bffed03bd0520003400480099b9004affc040170f024d604a012b
753f01663f01433f01343f01243f013fb8024340140c1c1c0c7a35016a35
014b35013a35012b350135b80243b670000120000100b8ffe0b30f014d00
b8ffe8b70f024d00300c010cb8fffa400a0f024d0c3aff30300526b80100
b2135944b80115b1055f003fed3fed12392fed012f2b5dd42b2b5d5de15d
5d5d5d5d12392f10e15d5d5d5d5d3231305d2b01140e0223222e0435343e
0433321e0615140e0223222e0223220e02073e0333321e0207342e022322
0e0207141e0233323e0203bd346ca671517c5c3d2510122e4f77a66e254c
402c0e07040201070b090b26364d335d865529031a414d563169905926ae
17365a42254a453f1a213f5e3f405e3e1d01a3559f7949284a6c8aa45e53
aa9e8b673c090f120b0d0f130e121a10080e110e4c80a95c0f1e180f3965
89603a5f42240d171f1281ae692d30516500>VALTWG+Calibri AddT42Char 
2 5626 1010 <ffff006bffed03bd0520020603ca0000>VALTWG+Calibri AddT42Char 
2 5642 1011 <00010063fffa03af050e001f00d7b90011ffe8400a1121014c111010014d
11b8ffe8b30f014d11b8fff0b30d014d11b8ffe8b30c014d11b8fff8400a
0b014d74110126110110b8ffe8400a1121014c101010014d10b8ffe8b30f
014d10b8fff0b30d014d10b8ffe8400b0b0c014c75100126100106b8fff0
b30b014d21b8ffc0b60f024d60210100b8ffc0b310014d00b8ffd8b40b01
4d0015b8ffc0b30c014d15b8ffe8b30b014d15b8ffe8b30f014d15b8ffe0
b50f024d150511b8012db31a510b55003f3fed32012f2b2b2b2bcd2b2b31
305d2b2b5d5d2b2b2b2b2b5d5d2b2b2b2b2b2b01140e0207010e03232226
2636370121222635343e023321321e0203af03050906fe2e050f17241a22
2611020601eafd931313050a0e0902f20e150b0604c4121d1b190efbce0c
0f0903060d130d044a2824131c130906121c>VALTWG+Calibri AddT42Char 
2 2750 972 <00030052ffed03ba05210027003700470182b90036fff0b40f11014c36b8
fff0b40c0d014c35b8fff0b40f11014c35b8fff0b40c0d014c34b8fff0b4
0f11014c34b8fff0b40c0d014c33b8fff0b311014d33b8fff0b30f014d49
b8ffc0b60f024d60490130b8fff0b40c0d014c30b8fff0b40f10014c30b8
fff0b40c0d014c30b8ffe0b30b014d30b8021940191428100c0d014c2810
0f10014c28100c0d014c28200b014d28b80218401a1e0f231e1e180f014d
14180f014d141e141e0a38100c0d014c38b8ffd040151d014d38100f1001
4c38100c0d014c38200b014d38ba02430000ffd4b30f024d00b8ffe0b30f
014d00b8ffc0b314014d00b8ffc0b310014d00b8ffc0b30d014d00b8ffc0
b40b014d0042b8fff0400a0c0d014c42301d014d42b8fff0b40f10014c42
b8fff0b40c0d014c42b8ffe0b30b014d42b8024340110a400b014d0a353d
052dfd195945fd055f003fed3fed123939012f2be12b2b2b2b2bd42b2b2b
2b2b2be12b2b2b2b2b1239392f2f2b2b12393910e12b2b2b2b10e12b2b2b
2b31305d2b002b2b2b2b2b2b2b2b01140e0223222e0235343e02372e0335
343e0233321e0215140e02071e0303342e0223220615141e021736361334
2e02270e0315141633323603ba3c71a66b649e6e3a284b6e453c5c402131
639966628f5d2c21405d3c476f4b27d81d3853356c6f1b39573c656c2a22
4567443f5f3d1f85848083014c54835a2e2a52784d3d66564b221f45515c
36447758332f516e3f335e544920234a555f025f2a443019625527433c39
1f347efda22e4b413d211f3e42492c616a6b>VALTWG+Calibri AddT42Char 
2 5960 1012 <ffff0052ffed03ba0521020603cc0000>VALTWG+Calibri AddT42Char 
VALTWG+Calibri /CharStrings get begin
/six 1010 def
/seven 1011 def
/eight 1012 def
end
VALTWG+Calibri /Encoding get
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/VALTWG+Calibri*1 
[48{/.notdef}rp /zero /one /two /three /four /five /six 
/seven /eight 15{/.notdef}rp /H 6{/.notdef}rp /O 176{/.notdef}rp]
VALTWG+Calibri nf
VALTWG+Calibri*1 [8.0439 0 0 -8.0439 0 0 ]msf
107.997 87.5559 mo
(H)sh
VALTWG+Calibri*1 [5.3626 0 0 -5.3626 0 0 ]msf
112.984 87.5559 mo
(7)sh
VALTWG+Calibri*1 [8.0439 0 0 -8.0439 0 0 ]msf
102.683 144.34 mo
(H)sh
VALTWG+Calibri*1 [5.3626 0 0 -5.3626 0 0 ]msf
107.67 144.34 mo
(8)sh
VALTWG+Calibri*1 [8.0439 0 0 -8.0439 0 0 ]msf
78.6865 107.926 mo
(O)sh
VALTWG+Calibri*1 [5.3626 0 0 -5.3626 0 0 ]msf
83.9954 107.926 mo
(6)sh
220.938 71.1143 mo
220.938 67.5603 223.928 64.6792 227.615 64.6792 cv
231.302 64.6792 234.291 67.5603 234.291 71.1143 cv
234.291 74.6684 231.302 77.5495 227.615 77.5495 cv
223.928 77.5495 220.938 74.6684 220.938 71.1143 cv
0 1 1 0 cmyk
ef
220.938 71.1143 mo
220.724 71.1143 li
220.724 69.2764 221.498 67.6113 222.745 66.4095 cv
223.992 65.2073 225.715 64.4647 227.615 64.4647 cv
229.515 64.4647 231.237 65.2073 232.485 66.4095 cv
233.732 67.6113 234.506 69.2764 234.506 71.1143 cv
234.506 72.9523 233.732 74.6173 232.485 75.8191 cv
231.237 77.0214 229.515 77.7641 227.615 77.764 cv
225.715 77.7641 223.992 77.0214 222.745 75.8191 cv
221.498 74.6173 220.724 72.9523 220.724 71.1143 cv
220.938 71.1143 li
221.153 71.1143 li
221.153 72.8305 221.874 74.383 223.043 75.5103 cv
224.212 76.637 225.827 77.3349 227.615 77.335 cv
229.402 77.3349 231.018 76.637 232.187 75.5103 cv
233.356 74.383 234.076 72.8305 234.077 71.1143 cv
234.076 69.3983 233.356 67.8457 232.187 66.7184 cv
231.018 65.5917 229.402 64.8937 227.615 64.8937 cv
225.827 64.8937 224.212 65.5917 223.043 66.7184 cv
221.874 67.8457 221.153 69.3983 221.153 71.1143 cv
220.938 71.1143 li
1 .816159 .15967 .0319219 cmyk
f
206.138 117.125 mo
206.138 113.571 209.127 110.69 212.814 110.69 cv
216.501 110.69 219.49 113.571 219.49 117.125 cv
219.49 120.68 216.501 123.561 212.814 123.561 cv
209.127 123.561 206.138 120.68 206.138 117.125 cv
0 1 1 0 cmyk
ef
206.137 117.125 mo
205.923 117.125 li
205.923 115.288 206.697 113.622 207.944 112.421 cv
209.191 111.218 210.914 110.476 212.814 110.476 cv
214.714 110.476 216.437 111.218 217.684 112.421 cv
218.931 113.622 219.705 115.288 219.705 117.125 cv
219.705 118.963 218.931 120.629 217.684 121.83 cv
216.437 123.033 214.714 123.775 212.814 123.775 cv
210.914 123.775 209.191 123.033 207.944 121.83 cv
206.697 120.629 205.923 118.963 205.923 117.125 cv
206.137 117.125 li
206.352 117.125 li
206.352 118.842 207.073 120.394 208.242 121.521 cv
209.411 122.648 211.027 123.346 212.814 123.346 cv
214.601 123.346 216.217 122.648 217.386 121.521 cv
218.555 120.394 219.276 118.842 219.276 117.125 cv
219.276 115.409 218.555 113.857 217.386 112.73 cv
216.217 111.603 214.601 110.905 212.814 110.905 cv
211.027 110.905 209.411 111.603 208.242 112.73 cv
207.073 113.857 206.352 115.409 206.352 117.125 cv
206.137 117.125 li
1 .816159 .15967 .0319219 cmyk
f
166.776 145.279 mo
166.776 143.502 168.217 142.062 169.994 142.062 cv
171.77 142.062 173.211 143.502 173.211 145.279 cv
173.211 147.056 171.77 148.497 169.994 148.497 cv
168.217 148.497 166.776 147.056 166.776 145.279 cv
.808743 .585351 0 0 cmyk
ef
166.776 145.279 mo
166.561 145.279 li
166.562 143.384 168.098 141.847 169.993 141.847 cv
171.889 141.847 173.425 143.384 173.425 145.279 cv
173.425 147.175 171.889 148.711 169.993 148.711 cv
168.098 148.711 166.562 147.175 166.561 145.279 cv
166.776 145.279 li
166.99 145.279 li
166.993 146.937 168.335 148.279 169.993 148.282 cv
171.652 148.279 172.994 146.937 172.997 145.279 cv
172.994 143.621 171.652 142.279 169.993 142.276 cv
168.335 142.279 166.993 143.621 166.99 145.279 cv
166.776 145.279 li
1 .816159 .15967 .0319219 cmyk
f
194.393 46.3927 mo
194.393 44.6159 195.834 43.1752 197.611 43.1752 cv
199.388 43.1752 200.829 44.6159 200.829 46.3927 cv
200.829 48.1695 199.388 49.6103 197.611 49.6103 cv
195.834 49.6103 194.393 48.1695 194.393 46.3927 cv
.808743 .585351 0 0 cmyk
ef
194.393 46.3927 mo
194.179 46.3927 li
194.179 44.4973 195.716 42.9608 197.611 42.9606 cv
199.506 42.9608 201.043 44.4973 201.043 46.3927 cv
201.043 48.2881 199.506 49.8246 197.611 49.8247 cv
195.716 49.8246 194.179 48.2881 194.179 46.3927 cv
194.393 46.3927 li
194.608 46.3927 li
194.611 48.0509 195.953 49.3928 197.611 49.3958 cv
199.269 49.3928 200.611 48.0509 200.614 46.3927 cv
200.611 44.7344 199.269 43.3927 197.611 43.3897 cv
195.953 43.3927 194.611 44.7344 194.608 46.3927 cv
194.393 46.3927 li
1 .816159 .15967 .0319219 cmyk
f
252.739 46.3927 mo
252.739 44.6159 254.179 43.1752 255.956 43.1752 cv
257.733 43.1752 259.174 44.6159 259.174 46.3927 cv
259.174 48.1695 257.733 49.6103 255.956 49.6103 cv
254.179 49.6103 252.739 48.1695 252.739 46.3927 cv
.808743 .585351 0 0 cmyk
ef
252.739 46.3927 mo
252.524 46.3927 li
252.524 44.4973 254.061 42.9608 255.956 42.9606 cv
257.851 42.9608 259.388 44.4973 259.388 46.3927 cv
259.388 48.2881 257.851 49.8246 255.956 49.8247 cv
254.061 49.8246 252.524 48.2881 252.524 46.3927 cv
252.739 46.3927 li
252.953 46.3927 li
252.956 48.0509 254.298 49.3928 255.956 49.3958 cv
257.614 49.3928 258.956 48.0509 258.959 46.3927 cv
258.956 44.7344 257.614 43.3927 255.956 43.3897 cv
254.298 43.3927 252.956 44.7344 252.953 46.3927 cv
252.739 46.3927 li
1 .816159 .15967 .0319219 cmyk
f
167.419 87.3095 mo
167.419 85.5326 168.86 84.0919 170.637 84.0919 cv
172.414 84.0919 173.855 85.5326 173.855 87.3095 cv
173.855 89.0863 172.414 90.527 170.637 90.527 cv
168.86 90.527 167.419 89.0863 167.419 87.3095 cv
.808743 .585351 0 0 cmyk
ef
167.419 87.3095 mo
167.205 87.3095 li
167.205 85.414 168.742 83.8775 170.637 83.8774 cv
172.532 83.8775 174.069 85.414 174.069 87.3095 cv
174.069 89.2048 172.532 90.7413 170.637 90.7415 cv
168.742 90.7413 167.205 89.2048 167.205 87.3095 cv
167.419 87.3095 li
167.634 87.3095 li
167.637 88.9676 168.979 90.3095 170.637 90.3125 cv
172.295 90.3095 173.637 88.9676 173.64 87.3095 cv
173.637 85.6512 172.295 84.3094 170.637 84.3064 cv
168.979 84.3094 167.637 85.6512 167.634 87.3095 cv
167.419 87.3095 li
1 .816159 .15967 .0319219 cmyk
f
.750271 .679713 .654902 .901945 cmyk
VALTWG+Calibri*1 [8.0439 0 0 -8.0439 0 0 ]msf
209.022 44.6409 mo
(H)sh
VALTWG+Calibri*1 [5.3626 0 0 -5.3626 0 0 ]msf
214.009 44.6409 mo
(1)sh
VALTWG+Calibri*1 [8.0439 0 0 -8.0439 0 0 ]msf
233.89 44.5168 mo
(H)sh
VALTWG+Calibri*1 [5.3626 0 0 -5.3626 0 0 ]msf
238.878 44.5168 mo
(2)sh
VALTWG+Calibri*1 [8.0439 0 0 -8.0439 0 0 ]msf
167.125 99.5121 mo
(H)sh
VALTWG+Calibri*1 [5.3626 0 0 -5.3626 0 0 ]msf
172.113 99.5121 mo
(5)sh
VALTWG+Calibri*1 [8.0439 0 0 -8.0439 0 0 ]msf
178.536 150.516 mo
(H)sh
VALTWG+Calibri*1 [5.3626 0 0 -5.3626 0 0 ]msf
183.523 150.516 mo
(4)sh
VALTWG+Calibri*1 [8.0439 0 0 -8.0439 0 0 ]msf
224.168 60.7202 mo
(O)sh
VALTWG+Calibri*1 [5.3626 0 0 -5.3626 0 0 ]msf
229.477 60.7202 mo
(0)sh
VALTWG+Calibri*1 [8.0439 0 0 -8.0439 0 0 ]msf
209.35 107.97 mo
(O)sh
VALTWG+Calibri*1 [5.3626 0 0 -5.3626 0 0 ]msf
214.66 107.97 mo
(3)sh
242.603 117.125 mo
242.603 113.571 245.592 110.69 249.28 110.69 cv
252.967 110.69 255.956 113.571 255.956 117.125 cv
255.956 120.68 252.967 123.561 249.28 123.561 cv
245.592 123.561 242.603 120.68 242.603 117.125 cv
0 1 1 0 cmyk
ef
242.603 117.125 mo
242.389 117.125 li
242.389 115.288 243.163 113.622 244.41 112.421 cv
245.657 111.218 247.38 110.476 249.28 110.476 cv
251.18 110.476 252.902 111.218 254.149 112.421 cv
255.397 113.622 256.171 115.288 256.171 117.125 cv
256.171 118.963 255.397 120.629 254.149 121.83 cv
252.902 123.033 251.18 123.775 249.28 123.775 cv
247.38 123.775 245.657 123.033 244.41 121.83 cv
243.163 120.629 242.389 118.963 242.389 117.125 cv
242.603 117.125 li
242.818 117.125 li
242.818 118.842 243.539 120.394 244.708 121.521 cv
245.877 122.648 247.492 123.346 249.28 123.346 cv
251.067 123.346 252.682 122.648 253.852 121.521 cv
255.021 120.394 255.741 118.842 255.742 117.125 cv
255.741 115.409 255.021 113.857 253.852 112.73 cv
252.682 111.603 251.067 110.905 249.28 110.905 cv
247.492 110.905 245.877 111.603 244.708 112.73 cv
243.539 113.857 242.818 115.409 242.818 117.125 cv
242.603 117.125 li
1 .816159 .15967 .0319219 cmyk
f
271.186 145.494 mo
271.186 143.717 272.627 142.276 274.404 142.276 cv
276.18 142.276 277.621 143.717 277.621 145.494 cv
277.621 147.271 276.18 148.711 274.404 148.711 cv
272.627 148.711 271.186 147.271 271.186 145.494 cv
.808743 .585351 0 0 cmyk
ef
271.186 145.494 mo
270.971 145.494 li
270.972 143.598 272.508 142.062 274.403 142.062 cv
276.299 142.062 277.835 143.598 277.836 145.494 cv
277.835 147.389 276.299 148.926 274.403 148.926 cv
272.508 148.926 270.972 147.389 270.971 145.494 cv
271.186 145.494 li
271.4 145.494 li
271.403 147.152 272.745 148.494 274.403 148.497 cv
276.062 148.494 277.404 147.152 277.407 145.494 cv
277.404 143.836 276.062 142.494 274.403 142.491 cv
272.745 142.494 271.403 143.836 271.4 145.494 cv
271.186 145.494 li
1 .816159 .15967 .0319219 cmyk
f
271.347 87.3095 mo
271.347 85.5326 272.788 84.0919 274.564 84.0919 cv
276.341 84.0919 277.782 85.5326 277.782 87.3095 cv
277.782 89.0863 276.341 90.527 274.564 90.527 cv
272.788 90.527 271.347 89.0863 271.347 87.3095 cv
.808743 .585351 0 0 cmyk
ef
271.347 87.3095 mo
271.132 87.3095 li
271.132 85.414 272.669 83.8775 274.564 83.8774 cv
276.46 83.8775 277.996 85.414 277.996 87.3095 cv
277.996 89.2048 276.46 90.7413 274.564 90.7415 cv
272.669 90.7413 271.132 89.2048 271.132 87.3095 cv
271.347 87.3095 li
271.561 87.3095 li
271.564 88.9676 272.906 90.3095 274.564 90.3125 cv
276.223 90.3095 277.564 88.9676 277.567 87.3095 cv
277.564 85.6512 276.223 84.3094 274.564 84.3064 cv
272.906 84.3094 271.564 85.6512 271.561 87.3095 cv
271.347 87.3095 li
1 .816159 .15967 .0319219 cmyk
f
.750271 .679713 .654902 .901945 cmyk
VALTWG+Calibri*1 [8.0439 0 0 -8.0439 0 0 ]msf
271.695 102.924 mo
(H)sh
VALTWG+Calibri*1 [5.3626 0 0 -5.3626 0 0 ]msf
276.682 102.924 mo
(7)sh
VALTWG+Calibri*1 [8.0439 0 0 -8.0439 0 0 ]msf
270.691 137.488 mo
(H)sh
VALTWG+Calibri*1 [5.3626 0 0 -5.3626 0 0 ]msf
275.679 137.488 mo
(8)sh
VALTWG+Calibri*1 [8.0439 0 0 -8.0439 0 0 ]msf
245.172 106.075 mo
(O)sh
VALTWG+Calibri*1 [5.3626 0 0 -5.3626 0 0 ]msf
250.481 106.075 mo
(6)sh
.911644 lw
0 lc
0 lj
8 ml
[] 0 dsh
true sadj
64.0132 75.5385 mo
38.7437 110.691 li
@
73.4397 75.5385 mo
100.25 110.691 li
@
.214504 lw
[.858018 .643513 ] 0 dsh
43.4359 121.63 mo
95.5154 121.63 li
@
95.5035 112.541 mo
68.694 77.3886 li
@
[1.71604 .643513 .214504 .643513 .214504 .643513 ] 0 dsh
68.7055 77.3886 mo
43.436 112.541 li
@
45.3665 117.126 mo
93.5339 117.126 li
@
.911644 lw
[] 0 dsh
234.318 71.1412 mo
271.369 87.3546 li
@
221.33 71.4125 mo
168.081 143.297 li
167.348 142.755 li
220.597 70.8698 li
221.33 71.4125 li
f
.214504 lw
[.858018 .643513 ] 0 dsh
220.964 71.1144 mo
173.855 87.3278 li
@
223.007 75.7394 mo
222.473 76.4103 li
222.305 76.2767 li
222.84 75.6057 li
223.007 75.7394 li
222.071 76.9135 mo
221.536 77.5844 li
221.369 77.4508 li
221.904 76.7798 li
222.071 76.9135 li
221.135 78.0876 mo
220.6 78.7585 li
220.433 78.6248 li
220.968 77.9539 li
221.135 78.0876 li
220.199 79.2617 mo
219.664 79.9326 li
219.497 79.7989 li
220.032 79.128 li
220.199 79.2617 li
219.263 80.4358 mo
218.728 81.1067 li
218.561 80.973 li
219.096 80.302 li
219.263 80.4358 li
218.327 81.6099 mo
217.792 82.2808 li
217.625 82.147 li
218.16 81.4761 li
218.327 81.6099 li
217.391 82.784 mo
216.856 83.4548 li
216.689 83.3211 li
217.223 82.6502 li
217.391 82.784 li
216.455 83.958 mo
215.92 84.6289 li
215.753 84.4952 li
216.287 83.8243 li
216.455 83.958 li
215.519 85.1321 mo
214.984 85.803 li
214.817 85.6693 li
215.351 84.9984 li
215.519 85.1321 li
214.583 86.3062 mo
214.048 86.9771 li
213.881 86.8434 li
214.415 86.1725 li
214.583 86.3062 li
213.647 87.4802 mo
213.112 88.1512 li
212.945 88.0174 li
213.479 87.3466 li
213.647 87.4802 li
212.711 88.6543 mo
212.176 89.3253 li
212.009 89.1915 li
212.543 88.5207 li
212.711 88.6543 li
211.775 89.8284 mo
211.24 90.4994 li
211.073 90.3656 li
211.607 89.6947 li
211.775 89.8284 li
210.839 91.0025 mo
210.304 91.6735 li
210.137 91.5397 li
210.671 90.8688 li
210.839 91.0025 li
209.903 92.1766 mo
209.368 92.8475 li
209.201 92.7138 li
209.735 92.0429 li
209.903 92.1766 li
208.967 93.3507 mo
208.432 94.0215 li
208.265 93.8879 li
208.799 93.2169 li
208.967 93.3507 li
208.031 94.5248 mo
207.496 95.1956 li
207.328 95.062 li
207.863 94.391 li
208.031 94.5248 li
207.095 95.6988 mo
206.56 96.3697 li
206.392 96.2361 li
206.927 95.5651 li
207.095 95.6988 li
206.159 96.8729 mo
205.624 97.5438 li
205.456 97.4101 li
205.991 96.7392 li
206.159 96.8729 li
205.223 98.047 mo
204.688 98.7179 li
204.52 98.5842 li
205.055 97.9133 li
205.223 98.047 li
204.287 99.2211 mo
203.752 99.892 li
203.584 99.7583 li
204.119 99.0873 li
204.287 99.2211 li
203.351 100.395 mo
202.816 101.066 li
202.648 100.932 li
203.183 100.261 li
203.351 100.395 li
202.415 101.569 mo
201.88 102.24 li
201.712 102.106 li
202.247 101.436 li
202.415 101.569 li
201.479 102.743 mo
200.944 103.414 li
200.776 103.281 li
201.311 102.61 li
201.479 102.743 li
200.543 103.917 mo
200.008 104.588 li
199.84 104.455 li
200.375 103.784 li
200.543 103.917 li
199.607 105.091 mo
199.072 105.762 li
198.904 105.629 li
199.439 104.958 li
199.607 105.091 li
198.671 106.266 mo
198.136 106.936 li
197.968 106.803 li
198.503 106.132 li
198.671 106.266 li
197.735 107.44 mo
197.2 108.111 li
197.032 107.977 li
197.567 107.306 li
197.735 107.44 li
196.799 108.614 mo
196.264 109.285 li
196.096 109.151 li
196.631 108.48 li
196.799 108.614 li
195.863 109.788 mo
195.328 110.459 li
195.16 110.325 li
195.695 109.654 li
195.863 109.788 li
194.927 110.962 mo
194.392 111.633 li
194.224 111.499 li
194.759 110.828 li
194.927 110.962 li
193.991 112.136 mo
193.456 112.807 li
193.288 112.673 li
193.823 112.002 li
193.991 112.136 li
193.055 113.31 mo
192.52 113.981 li
192.352 113.847 li
192.887 113.176 li
193.055 113.31 li
192.119 114.484 mo
191.584 115.155 li
191.416 115.021 li
191.951 114.35 li
192.119 114.484 li
191.183 115.658 mo
190.648 116.329 li
190.48 116.195 li
191.015 115.525 li
191.183 115.658 li
190.247 116.832 mo
189.712 117.503 li
189.544 117.369 li
190.079 116.699 li
190.247 116.832 li
189.311 118.006 mo
188.776 118.677 li
188.608 118.544 li
189.143 117.873 li
189.311 118.006 li
188.375 119.18 mo
187.84 119.851 li
187.672 119.718 li
188.207 119.047 li
188.375 119.18 li
187.439 120.355 mo
186.904 121.025 li
186.736 120.892 li
187.271 120.221 li
187.439 120.355 li
186.503 121.529 mo
185.968 122.2 li
185.8 122.066 li
186.335 121.395 li
186.503 121.529 li
185.567 122.703 mo
185.032 123.374 li
184.864 123.24 li
185.399 122.569 li
185.567 122.703 li
184.631 123.877 mo
184.096 124.548 li
183.928 124.414 li
184.463 123.743 li
184.631 123.877 li
183.695 125.051 mo
183.16 125.722 li
182.992 125.588 li
183.527 124.917 li
183.695 125.051 li
182.759 126.225 mo
182.224 126.896 li
182.056 126.762 li
182.591 126.091 li
182.759 126.225 li
181.823 127.399 mo
181.288 128.07 li
181.12 127.936 li
181.655 127.265 li
181.823 127.399 li
180.887 128.573 mo
180.352 129.244 li
180.184 129.11 li
180.719 128.439 li
180.887 128.573 li
179.951 129.747 mo
179.416 130.418 li
179.248 130.284 li
179.783 129.613 li
179.951 129.747 li
179.015 130.921 mo
178.48 131.592 li
178.312 131.458 li
178.847 130.788 li
179.015 130.921 li
178.079 132.095 mo
177.544 132.766 li
177.376 132.632 li
177.911 131.962 li
178.079 132.095 li
177.143 133.269 mo
176.608 133.94 li
176.44 133.807 li
176.975 133.136 li
177.143 133.269 li
176.207 134.443 mo
175.672 135.114 li
175.504 134.981 li
176.039 134.31 li
176.207 134.443 li
175.271 135.618 mo
174.736 136.288 li
174.568 136.155 li
175.103 135.484 li
175.271 135.618 li
174.335 136.792 mo
173.8 137.463 li
173.632 137.329 li
174.167 136.658 li
174.335 136.792 li
173.399 137.966 mo
172.864 138.637 li
172.696 138.503 li
173.231 137.832 li
173.399 137.966 li
172.463 139.14 mo
171.928 139.811 li
171.76 139.677 li
172.295 139.006 li
172.463 139.14 li
171.527 140.314 mo
170.992 140.985 li
170.824 140.851 li
171.359 140.18 li
171.527 140.314 li
170.591 141.488 mo
170.077 142.132 li
169.91 141.998 li
170.423 141.354 li
170.591 141.488 li
f
207.957 112.577 mo
207.676 110.884 li
207.888 110.849 li
208.169 112.541 li
207.957 112.577 li
207.571 110.249 mo
207.29 108.556 li
207.501 108.521 li
207.782 110.214 li
207.571 110.249 li
207.184 107.921 mo
206.903 106.228 li
207.115 106.193 li
207.396 107.886 li
207.184 107.921 li
206.798 105.594 mo
206.517 103.901 li
206.728 103.866 li
207.009 105.558 li
206.798 105.594 li
206.411 103.266 mo
206.13 101.573 li
206.342 101.538 li
206.623 103.231 li
206.411 103.266 li
206.025 100.938 mo
205.744 99.2453 li
205.955 99.2101 li
206.236 100.903 li
206.025 100.938 li
205.638 98.6105 mo
205.357 96.9176 li
205.569 96.8825 li
205.85 98.5754 li
205.638 98.6105 li
205.252 96.2828 mo
204.971 94.59 li
205.182 94.5548 li
205.463 96.2477 li
205.252 96.2828 li
204.865 93.9551 mo
204.584 92.2623 li
204.796 92.2271 li
205.077 93.92 li
204.865 93.9551 li
204.479 91.6275 mo
204.198 89.9346 li
204.409 89.8995 li
204.69 91.5923 li
204.479 91.6275 li
204.092 89.2997 mo
203.811 87.6069 li
204.023 87.5718 li
204.304 89.2646 li
204.092 89.2997 li
203.706 86.9721 mo
203.425 85.2793 li
203.636 85.2441 li
203.917 86.937 li
203.706 86.9721 li
203.319 84.6445 mo
203.038 82.9516 li
203.25 82.9164 li
203.531 84.6093 li
203.319 84.6445 li
202.933 82.3167 mo
202.652 80.6239 li
202.863 80.5888 li
203.144 82.2816 li
202.933 82.3167 li
202.546 79.9891 mo
202.265 78.2962 li
202.477 78.2611 li
202.758 79.954 li
202.546 79.9891 li
202.16 77.6614 mo
201.879 75.9685 li
202.09 75.9334 li
202.371 77.6262 li
202.16 77.6614 li
201.773 75.3337 mo
201.492 73.6409 li
201.704 73.6058 li
201.985 75.2986 li
201.773 75.3337 li
201.387 73.0061 mo
201.106 71.3132 li
201.317 71.278 li
201.598 72.9709 li
201.387 73.0061 li
201 70.6784 mo
200.719 68.9855 li
200.931 68.9504 li
201.212 70.6432 li
201 70.6784 li
200.614 68.3507 mo
200.333 66.6579 li
200.544 66.6227 li
200.825 68.3156 li
200.614 68.3507 li
200.227 66.023 mo
199.946 64.3301 li
200.158 64.295 li
200.439 65.9879 li
200.227 66.023 li
199.841 63.6954 mo
199.56 62.0025 li
199.771 61.9674 li
200.052 63.6602 li
199.841 63.6954 li
199.454 61.3677 mo
199.173 59.6749 li
199.385 59.6396 li
199.666 61.3326 li
199.454 61.3677 li
199.068 59.04 mo
198.787 57.3471 li
198.998 57.312 li
199.28 59.0049 li
199.068 59.04 li
198.681 56.7124 mo
198.4 55.0195 li
198.612 54.9844 li
198.893 56.6772 li
198.681 56.7124 li
198.295 54.3846 mo
198.014 52.6918 li
198.225 52.6566 li
198.507 54.3495 li
198.295 54.3846 li
197.908 52.057 mo
197.627 50.3641 li
197.839 50.329 li
198.12 52.0219 li
197.908 52.057 li
197.522 49.7293 mo
197.505 49.628 li
197.717 49.5929 li
197.733 49.6942 li
197.522 49.7293 li
f
227.705 77.6187 mo
226.596 78.9288 li
226.432 78.7903 li
227.541 77.4802 li
227.705 77.6187 li
226.18 79.42 mo
225.072 80.7302 li
224.908 80.5915 li
226.017 79.2815 li
226.18 79.42 li
224.656 81.2214 mo
223.548 82.5314 li
223.384 82.3928 li
224.493 81.0828 li
224.656 81.2214 li
223.132 83.0227 mo
222.024 84.3327 li
221.86 84.1942 li
222.969 82.8841 li
223.132 83.0227 li
221.608 84.8239 mo
220.5 86.134 li
220.336 85.9955 li
221.444 84.6854 li
221.608 84.8239 li
220.084 86.6252 mo
218.976 87.9352 li
218.812 87.7967 li
219.92 86.4867 li
220.084 86.6252 li
218.56 88.4266 mo
217.452 89.7366 li
217.288 89.598 li
218.396 88.288 li
218.56 88.4266 li
217.036 90.2279 mo
215.928 91.5379 li
215.764 91.3993 li
216.872 90.0892 li
217.036 90.2279 li
215.512 92.0291 mo
214.404 93.3391 li
214.24 93.2006 li
215.348 91.8905 li
215.512 92.0291 li
213.988 93.8304 mo
212.88 95.1404 li
212.716 95.0019 li
213.824 93.6919 li
213.988 93.8304 li
212.464 95.6317 mo
211.355 96.9418 li
211.192 96.8032 li
212.3 95.4932 li
212.464 95.6317 li
210.94 97.433 mo
209.831 98.7431 li
209.668 98.6044 li
210.776 97.2944 li
210.94 97.433 li
209.416 99.2343 mo
208.307 100.544 li
208.143 100.406 li
209.252 99.0957 li
209.416 99.2343 li
207.892 101.036 mo
206.783 102.346 li
206.619 102.207 li
207.728 100.897 li
207.892 101.036 li
206.368 102.837 mo
205.259 104.147 li
205.095 104.008 li
206.204 102.698 li
206.368 102.837 li
204.843 104.638 mo
203.735 105.948 li
203.571 105.81 li
204.68 104.5 li
204.843 104.638 li
203.319 106.439 mo
202.211 107.749 li
202.047 107.611 li
203.156 106.301 li
203.319 106.439 li
201.795 108.241 mo
200.687 109.551 li
200.523 109.412 li
201.632 108.102 li
201.795 108.241 li
200.271 110.042 mo
199.163 111.352 li
198.999 111.213 li
200.107 109.903 li
200.271 110.042 li
198.747 111.843 mo
197.639 113.153 li
197.475 113.015 li
198.583 111.705 li
198.747 111.843 li
197.223 113.645 mo
196.115 114.955 li
195.951 114.816 li
197.059 113.506 li
197.223 113.645 li
195.699 115.446 mo
194.591 116.756 li
194.427 116.617 li
195.535 115.307 li
195.699 115.446 li
194.175 117.247 mo
193.067 118.557 li
192.903 118.419 li
194.011 117.109 li
194.175 117.247 li
192.651 119.049 mo
191.542 120.359 li
191.379 120.22 li
192.487 118.91 li
192.651 119.049 li
191.127 120.85 mo
190.018 122.16 li
189.855 122.021 li
190.963 120.711 li
191.127 120.85 li
189.603 122.651 mo
188.494 123.961 li
188.331 123.823 li
189.439 122.513 li
189.603 122.651 li
188.079 124.452 mo
186.97 125.762 li
186.806 125.624 li
187.915 124.314 li
188.079 124.452 li
186.555 126.254 mo
185.446 127.564 li
185.282 127.425 li
186.391 126.115 li
186.555 126.254 li
185.03 128.055 mo
183.922 129.365 li
183.758 129.226 li
184.867 127.916 li
185.03 128.055 li
183.506 129.856 mo
182.398 131.166 li
182.234 131.028 li
183.343 129.718 li
183.506 129.856 li
181.982 131.658 mo
180.874 132.968 li
180.71 132.829 li
181.819 131.519 li
181.982 131.658 li
180.458 133.459 mo
179.35 134.769 li
179.186 134.63 li
180.295 133.32 li
180.458 133.459 li
178.934 135.26 mo
177.826 136.57 li
177.662 136.432 li
178.771 135.122 li
178.934 135.26 li
177.41 137.061 mo
176.302 138.371 li
176.138 138.233 li
177.246 136.923 li
177.41 137.061 li
175.886 138.863 mo
174.778 140.173 li
174.614 140.034 li
175.722 138.724 li
175.886 138.863 li
174.362 140.664 mo
173.254 141.974 li
173.09 141.835 li
174.198 140.525 li
174.362 140.664 li
172.838 142.465 mo
172.328 143.068 li
172.164 142.93 li
172.674 142.327 li
172.838 142.465 li
f
[1.71604 .643513 .214504 .643513 .214504 .643513 ] 0 dsh
244.517 112.559 mo
197.611 49.6104 li
@
232.449 75.742 mo
231.338 77.0497 li
231.175 76.9108 li
232.286 75.6031 li
232.449 75.742 li
230.921 77.54 mo
230.782 77.7034 li
230.619 77.5646 li
230.758 77.4011 li
230.921 77.54 li
230.366 78.1938 mo
230.227 78.3573 li
230.063 78.2184 li
230.202 78.0549 li
230.366 78.1938 li
229.81 78.8477 mo
228.699 80.1552 li
228.535 80.0164 li
229.647 78.7087 li
229.81 78.8477 li
228.282 80.6456 mo
228.143 80.8091 li
227.98 80.6702 li
228.119 80.5067 li
228.282 80.6456 li
227.726 81.2995 mo
227.588 81.4629 li
227.424 81.324 li
227.563 81.1606 li
227.726 81.2995 li
227.171 81.9533 mo
226.06 83.2609 li
225.896 83.122 li
227.007 81.8144 li
227.171 81.9533 li
225.643 83.7513 mo
225.504 83.9147 li
225.34 83.7758 li
225.479 83.6124 li
225.643 83.7513 li
225.087 84.4051 mo
224.948 84.5685 li
224.785 84.4296 li
224.924 84.2662 li
225.087 84.4051 li
224.532 85.0588 mo
223.42 86.3665 li
223.257 86.2276 li
224.368 84.92 li
224.532 85.0588 li
223.004 86.8568 mo
222.865 87.0203 li
222.701 86.8814 li
222.84 86.718 li
223.004 86.8568 li
222.448 87.5106 mo
222.309 87.6742 li
222.146 87.5353 li
222.285 87.3717 li
222.448 87.5106 li
221.892 88.1645 mo
220.781 89.4721 li
220.618 89.3332 li
221.729 88.0256 li
221.892 88.1645 li
220.364 89.9624 mo
220.225 90.1259 li
220.062 89.987 li
220.201 89.8235 li
220.364 89.9624 li
219.809 90.6163 mo
219.67 90.7797 li
219.506 90.6408 li
219.645 90.4774 li
219.809 90.6163 li
219.253 91.2701 mo
218.142 92.5777 li
217.978 92.4388 li
219.09 91.1312 li
219.253 91.2701 li
217.725 93.0681 mo
217.586 93.2315 li
217.423 93.0926 li
217.562 92.9292 li
217.725 93.0681 li
217.17 93.7219 mo
217.031 93.8854 li
216.867 93.7464 li
217.006 93.583 li
217.17 93.7219 li
216.614 94.3757 mo
215.503 95.6833 li
215.339 95.5444 li
216.45 94.2367 li
216.614 94.3757 li
215.086 96.1737 mo
214.947 96.3372 li
214.784 96.1982 li
214.922 96.0348 li
215.086 96.1737 li
214.53 96.8275 mo
214.391 96.991 li
214.228 96.8521 li
214.367 96.6886 li
214.53 96.8275 li
213.975 97.4813 mo
212.863 98.789 li
212.7 98.65 li
213.811 97.3424 li
213.975 97.4813 li
212.447 99.2793 mo
212.308 99.4427 li
212.144 99.3039 li
212.283 99.1404 li
212.447 99.2793 li
211.891 99.9331 mo
211.752 100.097 li
211.589 99.9576 li
211.728 99.7942 li
211.891 99.9331 li
211.335 100.587 mo
210.224 101.895 li
210.061 101.756 li
211.172 100.448 li
211.335 100.587 li
209.807 102.385 mo
209.669 102.548 li
209.505 102.409 li
209.644 102.246 li
209.807 102.385 li
209.252 103.039 mo
209.113 103.202 li
208.949 103.063 li
209.088 102.9 li
209.252 103.039 li
208.696 103.693 mo
207.585 105 li
207.422 104.861 li
208.533 103.554 li
208.696 103.693 li
207.168 105.491 mo
207.029 105.654 li
206.866 105.515 li
207.005 105.352 li
207.168 105.491 li
206.613 106.144 mo
206.474 106.308 li
206.31 106.169 li
206.449 106.005 li
206.613 106.144 li
206.057 106.798 mo
204.946 108.106 li
204.782 107.967 li
205.893 106.659 li
206.057 106.798 li
204.529 108.596 mo
204.39 108.76 li
204.227 108.621 li
204.366 108.457 li
204.529 108.596 li
203.973 109.25 mo
203.834 109.413 li
203.671 109.274 li
203.81 109.111 li
203.973 109.25 li
203.418 109.904 mo
202.307 111.211 li
202.143 111.073 li
203.254 109.765 li
203.418 109.904 li
201.89 111.702 mo
201.751 111.865 li
201.587 111.726 li
201.726 111.563 li
201.89 111.702 li
201.334 112.356 mo
201.195 112.519 li
201.032 112.38 li
201.171 112.217 li
201.334 112.356 li
200.778 113.009 mo
199.667 114.317 li
199.504 114.178 li
200.615 112.87 li
200.778 113.009 li
199.251 114.807 mo
199.112 114.971 li
198.948 114.832 li
199.087 114.668 li
199.251 114.807 li
198.695 115.461 mo
198.556 115.625 li
198.393 115.486 li
198.531 115.322 li
198.695 115.461 li
198.139 116.115 mo
197.028 117.423 li
196.865 117.284 li
197.976 115.976 li
198.139 116.115 li
196.611 117.913 mo
196.472 118.076 li
196.309 117.938 li
196.448 117.774 li
196.611 117.913 li
196.056 118.567 mo
195.917 118.73 li
195.753 118.591 li
195.892 118.428 li
196.056 118.567 li
195.5 119.221 mo
194.389 120.528 li
194.225 120.389 li
195.337 119.082 li
195.5 119.221 li
193.972 121.019 mo
193.833 121.182 li
193.67 121.043 li
193.809 120.88 li
193.972 121.019 li
193.416 121.672 mo
193.278 121.836 li
193.114 121.697 li
193.253 121.533 li
193.416 121.672 li
192.861 122.326 mo
191.75 123.634 li
191.586 123.495 li
192.697 122.187 li
192.861 122.326 li
191.333 124.124 mo
191.194 124.288 li
191.03 124.149 li
191.169 123.985 li
191.333 124.124 li
190.777 124.778 mo
190.638 124.941 li
190.475 124.803 li
190.614 124.639 li
190.777 124.778 li
190.222 125.432 mo
189.11 126.739 li
188.947 126.601 li
190.058 125.293 li
190.222 125.432 li
188.694 127.23 mo
188.555 127.393 li
188.391 127.254 li
188.53 127.091 li
188.694 127.23 li
188.138 127.884 mo
187.999 128.047 li
187.836 127.908 li
187.975 127.745 li
188.138 127.884 li
187.582 128.537 mo
186.471 129.845 li
186.308 129.706 li
187.419 128.398 li
187.582 128.537 li
186.054 130.335 mo
185.916 130.499 li
185.752 130.36 li
185.891 130.196 li
186.054 130.335 li
185.499 130.989 mo
185.36 131.153 li
185.196 131.014 li
185.335 130.85 li
185.499 130.989 li
184.943 131.643 mo
183.832 132.951 li
183.668 132.812 li
184.78 131.504 li
184.943 131.643 li
183.415 133.441 mo
183.276 133.604 li
183.113 133.466 li
183.252 133.302 li
183.415 133.441 li
182.86 134.095 mo
182.721 134.258 li
182.557 134.119 li
182.696 133.956 li
182.86 134.095 li
182.304 134.749 mo
181.193 136.056 li
181.029 135.917 li
182.141 134.61 li
182.304 134.749 li
180.776 136.547 mo
180.637 136.71 li
180.474 136.571 li
180.612 136.408 li
180.776 136.547 li
180.22 137.2 mo
180.081 137.364 li
179.918 137.225 li
180.057 137.061 li
180.22 137.2 li
179.665 137.854 mo
178.553 139.162 li
178.39 139.023 li
179.501 137.715 li
179.665 137.854 li
178.137 139.652 mo
177.998 139.816 li
177.834 139.677 li
177.973 139.513 li
178.137 139.652 li
177.581 140.306 mo
177.442 140.469 li
177.279 140.331 li
177.418 140.167 li
177.581 140.306 li
177.025 140.96 mo
175.914 142.267 li
175.751 142.128 li
176.862 140.821 li
177.025 140.96 li
175.497 142.758 mo
175.359 142.921 li
175.195 142.782 li
175.334 142.619 li
175.497 142.758 li
174.942 143.412 mo
174.803 143.575 li
174.639 143.436 li
174.778 143.273 li
174.942 143.412 li
174.386 144.065 mo
173.293 145.352 li
173.13 145.213 li
174.223 143.926 li
174.386 144.065 li
f
.750271 .679713 .654902 .901945 cmyk
%ADOBeginSubsetFont: PBAAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal VALTWG+Calibri gcheck setglobal} if

2 0 3 <> VALTWG+Calibri AddT42Char 
2 1166 100 <0001000ffffa03d7050e00220065b718400d014d181100b8ffc0b40d014d
0006b8ffe8b310014d06b8fff0b30f014d06b8fff0b30d014d06b8fff6b3
0c014d06b8ffe8b30b014d06ba02110011ffc0b50d014d110612b80128b3
1d510c55003f3fed32012f2bf12b2b2b2b2bc52b10c42b313001140e0223
2111140e0223222e02351121222e0235343e023321321e0203d704090d08
fe940814211918221408fe94080d080505080d080384080d090404c4131c
1108fb9e080c070505070c08046208111c13131d120808121d00>VALTWG+Calibri AddT42Char 
2 1372 286 <0002005dffed039903ca002b003400ae402a2f363f366f360313200d014d
13200f014d1313212c100c014d2c180b014d2c100d014d2c100f10014c2c
b801f9b5442ba42b022bb8fff0b50f014d2b3404b8ffe0b30d014d04b8ff
eeb30c014d04b8ffe0b30b014d04b8ffe8b40f10014c04b8020a4021212c
c78004900402c00401d0040104041c2fdc264a18ea600e700e020e09ea1c
4d003ffdd45ded3fed12392f5d7172ed012fe12b2b2b2b32dd2b5de12b2b
2b2b12392f2b2b31305d0114062321141e0233323e0233321e0215140e06
23222e0235343e0233321e021527362623220e020703992719fdb21e4670
514064492f0c070b06030203070b365671406fa7723a3c71a0636a95602d
a60379773d5c3e2202020227214b78562e151a15070e19120d130f0c0b19
18133e7ab87a74b9814544739b581382942e4c653700>VALTWG+Calibri AddT42Char 
2 1828 393 <00020099fe9403d503ca002a003d0080b53f3f0121360ab8fff0b30d014d
0ab8fff6b30c014d0ab8fff0b40f10014c0ab8ffe8b30b014d0ab801f840
17152b200d014d2b120c014d2b180f10014c2b180b014d2bb8020a400900
150a363521040530b80105b6264a1b49104f39b80105b1054d003fed3f3f
3fed121739012fd4e12b2b2b2b10e12b2b2b2b323931305d01140e022322
2e022711140e0223222e023511343e0233321e0215153e0333321e020734
2e0223220e020711161633323e0203d53363925e28444140240812201918
20130706121c14151b1207294c4d512d628a5728ae15335640203e404627
447a433e59371a01e976bc834710223423fe3e080c080404080c0804e909
0b080303080b09792a3e29154c84af754581643c13294331fe9a53583c64
7c00>VALTWG+Calibri AddT42Char 
2 2130 455 <00010022fe94037c03bc00240052b9001bfff040350b014d371b01291b01
18180b014d261801260e360e022709011a400b014d3a1a0119380b014d3b
19011f49190a13490a4b044f004b003f3f3f3f12393f31305d2b5d2b015d
5d5d2b5d5d2b2103060623222e023713262627012634363633321e021701
33133e023332161614070233780631321a201102067c091003febf081024
1e1e22140905010103f8061122201c241106feb51011050c140e01390412
0a035c15180e0503080f0dfd2e02d6130b05050e1812>VALTWG+Calibri AddT42Char 
VALTWG+Calibri /CharStrings get begin
/space 3 def
/T 100 def
/e 286 def
/p 393 def
/y 455 def
end
VALTWG+Calibri /Encoding get
dup 32 /space put
dup 84 /T put
dup 101 /e put
dup 112 /p put
dup 121 /y put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/VALTWG+Calibri*1 
[32{/.notdef}rp /space 15{/.notdef}rp /zero /one /two /three /four 
/five /six /seven /eight 15{/.notdef}rp /H 6{/.notdef}rp /O 
4{/.notdef}rp /T 16{/.notdef}rp /e 10{/.notdef}rp /p 8{/.notdef}rp /y 
134{/.notdef}rp]
VALTWG+Calibri nf
VALTWG+Calibri*1 [8.0439 0 0 -8.0439 0 0 ]msf
55.7028 136.804 mo
(Type 66)
[3.53931 3.64632 4.23667 4.02196 1.82595 4.07587 0 ]xsh
256.527 68.359 mo
(Type 66)
[3.53931 3.64633 4.23666 4.02197 1.82593 4.0759 0 ]xsh
.446884 lw
[] 0 dsh
269.414 72.2405 mo
253.599 76.784 li
.808743 .585351 0 0 cmyk
@
253.658 75.3718 mo
251.452 77.4007 li
254.399 77.949 li
cp
ef
.750271 .679713 .654902 .901945 cmyk
VALTWG+Calibri*1 [8.0439 0 0 -8.0439 0 0 ]msf
216.661 143.302 mo
(Type 67)
[3.53931 3.64633 4.23666 4.02196 1.82596 4.07587 0 ]xsh
229.518 134.188 mo
230.589 97.2115 li
.808743 .585351 0 0 cmyk
@
231.916 97.6969 mo
230.654 94.978 li
229.236 97.6196 li
cp
ef
.750271 .679713 .654902 .901945 cmyk
VALTWG+Calibri*1 [8.0439 0 0 -8.0439 0 0 ]msf
149.768 58.5793 mo
(Type 57)
[3.53931 3.64633 4.23666 4.02196 1.82596 4.07587 0 ]xsh
178.735 55.9382 mo
197.835 63.6684 li
.808743 .585351 0 0 cmyk
@
197.924 62.2581 mo
199.906 64.5068 li
196.918 64.7436 li
cp
ef
.750271 .679713 .654902 .901945 cmyk
VALTWG+Calibri*1 [8.0439 0 0 -8.0439 0 0 ]msf
149.357 73.864 mo
(Type 56)
[3.53931 3.64633 4.23666 4.02196 1.82596 4.07587 0 ]xsh
178.306 71.2216 mo
188.732 79.649 li
.808743 .585351 0 0 cmyk
@
189.227 78.3255 mo
190.47 81.0538 li
187.542 80.4107 li
cp
ef
.750271 .679713 .654902 .901945 cmyk
%ADOBeginSubsetFont: PBAAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal VALTWG+Calibri gcheck setglobal} if
2 2332 882 <0001004501b4022e023d000f000eb400070bed04002fed012fcd31300114
06232122263534363321321e02022e1211fe5e1212121201a2080d090501
f9271e1f26261e06111a>VALTWG+Calibri AddT42Char 
VALTWG+Calibri /CharStrings get begin
/hyphen 882 def
end
VALTWG+Calibri /Encoding get
dup 45 /hyphen put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/VALTWG+Calibri*1 
[32{/.notdef}rp /space 12{/.notdef}rp /hyphen 2{/.notdef}rp /zero /one /two 
/three /four /five /six /seven /eight 15{/.notdef}rp /H 
6{/.notdef}rp /O 4{/.notdef}rp /T 16{/.notdef}rp /e 10{/.notdef}rp /p 
8{/.notdef}rp /y 134{/.notdef}rp]
VALTWG+Calibri nf
VALTWG+Calibri*1 [8.0439 0 0 -8.0439 0 0 ]msf
57.7368 168.793 mo
(OO)
[5.30899 0 ]xsh
68.3548 168.793 mo
(-)sh
70.8242 168.793 mo
(OO)
[5.309 0 ]xsh
214.633 176.016 mo
(OH)
[5.30899 0 ]xsh
224.929 176.016 mo
(-)sh
227.399 176.016 mo
(OH)
[5.30899 0 ]xsh
63.7202 66.378 mo
63.5876 66.2749 li
63.7194 66.1056 li
63.8743 66.2261 li
63.8664 66.2336 63.8586 66.2411 63.8508 66.2486 cv
63.8066 66.2912 63.7631 66.3343 63.7202 66.378 cv
.36408 .213107 0 0 cmyk
f
63.7569 66.4066 mo
63.7202 66.378 li
63.7631 66.3343 63.8066 66.2912 63.8508 66.2486 cv
63.8586 66.2411 63.8664 66.2336 63.8743 66.2261 cv
63.8887 66.2373 li
63.7569 66.4066 li
.904997 .707607 .0103151 0 cmyk
f
63.4184 66.1431 mo
63.2491 66.0114 li
63.3808 65.8421 li
63.5501 65.9738 li
63.4184 66.1431 li
63.0798 65.8797 mo
62.9105 65.7479 li
63.0422 65.5786 li
63.2115 65.7104 li
63.0798 65.8797 li
62.7412 65.6162 mo
62.5719 65.4845 li
62.7037 65.3152 li
62.873 65.4469 li
62.7412 65.6162 li
62.4027 65.3527 mo
62.2333 65.221 li
62.3651 65.0517 li
62.5343 65.1834 li
62.4027 65.3527 li
62.064 65.0892 mo
61.8948 64.9575 li
62.0265 64.7882 li
62.1958 64.92 li
62.064 65.0892 li
61.7255 64.8258 mo
61.5562 64.694 li
61.6879 64.5248 li
61.8573 64.6565 li
61.7255 64.8258 li
61.3869 64.5623 mo
61.2176 64.4306 li
61.3494 64.2613 li
61.5186 64.393 li
61.3869 64.5623 li
61.0484 64.2988 mo
60.8791 64.1672 li
61.0108 63.9978 li
61.1801 64.1296 li
61.0484 64.2988 li
60.7098 64.0354 mo
60.5405 63.9036 li
60.6722 63.7343 li
60.8415 63.8661 li
60.7098 64.0354 li
60.3712 63.7719 mo
60.2019 63.6402 li
60.3337 63.4709 li
60.503 63.6026 li
60.3712 63.7719 li
60.0327 63.5084 mo
59.8634 63.3767 li
59.9951 63.2074 li
60.1643 63.3391 li
60.0327 63.5084 li
59.694 63.245 mo
59.5248 63.1132 li
59.6565 62.9439 li
59.8258 63.0757 li
59.694 63.245 li
59.3555 62.9815 mo
59.1862 62.8498 li
59.3179 62.6805 li
59.4873 62.8123 li
59.3555 62.9815 li
59.0169 62.718 mo
58.8476 62.5863 li
58.9794 62.417 li
59.1486 62.5487 li
59.0169 62.718 li
58.6783 62.4546 mo
58.5091 62.3228 li
58.6408 62.1535 li
58.8101 62.2853 li
58.6783 62.4546 li
58.3398 62.1911 mo
58.1704 62.0593 li
58.3022 61.8901 li
58.4715 62.0218 li
58.3398 62.1911 li
58.0012 61.9277 mo
57.8319 61.7959 li
57.9637 61.6266 li
58.1329 61.7583 li
58.0012 61.9277 li
57.6626 61.6641 mo
57.4934 61.5325 li
57.625 61.3631 li
57.7943 61.4948 li
57.6626 61.6641 li
57.324 61.4007 mo
57.1547 61.2689 li
57.2865 61.0996 li
57.4558 61.2314 li
57.324 61.4007 li
56.9855 61.1373 mo
56.8162 61.0055 li
56.9479 60.8362 li
57.1172 60.9679 li
56.9855 61.1373 li
56.6469 60.8737 mo
56.4776 60.742 li
56.6093 60.5728 li
56.7786 60.7044 li
56.6469 60.8737 li
56.3083 60.6103 mo
56.1391 60.4785 li
56.2708 60.3092 li
56.4401 60.441 li
56.3083 60.6103 li
55.9698 60.3468 mo
55.8005 60.2151 li
55.9322 60.0458 li
56.1015 60.1776 li
55.9698 60.3468 li
55.6312 60.0834 mo
55.4619 59.9516 li
55.5937 59.7824 li
55.7629 59.914 li
55.6312 60.0834 li
55.2926 59.8198 mo
55.1234 59.6882 li
55.255 59.5188 li
55.4244 59.6506 li
55.2926 59.8198 li
54.954 59.5564 mo
54.7847 59.4246 li
54.9165 59.2554 li
55.0858 59.3871 li
54.954 59.5564 li
54.6155 59.293 mo
54.4462 59.1612 li
54.5779 58.9919 li
54.7472 59.1236 li
54.6155 59.293 li
54.2769 59.0294 mo
54.1076 58.8978 li
54.2393 58.7284 li
54.4086 58.8602 li
54.2769 59.0294 li
53.9383 58.766 mo
53.769 58.6342 li
53.9008 58.4649 li
54.0701 58.5967 li
53.9383 58.766 li
53.5998 58.5026 mo
53.4305 58.3708 li
53.5622 58.2015 li
53.7314 58.3333 li
53.5998 58.5026 li
53.2611 58.239 mo
53.0919 58.1074 li
53.2236 57.9381 li
53.3929 58.0697 li
53.2611 58.239 li
52.9226 57.9756 mo
52.7533 57.8438 li
52.885 57.6745 li
53.0544 57.8063 li
52.9226 57.9756 li
52.584 57.7121 mo
52.4147 57.5804 li
52.5465 57.4111 li
52.7157 57.5429 li
52.584 57.7121 li
52.2454 57.4487 mo
52.0762 57.3169 li
52.2079 57.1477 li
52.3772 57.2793 li
52.2454 57.4487 li
51.9069 57.1852 mo
51.7376 57.0535 li
51.8693 56.8841 li
52.0386 57.0159 li
51.9069 57.1852 li
51.5683 56.9217 mo
51.399 56.7899 li
51.5308 56.6207 li
51.7 56.7524 li
51.5683 56.9217 li
51.2297 56.6583 mo
51.0605 56.5265 li
51.1921 56.3572 li
51.3615 56.4889 li
51.2297 56.6583 li
50.8911 56.3947 mo
50.7218 56.2631 li
50.8536 56.0938 li
51.0229 56.2255 li
50.8911 56.3947 li
50.5526 56.1313 mo
50.3833 55.9995 li
50.515 55.8303 li
50.6844 55.962 li
50.5526 56.1313 li
50.2141 55.8679 mo
50.0447 55.7361 li
50.1765 55.5668 li
50.3457 55.6986 li
50.2141 55.8679 li
49.8754 55.6043 mo
49.7062 55.4727 li
49.8379 55.3034 li
50.0072 55.435 li
49.8754 55.6043 li
49.5369 55.3409 mo
49.3676 55.2092 li
49.4993 55.0398 li
49.6686 55.1716 li
49.5369 55.3409 li
49.1983 55.0774 mo
49.029 54.9457 li
49.1608 54.7764 li
49.33 54.9082 li
49.1983 55.0774 li
48.8597 54.814 mo
48.6905 54.6822 li
48.8221 54.513 li
48.9915 54.6446 li
48.8597 54.814 li
48.5211 54.5505 mo
48.3518 54.4188 li
48.4836 54.2494 li
48.6529 54.3812 li
48.5211 54.5505 li
48.1826 54.287 mo
48.0133 54.1553 li
48.1451 53.986 li
48.3143 54.1177 li
48.1826 54.287 li
47.844 54.0236 mo
47.6747 53.8918 li
47.8064 53.7225 li
47.9757 53.8543 li
47.844 54.0236 li
47.5054 53.76 mo
47.3361 53.6284 li
47.4679 53.4591 li
47.6372 53.5908 li
47.5054 53.76 li
47.1669 53.4966 mo
46.9976 53.3648 li
47.1293 53.1956 li
47.2985 53.3273 li
47.1669 53.4966 li
46.8282 53.2332 mo
46.659 53.1014 li
46.7907 52.9321 li
46.96 53.0639 li
46.8282 53.2332 li
46.4897 52.9697 mo
46.3204 52.8379 li
46.4521 52.6687 li
46.6215 52.8004 li
46.4897 52.9697 li
46.1512 52.7062 mo
45.9818 52.5745 li
46.1136 52.4051 li
46.2828 52.5369 li
46.1512 52.7062 li
45.8125 52.4427 mo
45.6433 52.311 li
45.7751 52.1417 li
45.9443 52.2735 li
45.8125 52.4427 li
45.474 52.1793 mo
45.3047 52.0475 li
45.4364 51.8783 li
45.6057 52.0099 li
45.474 52.1793 li
45.1354 51.9158 mo
44.9661 51.7841 li
45.0979 51.6147 li
45.2672 51.7465 li
45.1354 51.9158 li
44.7969 51.6523 mo
44.6276 51.5206 li
44.7593 51.3513 li
44.9286 51.483 li
44.7969 51.6523 li
44.4582 51.3889 mo
44.289 51.2571 li
44.4207 51.0878 li
44.59 51.2196 li
44.4582 51.3889 li
44.1197 51.1254 mo
43.9504 50.9937 li
44.0821 50.8244 li
44.2515 50.9561 li
44.1197 51.1254 li
43.7812 50.8619 mo
43.6118 50.7302 li
43.7436 50.5609 li
43.9128 50.6926 li
43.7812 50.8619 li
43.4425 50.5985 mo
43.2733 50.4667 li
43.405 50.2974 li
43.5743 50.4292 li
43.4425 50.5985 li
43.104 50.335 mo
42.9347 50.2033 li
43.0664 50.034 li
43.2357 50.1656 li
43.104 50.335 li
42.7654 50.0715 mo
42.5961 49.9398 li
42.7279 49.7704 li
42.8971 49.9022 li
42.7654 50.0715 li
42.4268 49.808 mo
42.2576 49.6763 li
42.3892 49.507 li
42.5586 49.6388 li
42.4268 49.808 li
42.0883 49.5446 mo
41.9189 49.4128 li
42.0507 49.2436 li
42.22 49.3752 li
42.0883 49.5446 li
41.7497 49.2811 mo
41.5804 49.1494 li
41.7122 48.9801 li
41.8814 49.1118 li
41.7497 49.2811 li
41.4111 49.0176 mo
41.2418 48.8858 li
41.3735 48.7166 li
41.5428 48.8484 li
41.4111 49.0176 li
41.0725 48.7542 mo
41.057 48.7421 li
41.0918 48.7097 41.1257 48.6767 41.1591 48.6429 cv
41.0725 48.7542 li
.36408 .213107 0 0 cmyk
f
41.057 48.7421 mo
40.9032 48.6224 li
41.035 48.4531 li
41.2043 48.5849 li
41.1591 48.6429 li
41.1257 48.6767 41.0918 48.7097 41.057 48.7421 cv
.904997 .707607 .0103151 0 cmyk
f
73.6859 66.3425 mo
73.6544 66.3109 73.6225 66.2796 73.5904 66.2486 cv
73.5708 66.2297 73.551 66.2109 73.5311 66.1922 cv
73.6312 66.1082 li
73.7691 66.2725 li
73.6859 66.3425 li
.36408 .213107 0 0 cmyk
f
73.6049 66.4105 mo
73.467 66.2461 li
73.5311 66.1922 li
73.551 66.2109 73.5708 66.2297 73.5904 66.2486 cv
73.6225 66.2796 73.6544 66.3109 73.6859 66.3425 cv
73.6049 66.4105 li
.904997 .707607 .0103151 0 cmyk
f
73.9335 66.1346 mo
73.7955 65.9704 li
73.9598 65.8325 li
74.0977 65.9967 li
73.9335 66.1346 li
74.2621 65.8588 mo
74.1241 65.6945 li
74.2884 65.5566 li
74.4263 65.7209 li
74.2621 65.8588 li
74.5906 65.583 mo
74.4527 65.4187 li
74.617 65.2808 li
74.7549 65.445 li
74.5906 65.583 li
74.9192 65.3071 mo
74.7813 65.1429 li
74.9456 65.005 li
75.0835 65.1692 li
74.9192 65.3071 li
75.2478 65.0313 mo
75.1099 64.8671 li
75.2742 64.7291 li
75.4121 64.8935 li
75.2478 65.0313 li
75.5763 64.7555 mo
75.4384 64.5912 li
75.6028 64.4533 li
75.7407 64.6176 li
75.5763 64.7555 li
75.9049 64.4797 mo
75.767 64.3154 li
75.9313 64.1775 li
76.0693 64.3418 li
75.9049 64.4797 li
76.2335 64.2039 mo
76.0956 64.0396 li
76.2599 63.9016 li
76.3979 64.066 li
76.2335 64.2039 li
76.5621 63.9281 mo
76.4242 63.7637 li
76.5885 63.6258 li
76.7264 63.7901 li
76.5621 63.9281 li
76.8907 63.6522 mo
76.7528 63.4879 li
76.9171 63.35 li
77.055 63.5143 li
76.8907 63.6522 li
77.2193 63.3764 mo
77.0814 63.2122 li
77.2457 63.0742 li
77.3836 63.2385 li
77.2193 63.3764 li
77.5479 63.1006 mo
77.41 62.9363 li
77.5743 62.7984 li
77.7122 62.9627 li
77.5479 63.1006 li
77.8765 62.8247 mo
77.7385 62.6605 li
77.9029 62.5226 li
78.0408 62.6868 li
77.8765 62.8247 li
78.205 62.5489 mo
78.0671 62.3847 li
78.2315 62.2467 li
78.3694 62.411 li
78.205 62.5489 li
78.5336 62.2731 mo
78.3957 62.1088 li
78.5601 61.9709 li
78.698 62.1352 li
78.5336 62.2731 li
78.8622 61.9973 mo
78.7243 61.833 li
78.8887 61.6951 li
79.0266 61.8594 li
78.8622 61.9973 li
79.1908 61.7215 mo
79.0529 61.5572 li
79.2172 61.4193 li
79.3552 61.5836 li
79.1908 61.7215 li
79.5194 61.4457 mo
79.3815 61.2813 li
79.5458 61.1434 li
79.6837 61.3078 li
79.5194 61.4457 li
79.848 61.1698 mo
79.7101 61.0055 li
79.8744 60.8676 li
80.0123 61.0319 li
79.848 61.1698 li
80.1766 60.894 mo
80.0387 60.7298 li
80.203 60.5918 li
80.3409 60.7561 li
80.1766 60.894 li
80.5052 60.6182 mo
80.3673 60.4539 li
80.5315 60.316 li
80.6694 60.4803 li
80.5052 60.6182 li
80.8338 60.3424 mo
80.6959 60.1781 li
80.8601 60.0402 li
80.998 60.2044 li
80.8338 60.3424 li
81.1624 60.0665 mo
81.0244 59.9023 li
81.1887 59.7644 li
81.3266 59.9286 li
81.1624 60.0665 li
81.491 59.7907 mo
81.353 59.6264 li
81.5173 59.4885 li
81.6552 59.6528 li
81.491 59.7907 li
81.8195 59.5149 mo
81.6816 59.3506 li
81.8459 59.2127 li
81.9838 59.3769 li
81.8195 59.5149 li
82.1481 59.2391 mo
82.0102 59.0748 li
82.1745 58.9369 li
82.3124 59.1012 li
82.1481 59.2391 li
82.4767 58.9633 mo
82.3388 58.7989 li
82.5031 58.661 li
82.641 58.8254 li
82.4767 58.9633 li
82.8053 58.6875 mo
82.6674 58.5231 li
82.8316 58.3852 li
82.9696 58.5495 li
82.8053 58.6875 li
83.1339 58.4116 mo
82.996 58.2473 li
83.1602 58.1094 li
83.2982 58.2737 li
83.1339 58.4116 li
83.4625 58.1358 mo
83.3246 57.9715 li
83.4888 57.8336 li
83.6267 57.9979 li
83.4625 58.1358 li
83.7911 57.86 mo
83.6532 57.6957 li
83.8174 57.5578 li
83.9553 57.722 li
83.7911 57.86 li
84.1197 57.5841 mo
83.9818 57.4199 li
84.146 57.282 li
84.2839 57.4462 li
84.1197 57.5841 li
84.4483 57.3083 mo
84.3103 57.144 li
84.4746 57.0061 li
84.6125 57.1704 li
84.4483 57.3083 li
84.7769 57.0325 mo
84.6389 56.8682 li
84.8032 56.7303 li
84.9411 56.8945 li
84.7769 57.0325 li
85.1054 56.7567 mo
84.9675 56.5924 li
85.1318 56.4545 li
85.2697 56.6188 li
85.1054 56.7567 li
85.434 56.4809 mo
85.2961 56.3166 li
85.4604 56.1786 li
85.5983 56.343 li
85.434 56.4809 li
85.7626 56.2051 mo
85.6247 56.0407 li
85.789 55.9028 li
85.9269 56.0671 li
85.7626 56.2051 li
86.0912 55.9292 mo
85.9533 55.7649 li
86.1176 55.627 li
86.2555 55.7913 li
86.0912 55.9292 li
86.4198 55.6534 mo
86.2819 55.4891 li
86.4461 55.3512 li
86.5841 55.5155 li
86.4198 55.6534 li
86.7483 55.3776 mo
86.6104 55.2133 li
86.7747 55.0754 li
86.9127 55.2397 li
86.7483 55.3776 li
87.0769 55.1017 mo
86.939 54.9375 li
87.1033 54.7996 li
87.2412 54.9638 li
87.0769 55.1017 li
87.4055 54.8259 mo
87.2676 54.6617 li
87.4319 54.5237 li
87.5698 54.688 li
87.4055 54.8259 li
87.7341 54.5501 mo
87.5962 54.3858 li
87.7605 54.2479 li
87.8984 54.4122 li
87.7341 54.5501 li
88.0627 54.2742 mo
87.9248 54.11 li
88.0891 53.9721 li
88.227 54.1363 li
88.0627 54.2742 li
88.3913 53.9985 mo
88.2533 53.8342 li
88.4177 53.6962 li
88.5556 53.8606 li
88.3913 53.9985 li
88.7198 53.7227 mo
88.5819 53.5583 li
88.7463 53.4204 li
88.8842 53.5848 li
88.7198 53.7227 li
89.0484 53.4468 mo
88.9105 53.2825 li
89.0749 53.1446 li
89.2128 53.3089 li
89.0484 53.4468 li
89.377 53.171 mo
89.2391 53.0067 li
89.4035 52.8688 li
89.5414 53.0331 li
89.377 53.171 li
89.7056 52.8952 mo
89.5677 52.7308 li
89.732 52.593 li
89.87 52.7573 li
89.7056 52.8952 li
90.0342 52.6193 mo
89.8963 52.4551 li
90.0606 52.3172 li
90.1986 52.4814 li
90.0342 52.6193 li
90.3628 52.3435 mo
90.2249 52.1793 li
90.3892 52.0413 li
90.5271 52.2056 li
90.3628 52.3435 li
90.6914 52.0677 mo
90.5535 51.9034 li
90.7178 51.7655 li
90.8557 51.9298 li
90.6914 52.0677 li
91.02 51.7919 mo
90.8821 51.6276 li
91.0464 51.4897 li
91.1843 51.6539 li
91.02 51.7919 li
91.3486 51.5161 mo
91.2107 51.3518 li
91.375 51.2139 li
91.5129 51.3782 li
91.3486 51.5161 li
91.6772 51.2402 mo
91.5392 51.0759 li
91.7036 50.938 li
91.8415 51.1024 li
91.6772 51.2402 li
92.0058 50.9644 mo
91.8678 50.8001 li
92.0322 50.6622 li
92.1701 50.8265 li
92.0058 50.9644 li
92.3343 50.6886 mo
92.1964 50.5243 li
92.3607 50.3864 li
92.4986 50.5507 li
92.3343 50.6886 li
92.6629 50.4128 mo
92.525 50.2484 li
92.6893 50.1105 li
92.8272 50.2749 li
92.6629 50.4128 li
92.9915 50.137 mo
92.8536 49.9726 li
93.0179 49.8348 li
93.1558 49.999 li
92.9915 50.137 li
93.3201 49.8611 mo
93.1822 49.6969 li
93.3465 49.559 li
93.4844 49.7232 li
93.3201 49.8611 li
93.6487 49.5853 mo
93.5108 49.421 li
93.675 49.2831 li
93.813 49.4474 li
93.6487 49.5853 li
93.9773 49.3095 mo
93.8394 49.1452 li
94.0036 49.0073 li
94.1415 49.1715 li
93.9773 49.3095 li
94.3059 49.0336 mo
94.168 48.8694 li
94.3322 48.7315 li
94.4701 48.8957 li
94.3059 49.0336 li
94.6345 48.7578 mo
94.4966 48.5935 li
94.5087 48.5834 li
94.5579 48.6357 94.6087 48.6863 94.661 48.7355 cv
94.6345 48.7578 li
.36408 .213107 0 0 cmyk
f
94.661 48.7355 mo
94.6087 48.6863 94.5579 48.6357 94.5087 48.5834 cv
94.6608 48.4556 li
94.7987 48.6199 li
94.661 48.7355 li
.904997 .707607 .0103151 0 cmyk
f
33.9301 112.624 mo
33.8612 112.544 li
34.0234 112.404 li
34.0922 112.483 li
33.9301 112.624 li
f
33.7207 112.382 mo
33.5803 112.22 li
33.7424 112.08 li
33.8829 112.242 li
33.7207 112.382 li
33.4398 112.058 mo
33.2993 111.896 li
33.4615 111.755 li
33.6019 111.917 li
33.4398 112.058 li
33.1588 111.734 mo
33.0184 111.572 li
33.1805 111.431 li
33.321 111.593 li
33.1588 111.734 li
32.8779 111.41 mo
32.7374 111.247 li
32.8996 111.107 li
33.04 111.269 li
32.8779 111.41 li
32.597 111.085 mo
32.4565 110.923 li
32.6186 110.783 li
32.7591 110.945 li
32.597 111.085 li
32.3161 110.761 mo
32.1755 110.599 li
32.3377 110.458 li
32.4781 110.621 li
32.3161 110.761 li
32.0351 110.437 mo
31.8946 110.275 li
32.0567 110.134 li
32.1972 110.296 li
32.0351 110.437 li
31.7542 110.113 mo
31.6136 109.951 li
31.7758 109.81 li
31.9163 109.972 li
31.7542 110.113 li
31.4732 109.788 mo
31.3327 109.626 li
31.4948 109.486 li
31.6354 109.648 li
31.4732 109.788 li
31.1923 109.464 mo
31.0517 109.302 li
31.2139 109.162 li
31.3544 109.324 li
31.1923 109.464 li
30.9113 109.14 mo
30.7708 108.978 li
30.9329 108.837 li
31.0735 109 li
30.9113 109.14 li
30.6304 108.816 mo
30.4899 108.654 li
30.652 108.513 li
30.7925 108.675 li
30.6304 108.816 li
30.3494 108.492 mo
30.209 108.329 li
30.371 108.189 li
30.5115 108.351 li
30.3494 108.492 li
30.0685 108.167 mo
29.928 108.005 li
30.0901 107.865 li
30.2306 108.027 li
30.0685 108.167 li
29.7875 107.843 mo
29.6471 107.681 li
29.8091 107.541 li
29.9496 107.703 li
29.7875 107.843 li
29.5066 107.519 mo
29.3661 107.357 li
29.5282 107.216 li
29.6687 107.378 li
29.5066 107.519 li
29.2256 107.195 mo
29.0852 107.033 li
29.2473 106.892 li
29.3877 107.054 li
29.2256 107.195 li
28.9447 106.87 mo
28.8042 106.708 li
28.9664 106.568 li
29.1068 106.73 li
28.9447 106.87 li
28.6637 106.546 mo
28.5233 106.384 li
28.6854 106.244 li
28.8258 106.406 li
28.6637 106.546 li
28.3828 106.222 mo
28.2423 106.06 li
28.4045 105.919 li
28.5449 106.082 li
28.3828 106.222 li
28.1019 105.898 mo
27.9614 105.736 li
28.1235 105.595 li
28.2639 105.757 li
28.1019 105.898 li
27.821 105.574 mo
27.6804 105.411 li
27.8426 105.271 li
27.983 105.433 li
27.821 105.574 li
27.54 105.249 mo
27.3995 105.087 li
27.5616 104.947 li
27.702 105.109 li
27.54 105.249 li
27.2591 104.925 mo
27.1185 104.763 li
27.2807 104.623 li
27.4211 104.785 li
27.2591 104.925 li
26.9781 104.601 mo
26.8376 104.439 li
26.9997 104.298 li
27.1402 104.46 li
26.9781 104.601 li
26.6972 104.277 mo
26.5566 104.115 li
26.7188 103.974 li
26.8593 104.136 li
26.6972 104.277 li
26.4162 103.952 mo
26.2757 103.79 li
26.4378 103.65 li
26.5783 103.812 li
26.4162 103.952 li
26.1353 103.628 mo
25.9947 103.466 li
26.1569 103.326 li
26.2974 103.488 li
26.1353 103.628 li
25.8543 103.304 mo
25.7138 103.142 li
25.8759 103.001 li
26.0164 103.164 li
25.8543 103.304 li
25.5733 102.98 mo
25.4329 102.818 li
25.595 102.677 li
25.7355 102.839 li
25.5733 102.98 li
25.2924 102.656 mo
25.152 102.493 li
25.314 102.353 li
25.4545 102.515 li
25.2924 102.656 li
25.0114 102.331 mo
24.871 102.169 li
25.0331 102.029 li
25.1736 102.191 li
25.0114 102.331 li
24.7305 102.007 mo
24.5901 101.845 li
24.7521 101.705 li
24.8926 101.867 li
24.7305 102.007 li
24.4495 101.683 mo
24.3091 101.521 li
24.4712 101.38 li
24.6117 101.542 li
24.4495 101.683 li
24.1686 101.359 mo
24.0282 101.197 li
24.1903 101.056 li
24.3307 101.218 li
24.1686 101.359 li
23.8876 101.035 mo
23.7472 100.872 li
23.9094 100.732 li
24.0498 100.894 li
23.8876 101.035 li
23.6067 100.71 mo
23.4663 100.548 li
23.6284 100.408 li
23.7688 100.57 li
23.6067 100.71 li
23.3258 100.386 mo
23.1853 100.224 li
23.3475 100.084 li
23.4879 100.246 li
23.3258 100.386 li
23.0449 100.062 mo
22.9044 99.8997 li
23.0665 99.7593 li
23.2069 99.9213 li
23.0449 100.062 li
22.7639 99.7376 mo
22.6234 99.5755 li
22.7856 99.435 li
22.926 99.5972 li
22.7639 99.7376 li
22.483 99.4134 mo
22.3425 99.2513 li
22.5046 99.1109 li
22.645 99.2729 li
22.483 99.4134 li
22.202 99.0892 mo
22.0615 98.9271 li
22.2237 98.7866 li
22.3641 98.9487 li
22.202 99.0892 li
21.9211 98.765 mo
21.7806 98.6029 li
21.9427 98.4624 li
22.0832 98.6245 li
21.9211 98.765 li
21.6401 98.4407 mo
21.4996 98.2787 li
21.6618 98.1382 li
21.8023 98.3003 li
21.6401 98.4407 li
21.3592 98.1166 mo
21.2187 97.9544 li
21.3808 97.814 li
21.5213 97.976 li
21.3592 98.1166 li
21.0782 97.7923 mo
20.9377 97.6302 li
21.0999 97.4897 li
21.2404 97.6519 li
21.0782 97.7923 li
20.7973 97.4681 mo
20.6568 97.306 li
20.8189 97.1655 li
20.9594 97.3276 li
20.7973 97.4681 li
20.5163 97.1438 mo
20.3759 96.9818 li
20.538 96.8413 li
20.6785 97.0034 li
20.5163 97.1438 li
20.2354 96.8197 mo
20.095 96.6575 li
20.257 96.5171 li
20.3975 96.6791 li
20.2354 96.8197 li
19.9544 96.4954 mo
19.814 96.3334 li
19.976 96.1928 li
20.1166 96.355 li
19.9544 96.4954 li
19.6735 96.1712 mo
19.5331 96.0091 li
19.6952 95.8687 li
19.8356 96.0307 li
19.6735 96.1712 li
19.3925 95.847 mo
19.2521 95.6849 li
19.4142 95.5444 li
19.5547 95.7065 li
19.3925 95.847 li
19.1116 95.5228 mo
18.9712 95.3607 li
19.1333 95.2202 li
19.2737 95.3823 li
19.1116 95.5228 li
18.8306 95.1985 mo
18.6902 95.0365 li
18.8523 94.896 li
18.9928 95.0581 li
18.8306 95.1985 li
18.5497 94.8744 mo
18.4093 94.7122 li
18.5714 94.5718 li
18.7118 94.7338 li
18.5497 94.8744 li
18.2688 94.5501 mo
18.1283 94.3881 li
18.2904 94.2475 li
18.4309 94.4097 li
18.2688 94.5501 li
17.9879 94.2259 mo
17.8474 94.0638 li
18.0095 93.9233 li
18.1499 94.0854 li
17.9879 94.2259 li
17.7069 93.9016 mo
17.5664 93.7396 li
17.7285 93.5991 li
17.869 93.7612 li
17.7069 93.9016 li
17.426 93.5775 mo
17.2855 93.4153 li
17.4476 93.2749 li
17.588 93.4369 li
17.426 93.5775 li
17.145 93.2532 mo
17.0045 93.0912 li
17.1666 92.9506 li
17.3071 93.1128 li
17.145 93.2532 li
16.8641 92.929 mo
16.7236 92.7669 li
16.8857 92.6265 li
17.0262 92.7885 li
16.8641 92.929 li
16.5831 92.6048 mo
16.4426 92.4427 li
16.6047 92.3022 li
16.7453 92.4643 li
16.5831 92.6048 li
16.3022 92.2806 mo
16.1617 92.1185 li
16.3238 91.978 li
16.4643 92.1401 li
16.3022 92.2806 li
16.0212 91.9563 mo
15.8808 91.7943 li
16.0428 91.6538 li
16.1834 91.8159 li
16.0212 91.9563 li
15.7403 91.6322 mo
15.5999 91.47 li
15.7619 91.3296 li
15.9024 91.4916 li
15.7403 91.6322 li
15.4593 91.3079 mo
15.3189 91.1459 li
15.4809 91.0053 li
15.6215 91.1675 li
15.4593 91.3079 li
15.1784 90.9837 mo
15.038 90.8216 li
15.2 90.6812 li
15.3405 90.8432 li
15.1784 90.9837 li
14.8974 90.6595 mo
14.757 90.4974 li
14.9191 90.3569 li
15.0596 90.519 li
14.8974 90.6595 li
14.6165 90.3353 mo
14.476 90.1732 li
14.6382 90.0327 li
14.7786 90.1948 li
14.6165 90.3353 li
14.3355 90.011 mo
14.1951 89.849 li
14.3572 89.7084 li
14.4977 89.8706 li
14.3355 90.011 li
14.0757 89.6685 mo
14.1206 89.6251 14.1642 89.5805 14.2067 89.5347 cv
14.2167 89.5463 li
14.0757 89.6685 li
.36408 .213107 0 0 cmyk
f
14.0546 89.6868 mo
13.9141 89.5247 li
14.0763 89.3843 li
14.2067 89.5347 li
14.1642 89.5805 14.1206 89.6251 14.0757 89.6685 cv
14.0546 89.6868 li
.904997 .707607 .0103151 0 cmyk
f
13.5526 142.774 mo
13.5037 142.722 13.4533 142.672 13.4013 142.622 cv
13.4246 142.598 li
13.5782 142.748 li
13.5526 142.774 li
.36408 .213107 0 0 cmyk
f
13.4285 142.902 mo
13.2749 142.752 li
13.4013 142.622 li
13.4533 142.672 13.5037 142.722 13.5526 142.774 cv
13.4285 142.902 li
.904997 .707607 .0103151 0 cmyk
f
13.7279 142.595 mo
13.5744 142.445 li
13.7241 142.291 li
13.8777 142.441 li
13.7279 142.595 li
14.0274 142.287 mo
13.8738 142.138 li
14.0235 141.984 li
14.1772 142.134 li
14.0274 142.287 li
14.3268 141.98 mo
14.1733 141.83 li
14.323 141.677 li
14.4766 141.827 li
14.3268 141.98 li
14.6263 141.673 mo
14.4727 141.523 li
14.6225 141.37 li
14.7761 141.519 li
14.6263 141.673 li
14.9258 141.366 mo
14.7722 141.216 li
14.9219 141.062 li
15.0755 141.212 li
14.9258 141.366 li
15.2253 141.059 mo
15.0716 140.909 li
15.2214 140.755 li
15.375 140.905 li
15.2253 141.059 li
15.5247 140.751 mo
15.3712 140.602 li
15.5208 140.448 li
15.6744 140.598 li
15.5247 140.751 li
15.8242 140.444 mo
15.6706 140.295 li
15.8203 140.141 li
15.974 140.291 li
15.8242 140.444 li
16.1236 140.137 mo
15.9701 139.987 li
16.1198 139.834 li
16.2734 139.983 li
16.1236 140.137 li
16.4231 139.83 mo
16.2695 139.68 li
16.4193 139.526 li
16.5729 139.676 li
16.4231 139.83 li
16.7225 139.523 mo
16.569 139.373 li
16.7187 139.219 li
16.8723 139.369 li
16.7225 139.523 li
17.0221 139.215 mo
16.8684 139.066 li
17.0182 138.912 li
17.1718 139.062 li
17.0221 139.215 li
17.3215 138.908 mo
17.1679 138.759 li
17.3176 138.605 li
17.4712 138.755 li
17.3215 138.908 li
17.621 138.601 mo
17.4674 138.451 li
17.6171 138.298 li
17.7707 138.447 li
17.621 138.601 li
17.9204 138.294 mo
17.7669 138.144 li
17.9165 137.99 li
18.0702 138.14 li
17.9204 138.294 li
18.2199 137.987 mo
18.0663 137.837 li
18.216 137.683 li
18.3697 137.833 li
18.2199 137.987 li
18.5193 137.679 mo
18.3658 137.53 li
18.5155 137.376 li
18.6691 137.526 li
18.5193 137.679 li
18.8188 137.372 mo
18.6652 137.223 li
18.815 137.069 li
18.9686 137.219 li
18.8188 137.372 li
19.1183 137.065 mo
18.9647 136.915 li
19.1144 136.762 li
19.268 136.911 li
19.1183 137.065 li
19.4178 136.758 mo
19.2641 136.608 li
19.4139 136.454 li
19.5675 136.604 li
19.4178 136.758 li
19.7172 136.451 mo
19.5637 136.301 li
19.7133 136.147 li
19.8669 136.297 li
19.7172 136.451 li
20.0167 136.143 mo
19.8631 135.994 li
20.0128 135.84 li
20.1665 135.99 li
20.0167 136.143 li
20.3161 135.836 mo
20.1626 135.687 li
20.3122 135.533 li
20.4659 135.683 li
20.3161 135.836 li
20.6156 135.529 mo
20.462 135.379 li
20.6117 135.226 li
20.7654 135.376 li
20.6156 135.529 li
20.915 135.222 mo
20.7615 135.072 li
20.9112 134.919 li
21.0648 135.068 li
20.915 135.222 li
21.2145 134.915 mo
21.0609 134.765 li
21.2107 134.611 li
21.3643 134.761 li
21.2145 134.915 li
21.514 134.607 mo
21.3604 134.458 li
21.5101 134.304 li
21.6637 134.454 li
21.514 134.607 li
21.8135 134.3 mo
21.6598 134.151 li
21.8096 133.997 li
21.9632 134.147 li
21.8135 134.3 li
22.1129 133.993 mo
21.9594 133.843 li
22.109 133.69 li
22.2626 133.84 li
22.1129 133.993 li
22.4124 133.686 mo
22.2588 133.536 li
22.4085 133.383 li
22.5621 133.532 li
22.4124 133.686 li
22.7118 133.379 mo
22.5583 133.229 li
22.7079 133.075 li
22.8616 133.225 li
22.7118 133.379 li
23.0113 133.071 mo
22.8577 132.922 li
23.0075 132.768 li
23.1611 132.918 li
23.0113 133.071 li
23.3107 132.764 mo
23.1572 132.615 li
23.3069 132.461 li
23.4605 132.611 li
23.3107 132.764 li
23.6103 132.457 mo
23.4566 132.307 li
23.6064 132.154 li
23.76 132.304 li
23.6103 132.457 li
23.9097 132.15 mo
23.7561 132 li
23.9058 131.847 li
24.0594 131.996 li
23.9097 132.15 li
24.2092 131.843 mo
24.0556 131.693 li
24.2053 131.539 li
24.3589 131.689 li
24.2092 131.843 li
24.5086 131.536 mo
24.3551 131.386 li
24.5047 131.232 li
24.6583 131.382 li
24.5086 131.536 li
24.8081 131.228 mo
24.6545 131.079 li
24.8042 130.925 li
24.9578 131.075 li
24.8081 131.228 li
25.1075 130.921 mo
24.954 130.771 li
25.1036 130.618 li
25.2573 130.768 li
25.1075 130.921 li
25.407 130.614 mo
25.2534 130.464 li
25.4032 130.311 li
25.5567 130.46 li
25.407 130.614 li
25.7064 130.307 mo
25.5529 130.157 li
25.7026 130.003 li
25.8562 130.153 li
25.7064 130.307 li
26.006 130 mo
25.8523 129.85 li
26.0021 129.696 li
26.1556 129.846 li
26.006 130 li
26.3054 129.692 mo
26.1518 129.543 li
26.3015 129.389 li
26.4551 129.539 li
26.3054 129.692 li
26.6049 129.385 mo
26.4513 129.235 li
26.601 129.082 li
26.7545 129.232 li
26.6049 129.385 li
26.9043 129.078 mo
26.7507 128.928 li
26.9004 128.775 li
27.054 128.924 li
26.9043 129.078 li
27.2038 128.771 mo
27.0502 128.621 li
27.1999 128.467 li
27.3535 128.617 li
27.2038 128.771 li
27.5032 128.464 mo
27.3496 128.314 li
27.4993 128.16 li
27.653 128.31 li
27.5032 128.464 li
27.8027 128.156 mo
27.6491 128.007 li
27.7989 127.853 li
27.9524 128.003 li
27.8027 128.156 li
28.1021 127.849 mo
27.9486 127.699 li
28.0983 127.546 li
28.2519 127.696 li
28.1021 127.849 li
28.4017 127.542 mo
28.248 127.392 li
28.3978 127.239 li
28.5513 127.388 li
28.4017 127.542 li
28.7011 127.235 mo
28.5475 127.085 li
28.6972 126.932 li
28.8508 127.081 li
28.7011 127.235 li
29.0006 126.928 mo
28.8469 126.778 li
28.9967 126.624 li
29.1502 126.774 li
29.0006 126.928 li
29.3 126.62 mo
29.1464 126.471 li
29.2961 126.317 li
29.4497 126.467 li
29.3 126.62 li
29.5995 126.313 mo
29.4459 126.163 li
29.5956 126.01 li
29.7492 126.16 li
29.5995 126.313 li
29.8989 126.006 mo
29.7453 125.856 li
29.895 125.703 li
30.0487 125.852 li
29.8989 126.006 li
30.1984 125.699 mo
30.0448 125.549 li
30.1946 125.396 li
30.3481 125.545 li
30.1984 125.699 li
30.4978 125.392 mo
30.3442 125.242 li
30.494 125.088 li
30.6476 125.238 li
30.4978 125.392 li
30.7973 125.084 mo
30.6437 124.935 li
30.7935 124.781 li
30.947 124.931 li
30.7973 125.084 li
31.0968 124.777 mo
30.9431 124.628 li
31.0929 124.474 li
31.2465 124.624 li
31.0968 124.777 li
31.3963 124.47 mo
31.2426 124.32 li
31.3924 124.167 li
31.5459 124.316 li
31.3963 124.47 li
31.6957 124.163 mo
31.5421 124.013 li
31.6918 123.86 li
31.8454 124.009 li
31.6957 124.163 li
31.9952 123.856 mo
31.8416 123.706 li
31.9913 123.552 li
32.1449 123.702 li
31.9952 123.856 li
32.2946 123.548 mo
32.141 123.399 li
32.2907 123.245 li
32.4444 123.395 li
32.2946 123.548 li
32.5941 123.241 mo
32.4405 123.092 li
32.5902 122.938 li
32.7438 123.088 li
32.5941 123.241 li
32.8935 122.934 mo
32.7399 122.784 li
32.8897 122.631 li
33.0433 122.78 li
32.8935 122.934 li
33.193 122.627 mo
33.0394 122.477 li
33.1892 122.324 li
33.3427 122.473 li
33.193 122.627 li
33.4925 122.32 mo
33.3388 122.17 li
33.4886 122.016 li
33.6422 122.166 li
33.4925 122.32 li
33.792 122.013 mo
33.6383 121.863 li
33.7433 121.755 li
33.7687 121.78 33.7944 121.805 33.8202 121.83 cv
33.8458 121.855 33.8717 121.88 33.8978 121.904 cv
33.792 122.013 li
.36408 .213107 0 0 cmyk
f
33.8978 121.904 mo
33.8717 121.88 33.8458 121.855 33.8202 121.83 cv
33.7944 121.805 33.7687 121.78 33.7433 121.755 cv
33.7881 121.709 li
33.9416 121.859 li
33.8978 121.904 li
34.0914 121.705 mo
33.9378 121.556 li
33.9379 121.555 li
34.0915 121.705 li
34.0914 121.705 li
.904997 .707607 .0103151 0 cmyk
f
125.229 142.774 mo
125.141 142.682 li
125.295 142.533 li
125.381 142.622 li
125.329 142.671 125.278 142.722 125.229 142.774 cv
.36408 .213107 0 0 cmyk
f
125.29 142.837 mo
125.229 142.774 li
125.278 142.722 125.329 142.671 125.381 142.622 cv
125.444 142.687 li
125.29 142.837 li
.904997 .707607 .0103151 0 cmyk
f
124.991 142.528 mo
124.842 142.374 li
124.997 142.225 li
125.146 142.379 li
124.991 142.528 li
124.693 142.22 mo
124.544 142.065 li
124.699 141.916 li
124.848 142.07 li
124.693 142.22 li
124.395 141.911 mo
124.246 141.757 li
124.4 141.608 li
124.549 141.762 li
124.395 141.911 li
124.097 141.603 mo
123.948 141.448 li
124.102 141.299 li
124.251 141.453 li
124.097 141.603 li
123.799 141.294 mo
123.65 141.14 li
123.804 140.991 li
123.953 141.145 li
123.799 141.294 li
123.501 140.986 mo
123.352 140.831 li
123.506 140.682 li
123.655 140.836 li
123.501 140.986 li
123.203 140.677 mo
123.054 140.523 li
123.208 140.374 li
123.357 140.528 li
123.203 140.677 li
122.905 140.369 mo
122.756 140.214 li
122.91 140.065 li
123.059 140.219 li
122.905 140.369 li
122.606 140.06 mo
122.457 139.906 li
122.612 139.757 li
122.761 139.911 li
122.606 140.06 li
122.308 139.752 mo
122.159 139.597 li
122.314 139.448 li
122.463 139.602 li
122.308 139.752 li
122.01 139.443 mo
121.861 139.289 li
122.015 139.14 li
122.164 139.294 li
122.01 139.443 li
121.712 139.135 mo
121.563 138.98 li
121.717 138.831 li
121.866 138.985 li
121.712 139.135 li
121.414 138.826 mo
121.265 138.672 li
121.419 138.523 li
121.568 138.677 li
121.414 138.826 li
121.116 138.518 mo
120.967 138.363 li
121.121 138.214 li
121.27 138.368 li
121.116 138.518 li
120.818 138.209 mo
120.669 138.055 li
120.823 137.906 li
120.972 138.06 li
120.818 138.209 li
120.52 137.901 mo
120.37 137.746 li
120.525 137.597 li
120.674 137.751 li
120.52 137.901 li
120.221 137.592 mo
120.072 137.438 li
120.227 137.289 li
120.376 137.443 li
120.221 137.592 li
119.923 137.284 mo
119.774 137.129 li
119.929 136.98 li
120.078 137.135 li
119.923 137.284 li
119.625 136.975 mo
119.476 136.821 li
119.63 136.672 li
119.779 136.826 li
119.625 136.975 li
119.327 136.667 mo
119.178 136.512 li
119.332 136.363 li
119.481 136.518 li
119.327 136.667 li
119.029 136.358 mo
118.88 136.204 li
119.034 136.055 li
119.183 136.209 li
119.029 136.358 li
118.731 136.05 mo
118.582 135.895 li
118.736 135.746 li
118.885 135.901 li
118.731 136.05 li
118.433 135.741 mo
118.284 135.587 li
118.438 135.438 li
118.587 135.592 li
118.433 135.741 li
118.135 135.433 mo
117.985 135.278 li
118.14 135.129 li
118.289 135.284 li
118.135 135.433 li
117.836 135.124 mo
117.687 134.97 li
117.842 134.821 li
117.991 134.975 li
117.836 135.124 li
117.538 134.816 mo
117.389 134.661 li
117.543 134.512 li
117.693 134.667 li
117.538 134.816 li
117.24 134.507 mo
117.091 134.353 li
117.245 134.204 li
117.394 134.358 li
117.24 134.507 li
116.942 134.199 mo
116.793 134.044 li
116.947 133.895 li
117.096 134.05 li
116.942 134.199 li
116.644 133.89 mo
116.495 133.736 li
116.649 133.587 li
116.798 133.741 li
116.644 133.89 li
116.346 133.582 mo
116.197 133.427 li
116.351 133.278 li
116.5 133.433 li
116.346 133.582 li
116.048 133.273 mo
115.899 133.119 li
116.053 132.97 li
116.202 133.124 li
116.048 133.273 li
115.75 132.965 mo
115.6 132.81 li
115.755 132.661 li
115.904 132.816 li
115.75 132.965 li
115.451 132.656 mo
115.302 132.502 li
115.457 132.353 li
115.606 132.507 li
115.451 132.656 li
115.153 132.348 mo
115.004 132.193 li
115.158 132.044 li
115.308 132.199 li
115.153 132.348 li
114.855 132.039 mo
114.706 131.885 li
114.86 131.736 li
115.009 131.89 li
114.855 132.039 li
114.557 131.731 mo
114.408 131.577 li
114.562 131.427 li
114.711 131.582 li
114.557 131.731 li
114.259 131.422 mo
114.11 131.268 li
114.264 131.119 li
114.413 131.273 li
114.259 131.422 li
113.961 131.114 mo
113.812 130.96 li
113.966 130.81 li
114.115 130.965 li
113.961 131.114 li
113.663 130.805 mo
113.514 130.651 li
113.668 130.502 li
113.817 130.656 li
113.663 130.805 li
113.364 130.497 mo
113.215 130.342 li
113.37 130.193 li
113.519 130.348 li
113.364 130.497 li
113.066 130.188 mo
112.917 130.034 li
113.072 129.885 li
113.221 130.039 li
113.066 130.188 li
112.768 129.88 mo
112.619 129.725 li
112.773 129.576 li
112.923 129.731 li
112.768 129.88 li
112.47 129.571 mo
112.321 129.417 li
112.475 129.268 li
112.624 129.422 li
112.47 129.571 li
112.172 129.263 mo
112.023 129.109 li
112.177 128.959 li
112.326 129.114 li
112.172 129.263 li
111.874 128.954 mo
111.725 128.8 li
111.879 128.651 li
112.028 128.805 li
111.874 128.954 li
111.576 128.646 mo
111.427 128.492 li
111.581 128.342 li
111.73 128.497 li
111.576 128.646 li
111.278 128.337 mo
111.129 128.183 li
111.283 128.034 li
111.432 128.188 li
111.278 128.337 li
110.98 128.029 mo
110.83 127.875 li
110.985 127.725 li
111.134 127.88 li
110.98 128.029 li
110.681 127.72 mo
110.532 127.566 li
110.687 127.417 li
110.836 127.571 li
110.681 127.72 li
110.383 127.412 mo
110.234 127.258 li
110.388 127.109 li
110.537 127.263 li
110.383 127.412 li
110.085 127.103 mo
109.936 126.949 li
110.09 126.8 li
110.239 126.954 li
110.085 127.103 li
109.787 126.795 mo
109.638 126.641 li
109.792 126.492 li
109.941 126.646 li
109.787 126.795 li
109.489 126.486 mo
109.34 126.332 li
109.494 126.183 li
109.643 126.337 li
109.489 126.486 li
109.191 126.178 mo
109.042 126.024 li
109.196 125.875 li
109.345 126.029 li
109.191 126.178 li
108.893 125.869 mo
108.744 125.715 li
108.898 125.566 li
109.047 125.72 li
108.893 125.869 li
108.595 125.561 mo
108.445 125.407 li
108.6 125.258 li
108.749 125.412 li
108.595 125.561 li
108.296 125.252 mo
108.147 125.098 li
108.302 124.949 li
108.451 125.103 li
108.296 125.252 li
107.998 124.944 mo
107.849 124.79 li
108.003 124.641 li
108.152 124.795 li
107.998 124.944 li
107.7 124.635 mo
107.551 124.481 li
107.705 124.332 li
107.854 124.486 li
107.7 124.635 li
107.402 124.327 mo
107.253 124.173 li
107.407 124.024 li
107.556 124.178 li
107.402 124.327 li
107.104 124.018 mo
106.955 123.864 li
107.109 123.715 li
107.258 123.869 li
107.104 124.018 li
106.806 123.71 mo
106.657 123.556 li
106.811 123.407 li
106.96 123.561 li
106.806 123.71 li
106.508 123.401 mo
106.359 123.247 li
106.513 123.098 li
106.662 123.252 li
106.508 123.401 li
106.21 123.093 mo
106.06 122.939 li
106.215 122.79 li
106.364 122.944 li
106.21 123.093 li
105.911 122.784 mo
105.762 122.63 li
105.917 122.481 li
106.066 122.635 li
105.911 122.784 li
105.613 122.476 mo
105.464 122.322 li
105.618 122.173 li
105.767 122.327 li
105.613 122.476 li
105.315 122.167 mo
105.166 122.013 li
105.32 121.864 li
105.469 122.018 li
105.315 122.167 li
.36408 .213107 0 0 cmyk
f
105.017 121.859 mo
104.868 121.705 li
105.022 121.556 li
105.171 121.71 li
105.017 121.859 li
.904997 .707607 .0103151 0 cmyk
f
105.167 112.464 mo
105.163 112.46 105.159 112.456 105.155 112.452 cv
105.167 112.463 li
105.167 112.464 li
.36408 .213107 0 0 cmyk
f
105.026 112.624 mo
104.864 112.482 li
105.006 112.321 li
105.155 112.452 li
105.159 112.456 105.163 112.46 105.167 112.464 cv
105.026 112.624 li
.904997 .707607 .0103151 0 cmyk
f
105.309 112.302 mo
105.148 112.16 li
105.289 111.999 li
105.45 112.141 li
105.309 112.302 li
105.592 111.98 mo
105.431 111.838 li
105.573 111.677 li
105.734 111.818 li
105.592 111.98 li
105.875 111.657 mo
105.714 111.516 li
105.856 111.355 li
106.017 111.496 li
105.875 111.657 li
106.158 111.335 mo
105.997 111.193 li
106.139 111.032 li
106.3 111.174 li
106.158 111.335 li
106.442 111.013 mo
106.281 110.871 li
106.422 110.71 li
106.583 110.852 li
106.442 111.013 li
106.725 110.691 mo
106.564 110.549 li
106.705 110.388 li
106.867 110.53 li
106.725 110.691 li
107.008 110.368 mo
106.847 110.227 li
106.989 110.066 li
107.15 110.207 li
107.008 110.368 li
107.291 110.046 mo
107.13 109.905 li
107.272 109.743 li
107.433 109.885 li
107.291 110.046 li
107.575 109.724 mo
107.414 109.582 li
107.555 109.421 li
107.716 109.563 li
107.575 109.724 li
107.858 109.402 mo
107.697 109.26 li
107.838 109.099 li
107.999 109.241 li
107.858 109.402 li
108.141 109.08 mo
107.98 108.938 li
108.122 108.777 li
108.283 108.918 li
108.141 109.08 li
108.424 108.757 mo
108.263 108.616 li
108.405 108.455 li
108.566 108.596 li
108.424 108.757 li
108.708 108.435 mo
108.546 108.293 li
108.688 108.132 li
108.849 108.274 li
108.708 108.435 li
108.991 108.113 mo
108.83 107.971 li
108.971 107.81 li
109.132 107.952 li
108.991 108.113 li
109.274 107.791 mo
109.113 107.649 li
109.255 107.488 li
109.416 107.629 li
109.274 107.791 li
109.557 107.468 mo
109.396 107.327 li
109.538 107.166 li
109.699 107.307 li
109.557 107.468 li
109.84 107.146 mo
109.679 107.005 li
109.821 106.843 li
109.982 106.985 li
109.84 107.146 li
110.124 106.824 mo
109.963 106.682 li
110.104 106.521 li
110.265 106.663 li
110.124 106.824 li
110.407 106.502 mo
110.246 106.36 li
110.387 106.199 li
110.549 106.341 li
110.407 106.502 li
110.69 106.179 mo
110.529 106.038 li
110.671 105.877 li
110.832 106.018 li
110.69 106.179 li
110.973 105.857 mo
110.812 105.716 li
110.954 105.555 li
111.115 105.696 li
110.973 105.857 li
111.257 105.535 mo
111.095 105.393 li
111.237 105.232 li
111.398 105.374 li
111.257 105.535 li
111.54 105.213 mo
111.379 105.071 li
111.52 104.91 li
111.681 105.052 li
111.54 105.213 li
111.823 104.891 mo
111.662 104.749 li
111.804 104.588 li
111.965 104.729 li
111.823 104.891 li
112.106 104.568 mo
111.945 104.427 li
112.087 104.266 li
112.248 104.407 li
112.106 104.568 li
112.389 104.246 mo
112.228 104.105 li
112.37 103.943 li
112.531 104.085 li
112.389 104.246 li
112.673 103.924 mo
112.512 103.782 li
112.653 103.621 li
112.814 103.763 li
112.673 103.924 li
112.956 103.602 mo
112.795 103.46 li
112.936 103.299 li
113.098 103.441 li
112.956 103.602 li
113.239 103.279 mo
113.078 103.138 li
113.22 102.977 li
113.381 103.118 li
113.239 103.279 li
113.522 102.957 mo
113.361 102.816 li
113.503 102.654 li
113.664 102.796 li
113.522 102.957 li
113.806 102.635 mo
113.645 102.493 li
113.786 102.332 li
113.947 102.474 li
113.806 102.635 li
114.089 102.313 mo
113.928 102.171 li
114.069 102.01 li
114.23 102.152 li
114.089 102.313 li
114.372 101.991 mo
114.211 101.849 li
114.353 101.688 li
114.514 101.829 li
114.372 101.991 li
114.655 101.668 mo
114.494 101.527 li
114.636 101.366 li
114.797 101.507 li
114.655 101.668 li
114.939 101.346 mo
114.777 101.204 li
114.919 101.043 li
115.08 101.185 li
114.939 101.346 li
115.222 101.024 mo
115.061 100.882 li
115.202 100.721 li
115.363 100.863 li
115.222 101.024 li
115.505 100.702 mo
115.344 100.56 li
115.486 100.399 li
115.647 100.541 li
115.505 100.702 li
115.788 100.379 mo
115.627 100.238 li
115.769 100.077 li
115.93 100.218 li
115.788 100.379 li
116.071 100.057 mo
115.91 99.9156 li
116.052 99.7545 li
116.213 99.8961 li
116.071 100.057 li
116.355 99.735 mo
116.194 99.5934 li
116.335 99.4323 li
116.496 99.5739 li
116.355 99.735 li
116.638 99.4128 mo
116.477 99.2711 li
116.618 99.11 li
116.78 99.2517 li
116.638 99.4128 li
116.921 99.0906 mo
116.76 98.949 li
116.902 98.7878 li
117.063 98.9294 li
116.921 99.0906 li
117.204 98.7683 mo
117.043 98.6267 li
117.185 98.4656 li
117.346 98.6072 li
117.204 98.7683 li
117.488 98.4461 mo
117.326 98.3044 li
117.468 98.1434 li
117.629 98.285 li
117.488 98.4461 li
117.771 98.1239 mo
117.61 97.9823 li
117.751 97.8211 li
117.912 97.9627 li
117.771 98.1239 li
118.054 97.8017 mo
117.893 97.66 li
118.035 97.4989 li
118.196 97.6406 li
118.054 97.8017 li
118.337 97.4794 mo
118.176 97.3378 li
118.318 97.1767 li
118.479 97.3183 li
118.337 97.4794 li
118.62 97.1572 mo
118.459 97.0156 li
118.601 96.8544 li
118.762 96.9961 li
118.62 97.1572 li
118.904 96.835 mo
118.743 96.6933 li
118.884 96.5323 li
119.045 96.6739 li
118.904 96.835 li
119.187 96.5127 mo
119.026 96.3711 li
119.167 96.21 li
119.329 96.3516 li
119.187 96.5127 li
119.47 96.1906 mo
119.309 96.0489 li
119.451 95.8878 li
119.612 96.0294 li
119.47 96.1906 li
119.753 95.8683 mo
119.592 95.7267 li
119.734 95.5656 li
119.895 95.7072 li
119.753 95.8683 li
120.037 95.546 mo
119.875 95.4044 li
120.017 95.2433 li
120.178 95.385 li
120.037 95.546 li
120.32 95.2239 mo
120.159 95.0823 li
120.3 94.9211 li
120.461 95.0627 li
120.32 95.2239 li
120.603 94.9016 mo
120.442 94.76 li
120.584 94.5989 li
120.745 94.7405 li
120.603 94.9016 li
120.886 94.5794 mo
120.725 94.4377 li
120.867 94.2767 li
121.028 94.4183 li
120.886 94.5794 li
121.169 94.2572 mo
121.008 94.1156 li
121.15 93.9544 li
121.311 94.096 li
121.169 94.2572 li
121.453 93.9349 mo
121.292 93.7933 li
121.433 93.6322 li
121.594 93.7739 li
121.453 93.9349 li
121.736 93.6127 mo
121.575 93.4711 li
121.716 93.31 li
121.878 93.4516 li
121.736 93.6127 li
122.019 93.2905 mo
121.858 93.1489 li
122 92.9877 li
122.161 93.1293 li
122.019 93.2905 li
122.302 92.9683 mo
122.141 92.8266 li
122.283 92.6656 li
122.444 92.8072 li
122.302 92.9683 li
122.586 92.646 mo
122.425 92.5044 li
122.566 92.3433 li
122.727 92.4849 li
122.586 92.646 li
122.869 92.3238 mo
122.708 92.1822 li
122.849 92.021 li
123.011 92.1627 li
122.869 92.3238 li
123.152 92.0016 mo
122.991 91.86 li
123.133 91.6989 li
123.294 91.8405 li
123.152 92.0016 li
123.435 91.6793 mo
123.274 91.5377 li
123.416 91.3766 li
123.577 91.5182 li
123.435 91.6793 li
123.719 91.3572 mo
123.557 91.2155 li
123.699 91.0545 li
123.86 91.196 li
123.719 91.3572 li
124.002 91.0349 mo
123.841 90.8933 li
123.982 90.7322 li
124.143 90.8738 li
124.002 91.0349 li
124.285 90.7127 mo
124.124 90.5711 li
124.266 90.41 li
124.427 90.5516 li
124.285 90.7127 li
124.568 90.3905 mo
124.407 90.2489 li
124.549 90.0878 li
124.71 90.2293 li
124.568 90.3905 li
124.851 90.0682 mo
124.69 89.9266 li
124.832 89.7655 li
124.993 89.9072 li
124.851 90.0682 li
125.135 89.746 mo
124.974 89.6044 li
125.02 89.5517 li
125.069 89.6039 125.12 89.6545 125.172 89.7036 cv
125.135 89.746 li
.36408 .213107 0 0 cmyk
f
125.172 89.7036 mo
125.12 89.6545 125.069 89.6039 125.02 89.5517 cv
125.115 89.4433 li
125.276 89.5849 li
125.172 89.7036 li
.904997 .707607 .0103151 0 cmyk
f
232.575 66.4987 mo
232.545 66.4687 232.515 66.439 232.485 66.4095 cv
232.463 66.3891 232.442 66.3688 232.42 66.3486 cv
232.579 66.2155 li
232.717 66.3798 li
232.575 66.4987 li
.36408 .213107 0 0 cmyk
f
232.553 66.5177 mo
232.415 66.3534 li
232.42 66.3486 li
232.442 66.3688 232.463 66.3891 232.485 66.4095 cv
232.515 66.439 232.545 66.4687 232.575 66.4987 cv
232.553 66.5177 li
.904997 .707607 .0103151 0 cmyk
f
232.881 66.2419 mo
232.743 66.0776 li
232.908 65.9397 li
233.046 66.1039 li
232.881 66.2419 li
233.21 65.966 mo
233.072 65.8018 li
233.236 65.6639 li
233.374 65.8281 li
233.21 65.966 li
233.538 65.6902 mo
233.401 65.5259 li
233.565 65.388 li
233.703 65.5523 li
233.538 65.6902 li
233.867 65.4144 mo
233.729 65.2501 li
233.893 65.1122 li
234.031 65.2765 li
233.867 65.4144 li
234.196 65.1386 mo
234.058 64.9743 li
234.222 64.8364 li
234.36 65.0007 li
234.196 65.1386 li
234.524 64.8628 mo
234.386 64.6985 li
234.551 64.5605 li
234.688 64.7249 li
234.524 64.8628 li
234.853 64.587 mo
234.715 64.4226 li
234.879 64.2847 li
235.017 64.4491 li
234.853 64.587 li
235.181 64.3111 mo
235.043 64.1468 li
235.208 64.009 li
235.346 64.1732 li
235.181 64.3111 li
235.51 64.0353 mo
235.372 63.8711 li
235.536 63.7331 li
235.674 63.8974 li
235.51 64.0353 li
235.839 63.7595 mo
235.701 63.5952 li
235.865 63.4573 li
236.003 63.6216 li
235.839 63.7595 li
236.167 63.4836 mo
236.029 63.3194 li
236.193 63.1815 li
236.331 63.3457 li
236.167 63.4836 li
236.496 63.2078 mo
236.358 63.0436 li
236.522 62.9056 li
236.66 63.0699 li
236.496 63.2078 li
236.824 62.932 mo
236.686 62.7677 li
236.851 62.6298 li
236.989 62.7942 li
236.824 62.932 li
237.153 62.6561 mo
237.015 62.4919 li
237.179 62.354 li
237.317 62.5183 li
237.153 62.6561 li
237.481 62.3804 mo
237.344 62.2161 li
237.508 62.0781 li
237.646 62.2425 li
237.481 62.3804 li
237.81 62.1046 mo
237.672 61.9402 li
237.836 61.8023 li
237.974 61.9667 li
237.81 62.1046 li
238.139 61.8287 mo
238.001 61.6644 li
238.165 61.5265 li
238.303 61.6908 li
238.139 61.8287 li
238.467 61.5529 mo
238.329 61.3886 li
238.494 61.2507 li
238.632 61.415 li
238.467 61.5529 li
238.796 61.2771 mo
238.658 61.1128 li
238.822 60.9749 li
238.96 61.1392 li
238.796 61.2771 li
239.124 61.0012 mo
238.986 60.837 li
239.151 60.6991 li
239.289 60.8633 li
239.124 61.0012 li
239.453 60.7254 mo
239.315 60.5612 li
239.479 60.4233 li
239.617 60.5875 li
239.453 60.7254 li
239.782 60.4496 mo
239.644 60.2853 li
239.808 60.1474 li
239.946 60.3117 li
239.782 60.4496 li
240.11 60.1738 mo
239.972 60.0095 li
240.137 59.8716 li
240.274 60.0359 li
240.11 60.1738 li
240.439 59.898 mo
240.301 59.7337 li
240.465 59.5958 li
240.603 59.7601 li
240.439 59.898 li
240.767 59.6222 mo
240.629 59.4578 li
240.794 59.3199 li
240.932 59.4843 li
240.767 59.6222 li
241.096 59.3464 mo
240.958 59.182 li
241.122 59.0441 li
241.26 59.2084 li
241.096 59.3464 li
241.424 59.0705 mo
241.287 58.9062 li
241.451 58.7683 li
241.589 58.9326 li
241.424 59.0705 li
241.753 58.7947 mo
241.615 58.6304 li
241.779 58.4925 li
241.917 58.6568 li
241.753 58.7947 li
242.082 58.5189 mo
241.944 58.3546 li
242.108 58.2167 li
242.246 58.3809 li
242.082 58.5189 li
242.41 58.243 mo
242.272 58.0788 li
242.437 57.9409 li
242.575 58.1051 li
242.41 58.243 li
242.739 57.9672 mo
242.601 57.8029 li
242.765 57.665 li
242.903 57.8293 li
242.739 57.9672 li
243.067 57.6914 mo
242.93 57.5271 li
243.094 57.3892 li
243.232 57.5535 li
243.067 57.6914 li
243.396 57.4155 mo
243.258 57.2513 li
243.422 57.1134 li
243.56 57.2777 li
243.396 57.4155 li
243.725 57.1398 mo
243.587 56.9755 li
243.751 56.8375 li
243.889 57.0019 li
243.725 57.1398 li
244.053 56.864 mo
243.915 56.6996 li
244.08 56.5617 li
244.217 56.726 li
244.053 56.864 li
244.382 56.5881 mo
244.244 56.4238 li
244.408 56.2859 li
244.546 56.4502 li
244.382 56.5881 li
244.71 56.3123 mo
244.572 56.148 li
244.737 56.01 li
244.875 56.1744 li
244.71 56.3123 li
245.039 56.0365 mo
244.901 55.8722 li
245.065 55.7343 li
245.203 55.8986 li
245.039 56.0365 li
245.368 55.7606 mo
245.23 55.5964 li
245.394 55.4585 li
245.532 55.6227 li
245.368 55.7606 li
245.696 55.4848 mo
245.558 55.3206 li
245.723 55.1826 li
245.86 55.3469 li
245.696 55.4848 li
246.025 55.209 mo
245.887 55.0447 li
246.051 54.9068 li
246.189 55.0711 li
246.025 55.209 li
246.353 54.9331 mo
246.215 54.7689 li
246.38 54.631 li
246.518 54.7953 li
246.353 54.9331 li
246.682 54.6574 mo
246.544 54.4931 li
246.708 54.3551 li
246.846 54.5195 li
246.682 54.6574 li
247.011 54.3816 mo
246.873 54.2172 li
247.037 54.0793 li
247.175 54.2437 li
247.011 54.3816 li
247.339 54.1057 mo
247.201 53.9414 li
247.365 53.8035 li
247.503 53.9678 li
247.339 54.1057 li
247.668 53.8299 mo
247.53 53.6656 li
247.694 53.5276 li
247.832 53.692 li
247.668 53.8299 li
247.996 53.5541 mo
247.858 53.3898 li
248.023 53.2519 li
248.161 53.4162 li
247.996 53.5541 li
248.325 53.2782 mo
248.187 53.114 li
248.351 52.9761 li
248.489 53.1403 li
248.325 53.2782 li
248.653 53.0024 mo
248.515 52.8382 li
248.68 52.7002 li
248.818 52.8645 li
248.653 53.0024 li
248.982 52.7266 mo
248.844 52.5623 li
249.008 52.4244 li
249.146 52.5887 li
248.982 52.7266 li
249.311 52.4507 mo
249.173 52.2865 li
249.337 52.1486 li
249.475 52.3128 li
249.311 52.4507 li
249.639 52.1749 mo
249.501 52.0107 li
249.666 51.8728 li
249.804 52.037 li
249.639 52.1749 li
249.968 51.8992 mo
249.83 51.7348 li
249.994 51.5969 li
250.132 51.7613 li
249.968 51.8992 li
250.296 51.6233 mo
250.158 51.459 li
250.323 51.3211 li
250.461 51.4854 li
250.296 51.6233 li
250.625 51.3475 mo
250.487 51.1832 li
250.651 51.0453 li
250.789 51.2096 li
250.625 51.3475 li
250.954 51.0717 mo
250.816 50.9073 li
250.98 50.7694 li
251.118 50.9338 li
250.954 51.0717 li
251.282 50.7959 mo
251.144 50.6316 li
251.309 50.4937 li
251.446 50.6579 li
251.282 50.7959 li
251.611 50.52 mo
251.473 50.3557 li
251.637 50.2179 li
251.775 50.3821 li
251.611 50.52 li
251.939 50.2442 mo
251.801 50.0799 li
251.966 49.942 li
252.104 50.1063 li
251.939 50.2442 li
252.268 49.9684 mo
252.13 49.8041 li
252.294 49.6662 li
252.432 49.8304 li
252.268 49.9684 li
252.596 49.6925 mo
252.459 49.5283 li
252.623 49.3904 li
252.761 49.5546 li
252.596 49.6925 li
252.925 49.4167 mo
252.787 49.2524 li
252.952 49.1145 li
253.089 49.2788 li
252.925 49.4167 li
253.254 49.141 mo
253.116 48.9766 li
253.28 48.8387 li
253.418 49.003 li
253.254 49.141 li
.36408 .213107 0 0 cmyk
f
253.582 48.8651 mo
253.444 48.7008 li
253.609 48.5629 li
253.747 48.7272 li
253.582 48.8651 li
.904997 .707607 .0103151 0 cmyk
f
222.668 66.4851 mo
222.535 66.3821 li
222.667 66.2128 li
222.824 66.3347 li
222.797 66.3595 222.771 66.3844 222.745 66.4095 cv
222.719 66.4346 222.693 66.4597 222.668 66.4851 cv
.36408 .213107 0 0 cmyk
f
222.705 66.5139 mo
222.668 66.4851 li
222.693 66.4597 222.719 66.4346 222.745 66.4095 cv
222.771 66.3844 222.797 66.3595 222.824 66.3347 cv
222.836 66.3446 li
222.705 66.5139 li
.904997 .707607 .0103151 0 cmyk
f
222.366 66.2504 mo
222.197 66.1186 li
222.329 65.9494 li
222.498 66.0811 li
222.366 66.2504 li
222.028 65.9869 mo
221.858 65.8552 li
221.99 65.6859 li
222.159 65.8176 li
222.028 65.9869 li
221.689 65.7234 mo
221.52 65.5917 li
221.651 65.4224 li
221.821 65.5542 li
221.689 65.7234 li
221.35 65.46 mo
221.181 65.3282 li
221.313 65.159 li
221.482 65.2907 li
221.35 65.46 li
221.012 65.1965 mo
220.842 65.0648 li
220.974 64.8955 li
221.144 65.0272 li
221.012 65.1965 li
220.673 64.933 mo
220.504 64.8013 li
220.636 64.632 li
220.805 64.7637 li
220.673 64.933 li
220.335 64.6696 mo
220.165 64.5378 li
220.297 64.3685 li
220.466 64.5003 li
220.335 64.6696 li
219.996 64.4062 mo
219.827 64.2744 li
219.959 64.1051 li
220.128 64.2368 li
219.996 64.4062 li
219.658 64.1426 mo
219.488 64.0109 li
219.62 63.8416 li
219.789 63.9733 li
219.658 64.1426 li
219.319 63.8792 mo
219.15 63.7474 li
219.281 63.5781 li
219.451 63.7099 li
219.319 63.8792 li
218.98 63.6157 mo
218.811 63.484 li
218.943 63.3147 li
219.112 63.4464 li
218.98 63.6157 li
218.642 63.3522 mo
218.473 63.2205 li
218.604 63.0512 li
218.773 63.1829 li
218.642 63.3522 li
218.303 63.0887 mo
218.134 62.957 li
218.266 62.7877 li
218.435 62.9195 li
218.303 63.0887 li
217.965 62.8253 mo
217.795 62.6935 li
217.927 62.5243 li
218.096 62.656 li
217.965 62.8253 li
217.626 62.5619 mo
217.457 62.4301 li
217.589 62.2608 li
217.758 62.3925 li
217.626 62.5619 li
217.287 62.2983 mo
217.118 62.1667 li
217.25 61.9973 li
217.419 62.1291 li
217.287 62.2983 li
216.949 62.0349 mo
216.78 61.9031 li
216.911 61.7338 li
217.081 61.8656 li
216.949 62.0349 li
216.61 61.7714 mo
216.441 61.6397 li
216.573 61.4704 li
216.742 61.6021 li
216.61 61.7714 li
216.272 61.5079 mo
216.103 61.3762 li
216.234 61.2069 li
216.403 61.3386 li
216.272 61.5079 li
215.933 61.2445 mo
215.764 61.1127 li
215.896 60.9434 li
216.065 61.0752 li
215.933 61.2445 li
215.595 60.981 mo
215.425 60.8493 li
215.557 60.68 li
215.726 60.8117 li
215.595 60.981 li
215.256 60.7175 mo
215.087 60.5858 li
215.219 60.4165 li
215.388 60.5482 li
215.256 60.7175 li
214.917 60.4541 mo
214.748 60.3223 li
214.88 60.153 li
215.049 60.2848 li
214.917 60.4541 li
214.579 60.1906 mo
214.41 60.0588 li
214.541 59.8896 li
214.711 60.0213 li
214.579 60.1906 li
214.24 59.9272 mo
214.071 59.7954 li
214.203 59.6261 li
214.372 59.7578 li
214.24 59.9272 li
213.902 59.6636 mo
213.733 59.532 li
213.864 59.3626 li
214.033 59.4944 li
213.902 59.6636 li
213.563 59.4002 mo
213.394 59.2684 li
213.526 59.0992 li
213.695 59.2309 li
213.563 59.4002 li
213.225 59.1367 mo
213.055 59.005 li
213.187 58.8357 li
213.356 58.9674 li
213.225 59.1367 li
212.886 58.8732 mo
212.717 58.7415 li
212.848 58.5723 li
213.018 58.7039 li
212.886 58.8732 li
212.547 58.6098 mo
212.378 58.478 li
212.51 58.3087 li
212.679 58.4405 li
212.547 58.6098 li
212.209 58.3463 mo
212.04 58.2146 li
212.171 58.0453 li
212.341 58.1771 li
212.209 58.3463 li
211.87 58.0828 mo
211.701 57.9511 li
211.833 57.7818 li
212.002 57.9135 li
211.87 58.0828 li
211.532 57.8194 mo
211.363 57.6877 li
211.494 57.5183 li
211.663 57.6501 li
211.532 57.8194 li
211.193 57.5559 mo
211.024 57.4242 li
211.156 57.2549 li
211.325 57.3866 li
211.193 57.5559 li
210.855 57.2925 mo
210.685 57.1607 li
210.817 56.9914 li
210.986 57.1231 li
210.855 57.2925 li
210.516 57.0289 mo
210.347 56.8973 li
210.478 56.7279 li
210.648 56.8597 li
210.516 57.0289 li
210.177 56.7655 mo
210.008 56.6337 li
210.14 56.4645 li
210.309 56.5962 li
210.177 56.7655 li
209.839 56.5021 mo
209.67 56.3703 li
209.801 56.201 li
209.971 56.3327 li
209.839 56.5021 li
209.5 56.2385 mo
209.331 56.1068 li
209.463 55.9376 li
209.632 56.0692 li
209.5 56.2385 li
209.162 55.9751 mo
208.992 55.8433 li
209.124 55.674 li
209.294 55.8058 li
209.162 55.9751 li
208.823 55.7116 mo
208.654 55.5799 li
208.786 55.4106 li
208.955 55.5424 li
208.823 55.7116 li
208.485 55.4482 mo
208.315 55.3164 li
208.447 55.1472 li
208.616 55.2788 li
208.485 55.4482 li
208.146 55.1847 mo
207.977 55.053 li
208.108 54.8836 li
208.278 55.0154 li
208.146 55.1847 li
207.807 54.9212 mo
207.638 54.7895 li
207.77 54.6202 li
207.939 54.7519 li
207.807 54.9212 li
207.469 54.6578 mo
207.3 54.526 li
207.431 54.3567 li
207.601 54.4884 li
207.469 54.6578 li
207.13 54.3942 mo
206.961 54.2626 li
207.093 54.0933 li
207.262 54.225 li
207.13 54.3942 li
206.792 54.1308 mo
206.622 53.999 li
206.754 53.8298 li
206.924 53.9615 li
206.792 54.1308 li
206.453 53.8674 mo
206.284 53.7356 li
206.416 53.5663 li
206.585 53.6981 li
206.453 53.8674 li
206.115 53.6038 mo
205.945 53.4722 li
206.077 53.3029 li
206.246 53.4345 li
206.115 53.6038 li
205.776 53.3404 mo
205.607 53.2087 li
205.738 53.0393 li
205.908 53.1711 li
205.776 53.3404 li
205.437 53.0769 mo
205.268 52.9452 li
205.4 52.7759 li
205.569 52.9077 li
205.437 53.0769 li
205.099 52.8135 mo
204.93 52.6817 li
205.061 52.5125 li
205.231 52.6441 li
205.099 52.8135 li
204.76 52.55 mo
204.591 52.4183 li
204.723 52.2489 li
204.892 52.3807 li
204.76 52.55 li
204.422 52.2865 mo
204.252 52.1547 li
204.384 51.9855 li
204.553 52.1173 li
204.422 52.2865 li
204.083 52.0231 mo
203.914 51.8913 li
204.046 51.722 li
204.215 51.8537 li
204.083 52.0231 li
203.745 51.7595 mo
203.575 51.6279 li
203.707 51.4586 li
203.876 51.5903 li
203.745 51.7595 li
203.406 51.4961 mo
203.237 51.3643 li
203.368 51.1951 li
203.538 51.3268 li
203.406 51.4961 li
203.067 51.2327 mo
202.898 51.1009 li
203.03 50.9316 li
203.199 51.0634 li
203.067 51.2327 li
202.729 50.9692 mo
202.56 50.8375 li
202.691 50.6682 li
202.861 50.7998 li
202.729 50.9692 li
202.39 50.7057 mo
202.221 50.574 li
202.353 50.4046 li
202.522 50.5364 li
202.39 50.7057 li
202.052 50.4422 mo
201.882 50.3105 li
202.014 50.1412 li
202.183 50.273 li
202.052 50.4422 li
201.713 50.1788 mo
201.544 50.047 li
201.676 49.8778 li
201.845 50.0094 li
201.713 50.1788 li
201.375 49.9153 mo
201.205 49.7836 li
201.337 49.6143 li
201.506 49.746 li
201.375 49.9153 li
201.036 49.6518 mo
200.867 49.5201 li
200.998 49.3508 li
201.168 49.4825 li
201.036 49.6518 li
200.697 49.3884 mo
200.528 49.2566 li
200.66 49.0873 li
200.829 49.2191 li
200.697 49.3884 li
200.359 49.1248 mo
200.19 48.9932 li
200.321 48.8239 li
200.491 48.9556 li
200.359 49.1248 li
200.02 48.8614 mo
200.006 48.8505 li
200.043 48.8142 200.08 48.7771 200.115 48.7393 cv
200.02 48.8614 li
.36408 .213107 0 0 cmyk
f
200.006 48.8505 mo
199.851 48.7297 li
199.983 48.5603 li
200.152 48.6921 li
200.115 48.7393 li
200.08 48.7771 200.043 48.8142 200.006 48.8505 cv
.904997 .707607 .0103151 0 cmyk
f
271.937 143.107 mo
271.863 143.02 li
272.027 142.881 li
272.091 142.957 li
272.038 143.006 271.987 143.056 271.937 143.107 cv
.36408 .213107 0 0 cmyk
f
272.001 143.184 mo
271.937 143.107 li
271.987 143.056 272.038 143.006 272.091 142.957 cv
272.166 143.045 li
272.001 143.184 li
.904997 .707607 .0103151 0 cmyk
f
271.725 142.856 mo
271.587 142.692 li
271.751 142.553 li
271.889 142.717 li
271.725 142.856 li
271.448 142.528 mo
271.31 142.364 li
271.474 142.225 li
271.613 142.389 li
271.448 142.528 li
271.172 142.2 mo
271.034 142.036 li
271.198 141.897 li
271.336 142.061 li
271.172 142.2 li
270.895 141.872 mo
270.757 141.708 li
270.921 141.569 li
271.06 141.733 li
270.895 141.872 li
270.619 141.544 mo
270.481 141.38 li
270.645 141.241 li
270.783 141.405 li
270.619 141.544 li
270.342 141.216 mo
270.204 141.052 li
270.368 140.913 li
270.507 141.077 li
270.342 141.216 li
270.066 140.888 mo
269.928 140.724 li
270.092 140.585 li
270.23 140.749 li
270.066 140.888 li
269.789 140.56 mo
269.651 140.396 li
269.815 140.257 li
269.953 140.421 li
269.789 140.56 li
269.513 140.232 mo
269.375 140.068 li
269.539 139.929 li
269.677 140.093 li
269.513 140.232 li
269.236 139.904 mo
269.098 139.74 li
269.262 139.601 li
269.4 139.765 li
269.236 139.904 li
268.96 139.576 mo
268.822 139.412 li
268.986 139.273 li
269.124 139.437 li
268.96 139.576 li
268.683 139.248 mo
268.545 139.084 li
268.709 138.945 li
268.847 139.109 li
268.683 139.248 li
268.407 138.92 mo
268.269 138.756 li
268.433 138.617 li
268.571 138.781 li
268.407 138.92 li
268.13 138.592 mo
267.992 138.428 li
268.156 138.289 li
268.294 138.453 li
268.13 138.592 li
267.854 138.264 mo
267.716 138.1 li
267.88 137.961 li
268.018 138.125 li
267.854 138.264 li
267.577 137.936 mo
267.439 137.772 li
267.603 137.633 li
267.741 137.797 li
267.577 137.936 li
267.301 137.608 mo
267.163 137.444 li
267.327 137.305 li
267.465 137.469 li
267.301 137.608 li
267.024 137.28 mo
266.886 137.116 li
267.05 136.977 li
267.188 137.141 li
267.024 137.28 li
266.748 136.952 mo
266.61 136.788 li
266.774 136.649 li
266.912 136.813 li
266.748 136.952 li
266.471 136.624 mo
266.333 136.46 li
266.497 136.321 li
266.635 136.485 li
266.471 136.624 li
266.195 136.296 mo
266.056 136.132 li
266.221 135.993 li
266.359 136.157 li
266.195 136.296 li
265.918 135.968 mo
265.78 135.804 li
265.944 135.665 li
266.082 135.829 li
265.918 135.968 li
265.642 135.639 mo
265.503 135.476 li
265.668 135.337 li
265.806 135.501 li
265.642 135.639 li
265.365 135.312 mo
265.227 135.148 li
265.391 135.009 li
265.529 135.173 li
265.365 135.312 li
265.089 134.983 mo
264.95 134.82 li
265.115 134.681 li
265.253 134.845 li
265.089 134.983 li
264.812 134.656 mo
264.674 134.492 li
264.838 134.353 li
264.976 134.517 li
264.812 134.656 li
264.536 134.327 mo
264.397 134.163 li
264.561 134.025 li
264.7 134.189 li
264.536 134.327 li
264.259 134 mo
264.121 133.835 li
264.285 133.697 li
264.423 133.861 li
264.259 134 li
263.983 133.671 mo
263.844 133.508 li
264.008 133.369 li
264.147 133.533 li
263.983 133.671 li
263.706 133.344 mo
263.568 133.179 li
263.732 133.041 li
263.87 133.205 li
263.706 133.344 li
263.43 133.015 mo
263.291 132.852 li
263.455 132.713 li
263.594 132.877 li
263.43 133.015 li
263.153 132.688 mo
263.015 132.523 li
263.179 132.385 li
263.317 132.549 li
263.153 132.688 li
262.877 132.359 mo
262.738 132.195 li
262.902 132.057 li
263.041 132.221 li
262.877 132.359 li
262.6 132.032 mo
262.462 131.867 li
262.626 131.729 li
262.764 131.893 li
262.6 132.032 li
262.324 131.703 mo
262.185 131.539 li
262.349 131.401 li
262.488 131.565 li
262.324 131.703 li
262.047 131.375 mo
261.909 131.211 li
262.073 131.073 li
262.211 131.237 li
262.047 131.375 li
261.771 131.047 mo
261.632 130.883 li
261.796 130.745 li
261.935 130.909 li
261.771 131.047 li
261.494 130.719 mo
261.356 130.555 li
261.52 130.417 li
261.658 130.581 li
261.494 130.719 li
261.218 130.391 mo
261.079 130.227 li
261.243 130.089 li
261.382 130.253 li
261.218 130.391 li
260.941 130.063 mo
260.803 129.899 li
260.967 129.761 li
261.105 129.925 li
260.941 130.063 li
260.665 129.735 mo
260.526 129.571 li
260.69 129.433 li
260.829 129.597 li
260.665 129.735 li
260.388 129.407 mo
260.25 129.243 li
260.414 129.105 li
260.552 129.269 li
260.388 129.407 li
260.112 129.079 mo
259.973 128.915 li
260.137 128.777 li
260.276 128.941 li
260.112 129.079 li
259.835 128.751 mo
259.697 128.587 li
259.861 128.449 li
259.999 128.613 li
259.835 128.751 li
259.558 128.423 mo
259.42 128.259 li
259.584 128.121 li
259.722 128.285 li
259.558 128.423 li
259.282 128.095 mo
259.144 127.931 li
259.308 127.793 li
259.446 127.957 li
259.282 128.095 li
259.005 127.767 mo
258.867 127.603 li
259.031 127.465 li
259.169 127.629 li
259.005 127.767 li
258.729 127.439 mo
258.591 127.275 li
258.755 127.137 li
258.893 127.301 li
258.729 127.439 li
258.452 127.111 mo
258.314 126.947 li
258.478 126.809 li
258.616 126.973 li
258.452 127.111 li
258.176 126.783 mo
258.038 126.619 li
258.202 126.481 li
258.34 126.645 li
258.176 126.783 li
257.899 126.455 mo
257.761 126.291 li
257.925 126.153 li
258.063 126.317 li
257.899 126.455 li
257.623 126.127 mo
257.485 125.963 li
257.649 125.825 li
257.787 125.989 li
257.623 126.127 li
257.346 125.799 mo
257.208 125.635 li
257.372 125.497 li
257.51 125.661 li
257.346 125.799 li
257.07 125.471 mo
256.932 125.307 li
257.096 125.169 li
257.234 125.333 li
257.07 125.471 li
256.793 125.143 mo
256.655 124.979 li
256.819 124.841 li
256.957 125.005 li
256.793 125.143 li
256.517 124.815 mo
256.379 124.651 li
256.543 124.513 li
256.681 124.677 li
256.517 124.815 li
256.24 124.487 mo
256.102 124.323 li
256.266 124.185 li
256.404 124.349 li
256.24 124.487 li
255.964 124.159 mo
255.826 123.995 li
255.99 123.857 li
256.128 124.021 li
255.964 124.159 li
255.687 123.831 mo
255.549 123.667 li
255.713 123.529 li
255.851 123.693 li
255.687 123.831 li
255.411 123.503 mo
255.273 123.339 li
255.437 123.201 li
255.575 123.365 li
255.411 123.503 li
255.134 123.175 mo
254.996 123.011 li
255.16 122.873 li
255.298 123.037 li
255.134 123.175 li
254.858 122.847 mo
254.72 122.683 li
254.883 122.545 li
255.022 122.709 li
254.858 122.847 li
254.581 122.519 mo
254.443 122.355 li
254.607 122.217 li
254.745 122.381 li
254.581 122.519 li
254.305 122.191 mo
254.167 122.027 li
254.33 121.889 li
254.469 122.053 li
254.305 122.191 li
.36408 .213107 0 0 cmyk
f
254.028 121.863 mo
253.89 121.699 li
254.054 121.561 li
254.192 121.725 li
254.028 121.863 li
.904997 .707607 .0103151 0 cmyk
f
254.056 112.641 mo
253.888 112.507 li
254.022 112.339 li
254.19 112.473 li
254.056 112.641 li
f
254.323 112.305 mo
254.156 112.171 li
254.289 112.004 li
254.457 112.137 li
254.323 112.305 li
254.591 111.97 mo
254.423 111.836 li
254.557 111.668 li
254.725 111.802 li
254.591 111.97 li
254.858 111.634 mo
254.691 111.501 li
254.824 111.333 li
254.992 111.467 li
254.858 111.634 li
255.126 111.299 mo
254.958 111.165 li
255.092 110.998 li
255.26 111.131 li
255.126 111.299 li
255.393 110.964 mo
255.226 110.83 li
255.36 110.662 li
255.527 110.796 li
255.393 110.964 li
255.661 110.628 mo
255.493 110.495 li
255.627 110.327 li
255.795 110.461 li
255.661 110.628 li
255.928 110.293 mo
255.761 110.159 li
255.895 109.991 li
256.062 110.125 li
255.928 110.293 li
256.196 109.958 mo
256.028 109.824 li
256.162 109.656 li
256.33 109.79 li
256.196 109.958 li
256.464 109.622 mo
256.296 109.488 li
256.43 109.321 li
256.597 109.454 li
256.464 109.622 li
256.731 109.287 mo
256.563 109.153 li
256.697 108.985 li
256.865 109.119 li
256.731 109.287 li
256.999 108.951 mo
256.831 108.818 li
256.965 108.65 li
257.132 108.784 li
256.999 108.951 li
257.266 108.616 mo
257.098 108.482 li
257.232 108.315 li
257.4 108.448 li
257.266 108.616 li
257.534 108.281 mo
257.366 108.147 li
257.5 107.979 li
257.667 108.113 li
257.534 108.281 li
257.801 107.945 mo
257.633 107.811 li
257.767 107.644 li
257.935 107.778 li
257.801 107.945 li
258.069 107.61 mo
257.901 107.476 li
258.035 107.308 li
258.202 107.442 li
258.069 107.61 li
258.336 107.274 mo
258.168 107.141 li
258.302 106.973 li
258.47 107.107 li
258.336 107.274 li
258.604 106.939 mo
258.436 106.805 li
258.57 106.638 li
258.737 106.771 li
258.604 106.939 li
258.871 106.604 mo
258.703 106.47 li
258.837 106.302 li
259.005 106.436 li
258.871 106.604 li
259.139 106.268 mo
258.971 106.135 li
259.105 105.967 li
259.273 106.101 li
259.139 106.268 li
259.406 105.933 mo
259.239 105.799 li
259.372 105.632 li
259.54 105.765 li
259.406 105.933 li
259.674 105.598 mo
259.506 105.464 li
259.64 105.296 li
259.808 105.43 li
259.674 105.598 li
259.941 105.262 mo
259.774 105.128 li
259.907 104.961 li
260.075 105.095 li
259.941 105.262 li
260.209 104.927 mo
260.041 104.793 li
260.175 104.625 li
260.343 104.759 li
260.209 104.927 li
260.476 104.591 mo
260.309 104.458 li
260.442 104.29 li
260.61 104.424 li
260.476 104.591 li
260.744 104.256 mo
260.576 104.122 li
260.71 103.955 li
260.878 104.088 li
260.744 104.256 li
261.011 103.921 mo
260.844 103.787 li
260.977 103.619 li
261.145 103.753 li
261.011 103.921 li
261.279 103.585 mo
261.111 103.452 li
261.245 103.284 li
261.413 103.418 li
261.279 103.585 li
261.546 103.25 mo
261.379 103.116 li
261.512 102.949 li
261.68 103.082 li
261.546 103.25 li
261.814 102.915 mo
261.646 102.781 li
261.78 102.613 li
261.948 102.747 li
261.814 102.915 li
262.082 102.579 mo
261.914 102.445 li
262.048 102.278 li
262.215 102.412 li
262.082 102.579 li
262.349 102.244 mo
262.181 102.11 li
262.315 101.942 li
262.483 102.076 li
262.349 102.244 li
262.617 101.908 mo
262.449 101.775 li
262.583 101.607 li
262.75 101.741 li
262.617 101.908 li
262.884 101.573 mo
262.716 101.439 li
262.85 101.272 li
263.018 101.405 li
262.884 101.573 li
263.152 101.238 mo
262.984 101.104 li
263.118 100.936 li
263.285 101.07 li
263.152 101.238 li
263.419 100.902 mo
263.251 100.769 li
263.385 100.601 li
263.553 100.735 li
263.419 100.902 li
263.687 100.567 mo
263.519 100.433 li
263.653 100.265 li
263.82 100.399 li
263.687 100.567 li
263.954 100.232 mo
263.786 100.098 li
263.92 99.9301 li
264.088 100.064 li
263.954 100.232 li
264.222 99.8962 mo
264.054 99.7624 li
264.188 99.5947 li
264.355 99.7285 li
264.222 99.8962 li
264.489 99.5608 mo
264.322 99.427 li
264.455 99.2594 li
264.623 99.3931 li
264.489 99.5608 li
264.757 99.2254 mo
264.589 99.0917 li
264.723 98.924 li
264.891 99.0577 li
264.757 99.2254 li
265.024 98.89 mo
264.857 98.7563 li
264.99 98.5886 li
265.158 98.7224 li
265.024 98.89 li
265.292 98.5547 mo
265.124 98.4209 li
265.258 98.2532 li
265.426 98.387 li
265.292 98.5547 li
265.559 98.2193 mo
265.392 98.0855 li
265.525 97.9178 li
265.693 98.0516 li
265.559 98.2193 li
265.827 97.8839 mo
265.659 97.7502 li
265.793 97.5825 li
265.961 97.7162 li
265.827 97.8839 li
266.094 97.5485 mo
265.927 97.4148 li
266.06 97.2471 li
266.228 97.3808 li
266.094 97.5485 li
266.362 97.2132 mo
266.194 97.0794 li
266.328 96.9117 li
266.496 97.0455 li
266.362 97.2132 li
266.629 96.8778 mo
266.462 96.744 li
266.595 96.5763 li
266.763 96.7101 li
266.629 96.8778 li
266.897 96.5424 mo
266.729 96.4086 li
266.863 96.241 li
267.031 96.3747 li
266.897 96.5424 li
267.164 96.207 mo
266.997 96.0733 li
267.131 95.9056 li
267.298 96.0393 li
267.164 96.207 li
267.432 95.8716 mo
267.264 95.7379 li
267.398 95.5702 li
267.566 95.704 li
267.432 95.8716 li
267.7 95.5363 mo
267.532 95.4025 li
267.666 95.2348 li
267.833 95.3686 li
267.7 95.5363 li
267.967 95.2009 mo
267.799 95.0671 li
267.933 94.8994 li
268.101 95.0332 li
267.967 95.2009 li
268.235 94.8655 mo
268.067 94.7318 li
268.201 94.5641 li
268.368 94.6978 li
268.235 94.8655 li
268.502 94.5301 mo
268.334 94.3964 li
268.468 94.2287 li
268.636 94.3624 li
268.502 94.5301 li
268.77 94.1948 mo
268.602 94.061 li
268.736 93.8933 li
268.903 94.0271 li
268.77 94.1948 li
269.037 93.8594 mo
268.869 93.7256 li
269.003 93.5579 li
269.171 93.6917 li
269.037 93.8594 li
269.305 93.524 mo
269.137 93.3903 li
269.271 93.2226 li
269.438 93.3563 li
269.305 93.524 li
269.572 93.1886 mo
269.404 93.0549 li
269.538 92.8872 li
269.706 93.0209 li
269.572 93.1886 li
269.84 92.8532 mo
269.672 92.7195 li
269.806 92.5518 li
269.973 92.6856 li
269.84 92.8532 li
270.107 92.5179 mo
269.94 92.3841 li
270.073 92.2164 li
270.241 92.3502 li
270.107 92.5179 li
270.375 92.1825 mo
270.207 92.0487 li
270.341 91.8811 li
270.509 92.0148 li
270.375 92.1825 li
270.642 91.8471 mo
270.475 91.7134 li
270.608 91.5457 li
270.776 91.6794 li
270.642 91.8471 li
270.91 91.5117 mo
270.742 91.378 li
270.876 91.2103 li
271.044 91.344 li
270.91 91.5117 li
271.177 91.1764 mo
271.01 91.0426 li
271.143 90.8749 li
271.311 91.0087 li
271.177 91.1764 li
271.445 90.841 mo
271.277 90.7072 li
271.411 90.5395 li
271.579 90.6733 li
271.445 90.841 li
271.712 90.5056 mo
271.545 90.3718 li
271.678 90.2042 li
271.846 90.3379 li
271.712 90.5056 li
271.98 90.1702 mo
271.812 90.0365 li
271.946 89.8688 li
272.114 90.0025 li
271.98 90.1702 li
272.2 89.7974 mo
272.08 89.7011 li
272.09 89.6879 li
272.126 89.7252 272.163 89.7617 272.2 89.7974 cv
.36408 .213107 0 0 cmyk
f
272.247 89.8348 mo
272.2 89.7974 li
272.163 89.7617 272.126 89.7252 272.09 89.6879 cv
272.201 89.5486 li
272.369 89.6824 li
272.247 89.8348 li
.904997 .707607 .0103151 0 cmyk
f
172.301 143.06 mo
172.284 143.032 li
172.31 143.054 li
172.301 143.06 li
172.37 143.018 mo
172.461 142.91 li
172.485 142.95 li
172.37 143.018 li
172.199 142.889 mo
172.191 142.875 li
172.229 142.852 li
172.199 142.889 li
f
172.31 143.054 mo
172.284 143.032 li
172.199 142.889 li
172.229 142.852 li
172.375 142.766 li
172.461 142.91 li
172.37 143.018 li
172.31 143.054 li
1 .87277 .340093 .34934 cmyk
f
172.669 142.84 mo
172.608 142.737 li
172.755 142.564 li
172.854 142.73 li
172.669 142.84 li
.36408 .213107 0 0 cmyk
f
172.608 142.737 mo
172.56 142.656 li
172.744 142.546 li
172.755 142.564 li
172.608 142.737 li
1 .87277 .340093 .34934 cmyk
f
173.038 142.621 mo
172.928 142.436 li
173.112 142.327 li
173.222 142.511 li
173.038 142.621 li
173.406 142.401 mo
173.297 142.217 li
173.481 142.107 li
173.591 142.291 li
173.406 142.401 li
173.775 142.182 mo
173.665 141.997 li
173.85 141.888 li
173.959 142.072 li
173.775 142.182 li
174.144 141.962 mo
174.034 141.778 li
174.218 141.668 li
174.328 141.852 li
174.144 141.962 li
174.512 141.743 mo
174.403 141.558 li
174.587 141.449 li
174.697 141.633 li
174.512 141.743 li
174.881 141.523 mo
174.771 141.339 li
174.956 141.229 li
175.065 141.413 li
174.881 141.523 li
175.25 141.304 mo
175.14 141.119 li
175.324 141.01 li
175.434 141.194 li
175.25 141.304 li
175.618 141.084 mo
175.509 140.9 li
175.693 140.79 li
175.803 140.975 li
175.618 141.084 li
175.987 140.865 mo
175.877 140.68 li
176.061 140.571 li
176.171 140.755 li
175.987 140.865 li
176.355 140.645 mo
176.246 140.461 li
176.43 140.351 li
176.54 140.536 li
176.355 140.645 li
176.724 140.426 mo
176.614 140.242 li
176.799 140.132 li
176.908 140.316 li
176.724 140.426 li
177.093 140.206 mo
176.983 140.022 li
177.167 139.912 li
177.277 140.097 li
177.093 140.206 li
177.461 139.987 mo
177.352 139.803 li
177.536 139.693 li
177.646 139.877 li
177.461 139.987 li
177.83 139.767 mo
177.72 139.583 li
177.904 139.473 li
177.947 139.544 li
177.834 139.677 li
177.895 139.729 li
177.83 139.767 li
.36408 .213107 0 0 cmyk
f
177.895 139.729 mo
177.834 139.677 li
177.947 139.544 li
178.014 139.658 li
177.895 139.729 li
1 .87277 .340093 .34934 cmyk
f
178.199 139.548 mo
178.089 139.364 li
178.273 139.254 li
178.383 139.438 li
178.199 139.548 li
178.567 139.328 mo
178.457 139.144 li
178.502 139.118 li
178.553 139.162 li
178.65 139.048 li
178.751 139.219 li
178.567 139.328 li
.36408 .213107 0 0 cmyk
f
178.553 139.162 mo
178.502 139.118 li
178.642 139.034 li
178.65 139.048 li
178.553 139.162 li
1 .87277 .340093 .34934 cmyk
f
178.936 139.109 mo
178.826 138.925 li
179.01 138.815 li
179.12 138.999 li
178.936 139.109 li
179.304 138.89 mo
179.195 138.705 li
179.379 138.596 li
179.489 138.78 li
179.304 138.89 li
179.673 138.67 mo
179.563 138.486 li
179.748 138.376 li
179.857 138.56 li
179.673 138.67 li
180.042 138.451 mo
179.932 138.266 li
180.116 138.157 li
180.226 138.341 li
180.042 138.451 li
180.41 138.231 mo
180.301 138.047 li
180.485 137.937 li
180.595 138.121 li
180.41 138.231 li
180.779 138.012 mo
180.669 137.827 li
180.853 137.718 li
180.963 137.902 li
180.779 138.012 li
181.147 137.792 mo
181.038 137.608 li
181.222 137.498 li
181.332 137.682 li
181.147 137.792 li
181.516 137.573 mo
181.406 137.388 li
181.591 137.279 li
181.7 137.463 li
181.516 137.573 li
181.885 137.353 mo
181.775 137.169 li
181.959 137.059 li
182.069 137.244 li
181.885 137.353 li
182.253 137.134 mo
182.144 136.949 li
182.328 136.84 li
182.438 137.024 li
182.253 137.134 li
182.622 136.914 mo
182.512 136.73 li
182.697 136.62 li
182.806 136.805 li
182.622 136.914 li
182.991 136.695 mo
182.881 136.511 li
183.065 136.401 li
183.175 136.585 li
182.991 136.695 li
183.359 136.475 mo
183.249 136.291 li
183.434 136.181 li
183.544 136.366 li
183.359 136.475 li
183.728 136.256 mo
183.618 136.072 li
183.802 135.962 li
183.912 136.146 li
183.728 136.256 li
184.096 136.036 mo
183.987 135.852 li
184.171 135.742 li
184.281 135.927 li
184.096 136.036 li
184.465 135.817 mo
184.355 135.633 li
184.54 135.523 li
184.649 135.707 li
184.465 135.817 li
184.834 135.597 mo
184.724 135.413 li
184.908 135.303 li
185.018 135.488 li
184.834 135.597 li
185.202 135.378 mo
185.093 135.194 li
185.277 135.084 li
185.387 135.268 li
185.202 135.378 li
185.571 135.159 mo
185.461 134.974 li
185.645 134.864 li
185.755 135.049 li
185.571 135.159 li
185.94 134.939 mo
185.83 134.755 li
186.014 134.645 li
186.124 134.829 li
185.94 134.939 li
186.308 134.72 mo
186.198 134.535 li
186.383 134.425 li
186.492 134.61 li
186.308 134.72 li
186.677 134.5 mo
186.567 134.316 li
186.751 134.206 li
186.861 134.39 li
186.677 134.5 li
187.045 134.281 mo
186.936 134.096 li
187.12 133.987 li
187.23 134.171 li
187.045 134.281 li
187.414 134.061 mo
187.304 133.877 li
187.489 133.767 li
187.598 133.951 li
187.414 134.061 li
187.783 133.842 mo
187.673 133.657 li
187.857 133.548 li
187.967 133.732 li
187.783 133.842 li
188.151 133.622 mo
188.041 133.438 li
188.226 133.328 li
188.336 133.512 li
188.151 133.622 li
188.52 133.403 mo
188.41 133.218 li
188.594 133.109 li
188.704 133.293 li
188.52 133.403 li
188.889 133.183 mo
188.779 132.999 li
188.963 132.889 li
189.073 133.073 li
188.889 133.183 li
189.257 132.964 mo
189.147 132.779 li
189.332 132.67 li
189.441 132.854 li
189.257 132.964 li
189.626 132.744 mo
189.516 132.56 li
189.7 132.45 li
189.81 132.635 li
189.626 132.744 li
189.994 132.525 mo
189.885 132.341 li
190.069 132.231 li
190.179 132.415 li
189.994 132.525 li
190.363 132.305 mo
190.253 132.121 li
190.438 132.011 li
190.547 132.196 li
190.363 132.305 li
190.732 132.086 mo
190.622 131.902 li
190.806 131.792 li
190.916 131.976 li
190.732 132.086 li
191.1 131.866 mo
190.99 131.682 li
191.175 131.572 li
191.284 131.757 li
191.1 131.866 li
191.469 131.647 mo
191.359 131.463 li
191.543 131.353 li
191.653 131.537 li
191.469 131.647 li
191.837 131.427 mo
191.728 131.243 li
191.912 131.133 li
192.022 131.318 li
191.837 131.427 li
192.206 131.208 mo
192.096 131.024 li
192.281 130.914 li
192.39 131.098 li
192.206 131.208 li
192.575 130.989 mo
192.465 130.804 li
192.649 130.694 li
192.759 130.879 li
192.575 130.989 li
192.943 130.769 mo
192.834 130.585 li
193.018 130.475 li
193.128 130.659 li
192.943 130.769 li
193.312 130.55 mo
193.202 130.365 li
193.387 130.256 li
193.496 130.44 li
193.312 130.55 li
193.681 130.33 mo
193.571 130.146 li
193.755 130.036 li
193.865 130.22 li
193.681 130.33 li
194.049 130.111 mo
193.939 129.926 li
194.124 129.817 li
194.233 130.001 li
194.049 130.111 li
194.418 129.891 mo
194.308 129.707 li
194.492 129.597 li
194.602 129.781 li
194.418 129.891 li
194.786 129.672 mo
194.677 129.487 li
194.861 129.378 li
194.971 129.562 li
194.786 129.672 li
195.155 129.452 mo
195.045 129.268 li
195.23 129.158 li
195.339 129.342 li
195.155 129.452 li
195.524 129.233 mo
195.414 129.048 li
195.598 128.939 li
195.708 129.123 li
195.524 129.233 li
195.892 129.013 mo
195.782 128.829 li
195.967 128.719 li
196.077 128.904 li
195.892 129.013 li
196.261 128.794 mo
196.151 128.609 li
196.335 128.5 li
196.445 128.684 li
196.261 128.794 li
196.629 128.574 mo
196.52 128.39 li
196.704 128.28 li
196.814 128.465 li
196.629 128.574 li
196.998 128.355 mo
196.888 128.171 li
197.073 128.061 li
197.182 128.245 li
196.998 128.355 li
197.367 128.135 mo
197.257 127.951 li
197.441 127.841 li
197.551 128.026 li
197.367 128.135 li
197.735 127.916 mo
197.626 127.732 li
197.81 127.622 li
197.92 127.806 li
197.735 127.916 li
198.104 127.696 mo
197.994 127.512 li
198.179 127.402 li
198.288 127.587 li
198.104 127.696 li
198.473 127.477 mo
198.363 127.293 li
198.547 127.183 li
198.657 127.367 li
198.473 127.477 li
198.841 127.257 mo
198.731 127.073 li
198.916 126.963 li
199.025 127.148 li
198.841 127.257 li
199.21 127.038 mo
199.1 126.854 li
199.284 126.744 li
199.394 126.928 li
199.21 127.038 li
199.578 126.819 mo
199.469 126.634 li
199.653 126.524 li
199.763 126.709 li
199.578 126.819 li
199.947 126.599 mo
199.837 126.415 li
200.022 126.305 li
200.131 126.489 li
199.947 126.599 li
200.316 126.38 mo
200.206 126.195 li
200.39 126.086 li
200.5 126.27 li
200.316 126.38 li
200.684 126.16 mo
200.575 125.976 li
200.759 125.866 li
200.869 126.05 li
200.684 126.16 li
201.053 125.941 mo
200.943 125.756 li
201.127 125.647 li
201.237 125.831 li
201.053 125.941 li
201.421 125.721 mo
201.312 125.537 li
201.496 125.427 li
201.606 125.611 li
201.421 125.721 li
201.79 125.502 mo
201.68 125.317 li
201.865 125.208 li
201.974 125.392 li
201.79 125.502 li
202.159 125.282 mo
202.049 125.098 li
202.233 124.988 li
202.343 125.172 li
202.159 125.282 li
202.527 125.063 mo
202.418 124.878 li
202.602 124.769 li
202.712 124.953 li
202.527 125.063 li
202.896 124.843 mo
202.786 124.659 li
202.971 124.549 li
203.08 124.734 li
202.896 124.843 li
203.265 124.624 mo
203.155 124.439 li
203.339 124.33 li
203.449 124.514 li
203.265 124.624 li
203.633 124.404 mo
203.523 124.22 li
203.708 124.11 li
203.818 124.295 li
203.633 124.404 li
204.002 124.185 mo
203.892 124.001 li
204.076 123.891 li
204.186 124.075 li
204.002 124.185 li
204.37 123.965 mo
204.261 123.781 li
204.445 123.671 li
204.555 123.856 li
204.37 123.965 li
204.739 123.746 mo
204.629 123.562 li
204.814 123.452 li
204.923 123.636 li
204.739 123.746 li
205.108 123.526 mo
204.998 123.342 li
205.182 123.232 li
205.292 123.417 li
205.108 123.526 li
205.476 123.307 mo
205.367 123.123 li
205.551 123.013 li
205.661 123.197 li
205.476 123.307 li
205.845 123.087 mo
205.735 122.903 li
205.92 122.793 li
206.029 122.978 li
205.845 123.087 li
206.214 122.868 mo
206.104 122.684 li
206.288 122.574 li
206.398 122.758 li
206.214 122.868 li
206.582 122.649 mo
206.472 122.464 li
206.657 122.355 li
206.767 122.539 li
206.582 122.649 li
206.951 122.429 mo
206.841 122.245 li
207.025 122.135 li
207.135 122.319 li
206.951 122.429 li
207.319 122.21 mo
207.21 122.025 li
207.394 121.916 li
207.504 122.1 li
207.319 122.21 li
207.688 121.99 mo
207.578 121.806 li
207.763 121.696 li
207.872 121.88 li
207.688 121.99 li
.36408 .213107 0 0 cmyk
f
208.057 121.771 mo
207.947 121.586 li
208.028 121.538 li
208.138 121.722 li
208.057 121.771 li
.904997 .707607 .0103151 0 cmyk
f
207.827 112.537 mo
207.683 112.443 li
207.8 112.264 li
207.918 112.34 li
207.933 112.431 li
207.897 112.466 207.862 112.501 207.827 112.537 cv
207.503 112.326 mo
207.324 112.209 li
207.441 112.029 li
207.621 112.146 li
207.503 112.326 li
207.144 112.092 mo
206.965 111.974 li
207.082 111.795 li
207.261 111.912 li
207.144 112.092 li
206.785 111.857 mo
206.605 111.74 li
206.722 111.56 li
206.902 111.678 li
206.785 111.857 li
206.426 111.623 mo
206.246 111.506 li
206.363 111.326 li
206.543 111.443 li
206.426 111.623 li
206.066 111.388 mo
205.887 111.271 li
206.004 111.092 li
206.183 111.209 li
206.066 111.388 li
205.707 111.154 mo
205.527 111.037 li
205.644 110.857 li
205.824 110.974 li
205.707 111.154 li
205.348 110.92 mo
205.168 110.802 li
205.285 110.623 li
205.465 110.74 li
205.348 110.92 li
204.988 110.685 mo
204.809 110.568 li
204.926 110.388 li
205.106 110.505 li
204.988 110.685 li
204.629 110.451 mo
204.449 110.334 li
204.567 110.154 li
204.746 110.271 li
204.629 110.451 li
204.27 110.216 mo
204.09 110.099 li
204.207 109.919 li
204.387 110.037 li
204.27 110.216 li
203.91 109.982 mo
203.731 109.865 li
203.848 109.685 li
204.028 109.802 li
203.91 109.982 li
203.551 109.747 mo
203.371 109.63 li
203.489 109.451 li
203.668 109.568 li
203.551 109.747 li
203.192 109.513 mo
203.012 109.396 li
203.129 109.216 li
203.309 109.333 li
203.192 109.513 li
202.832 109.279 mo
202.653 109.161 li
202.77 108.982 li
202.95 109.099 li
202.832 109.279 li
202.473 109.044 mo
202.294 108.927 li
202.411 108.747 li
202.59 108.865 li
202.473 109.044 li
202.114 108.81 mo
201.934 108.693 li
202.051 108.513 li
202.231 108.63 li
202.114 108.81 li
201.755 108.575 mo
201.598 108.473 li
201.738 108.308 li
201.872 108.396 li
201.755 108.575 li
201.395 108.341 mo
201.216 108.224 li
201.333 108.044 li
201.512 108.161 li
201.395 108.341 li
201.036 108.107 mo
200.856 107.989 li
200.973 107.81 li
201.153 107.927 li
201.036 108.107 li
200.677 107.872 mo
200.497 107.755 li
200.614 107.575 li
200.794 107.692 li
200.677 107.872 li
200.317 107.638 mo
200.138 107.521 li
200.255 107.341 li
200.435 107.458 li
200.317 107.638 li
199.958 107.403 mo
199.778 107.286 li
199.896 107.107 li
200.075 107.224 li
199.958 107.403 li
199.599 107.169 mo
199.419 107.052 li
199.536 106.872 li
199.716 106.989 li
199.599 107.169 li
199.239 106.934 mo
199.06 106.817 li
199.177 106.638 li
199.357 106.755 li
199.239 106.934 li
198.88 106.7 mo
198.701 106.583 li
198.818 106.403 li
198.997 106.52 li
198.88 106.7 li
198.521 106.466 mo
198.515 106.462 li
198.563 106.4 li
198.521 106.466 li
198.389 106.275 mo
198.458 106.169 li
198.469 106.175 li
198.389 106.275 li
198.162 106.231 mo
197.982 106.114 li
198.099 105.934 li
198.279 106.052 li
198.162 106.231 li
197.802 105.997 mo
197.623 105.88 li
197.74 105.7 li
197.919 105.817 li
197.802 105.997 li
197.443 105.762 mo
197.263 105.645 li
197.38 105.466 li
197.56 105.583 li
197.443 105.762 li
197.084 105.528 mo
196.904 105.411 li
197.021 105.231 li
197.201 105.348 li
197.084 105.528 li
196.724 105.294 mo
196.545 105.176 li
196.662 104.997 li
196.842 105.114 li
196.724 105.294 li
195.628 104.578 mo
195.467 104.473 li
195.584 104.294 li
195.756 104.405 li
195.628 104.578 li
195.287 104.356 mo
195.107 104.239 li
195.225 104.059 li
195.404 104.176 li
195.287 104.356 li
194.928 104.122 mo
194.748 104.004 li
194.865 103.825 li
195.045 103.942 li
194.928 104.122 li
194.568 103.887 mo
194.389 103.77 li
194.506 103.59 li
194.686 103.707 li
194.568 103.887 li
194.209 103.653 mo
194.03 103.536 li
194.147 103.356 li
194.326 103.473 li
194.209 103.653 li
193.85 103.418 mo
193.67 103.301 li
193.788 103.121 li
193.967 103.239 li
193.85 103.418 li
193.491 103.184 mo
193.311 103.067 li
193.428 102.887 li
193.608 103.004 li
193.491 103.184 li
193.131 102.95 mo
192.952 102.832 li
193.069 102.653 li
193.249 102.77 li
193.131 102.95 li
192.772 102.715 mo
192.592 102.598 li
192.71 102.418 li
192.889 102.535 li
192.772 102.715 li
192.413 102.481 mo
192.233 102.363 li
192.35 102.184 li
192.53 102.301 li
192.413 102.481 li
192.053 102.246 mo
191.874 102.129 li
191.991 101.949 li
192.171 102.067 li
192.053 102.246 li
191.694 102.012 mo
191.514 101.895 li
191.632 101.715 li
191.811 101.832 li
191.694 102.012 li
191.335 101.777 mo
191.155 101.66 li
191.272 101.481 li
191.452 101.598 li
191.335 101.777 li
190.976 101.543 mo
190.796 101.426 li
190.913 101.246 li
191.093 101.363 li
190.976 101.543 li
190.616 101.309 mo
190.437 101.191 li
190.554 101.012 li
190.733 101.129 li
190.616 101.309 li
190.257 101.074 mo
190.077 100.957 li
190.194 100.777 li
190.374 100.895 li
190.257 101.074 li
189.898 100.84 mo
189.718 100.723 li
189.835 100.543 li
190.015 100.66 li
189.898 100.84 li
189.538 100.605 mo
189.359 100.488 li
189.476 100.309 li
189.655 100.426 li
189.538 100.605 li
189.179 100.371 mo
188.999 100.254 li
189.117 100.074 li
189.296 100.191 li
189.179 100.371 li
188.82 100.137 mo
188.64 100.019 li
188.757 99.8397 li
188.937 99.9569 li
188.82 100.137 li
188.46 99.9021 mo
188.281 99.785 li
188.398 99.6053 li
188.578 99.7225 li
188.46 99.9021 li
188.101 99.6678 mo
187.921 99.5505 li
188.039 99.3708 li
188.218 99.488 li
188.101 99.6678 li
187.742 99.4333 mo
187.562 99.3161 li
187.679 99.1365 li
187.859 99.2537 li
187.742 99.4333 li
187.382 99.1989 mo
187.203 99.0817 li
187.32 98.9021 li
187.5 99.0193 li
187.382 99.1989 li
187.023 98.9645 mo
186.843 98.8473 li
186.961 98.6676 li
187.14 98.7848 li
187.023 98.9645 li
186.664 98.73 mo
186.484 98.6129 li
186.601 98.4332 li
186.781 98.5504 li
186.664 98.73 li
186.305 98.4957 mo
186.125 98.3785 li
186.242 98.1988 li
186.422 98.316 li
186.305 98.4957 li
185.945 98.2613 mo
185.766 98.1441 li
185.883 97.9644 li
186.063 98.0816 li
185.945 98.2613 li
185.586 98.0268 mo
185.406 97.9096 li
185.524 97.73 li
185.703 97.8472 li
185.586 98.0268 li
185.227 97.7924 mo
185.047 97.6752 li
185.164 97.4956 li
185.344 97.6128 li
185.227 97.7924 li
184.867 97.558 mo
184.688 97.4408 li
184.805 97.2611 li
184.985 97.3784 li
184.867 97.558 li
184.508 97.3236 mo
184.328 97.2064 li
184.446 97.0267 li
184.625 97.1439 li
184.508 97.3236 li
184.149 97.0892 mo
183.969 96.972 li
184.086 96.7924 li
184.266 96.9095 li
184.149 97.0892 li
183.789 96.8548 mo
183.61 96.7376 li
183.727 96.5579 li
183.907 96.6752 li
183.789 96.8548 li
183.43 96.6204 mo
183.251 96.5031 li
183.368 96.3235 li
183.547 96.4407 li
183.43 96.6204 li
183.071 96.3859 mo
182.891 96.2687 li
183.008 96.0891 li
183.188 96.2063 li
183.071 96.3859 li
182.712 96.1516 mo
182.532 96.0344 li
182.649 95.8547 li
182.829 95.9719 li
182.712 96.1516 li
182.352 95.9172 mo
182.173 95.7999 li
182.29 95.6202 li
182.469 95.7374 li
182.352 95.9172 li
181.993 95.6827 mo
181.813 95.5655 li
181.93 95.3859 li
182.11 95.5031 li
181.993 95.6827 li
181.634 95.4483 mo
181.454 95.3311 li
181.571 95.1515 li
181.751 95.2687 li
181.634 95.4483 li
181.274 95.2139 mo
181.095 95.0966 li
181.212 94.917 li
181.392 95.0342 li
181.274 95.2139 li
180.915 94.9794 mo
180.735 94.8623 li
180.853 94.6826 li
181.032 94.7998 li
180.915 94.9794 li
180.556 94.7451 mo
180.376 94.6279 li
180.493 94.4482 li
180.673 94.5654 li
180.556 94.7451 li
180.196 94.5107 mo
180.017 94.3935 li
180.134 94.2138 li
180.314 94.331 li
180.196 94.5107 li
179.837 94.2762 mo
179.657 94.159 li
179.775 93.9794 li
179.954 94.0966 li
179.837 94.2762 li
179.478 94.0418 mo
179.298 93.9246 li
179.415 93.745 li
179.595 93.8622 li
179.478 94.0418 li
179.118 93.8074 mo
178.939 93.6902 li
179.056 93.5105 li
179.236 93.6278 li
179.118 93.8074 li
178.759 93.573 mo
178.58 93.4558 li
178.697 93.2761 li
178.876 93.3933 li
178.759 93.573 li
178.4 93.3386 mo
178.22 93.2214 li
178.337 93.0417 li
178.517 93.1589 li
178.4 93.3386 li
178.041 93.1042 mo
177.861 92.987 li
177.978 92.8073 li
178.158 92.9246 li
178.041 93.1042 li
177.681 92.8698 mo
177.502 92.7525 li
177.619 92.5729 li
177.799 92.6901 li
177.681 92.8698 li
177.322 92.6353 mo
177.142 92.5181 li
177.26 92.3385 li
177.439 92.4557 li
177.322 92.6353 li
176.963 92.4009 mo
176.783 92.2838 li
176.9 92.104 li
177.08 92.2213 li
176.963 92.4009 li
176.603 92.1666 mo
176.424 92.0493 li
176.541 91.8696 li
176.721 91.9868 li
176.603 92.1666 li
176.244 91.9321 mo
176.064 91.8149 li
176.182 91.6353 li
176.361 91.7525 li
176.244 91.9321 li
175.885 91.6977 mo
175.705 91.5805 li
175.822 91.4009 li
176.002 91.5181 li
175.885 91.6977 li
175.525 91.4633 mo
175.346 91.346 li
175.463 91.1664 li
175.643 91.2836 li
175.525 91.4633 li
175.166 91.2288 mo
174.987 91.1117 li
175.104 90.932 li
175.283 91.0492 li
175.166 91.2288 li
174.807 90.9945 mo
174.627 90.8773 li
174.744 90.6976 li
174.924 90.8148 li
174.807 90.9945 li
174.448 90.7601 mo
174.268 90.6429 li
174.385 90.4632 li
174.565 90.5804 li
174.448 90.7601 li
174.088 90.5256 mo
173.909 90.4084 li
174.026 90.2288 li
174.205 90.346 li
174.088 90.5256 li
173.729 90.2912 mo
173.549 90.174 li
173.666 89.9944 li
173.846 90.1116 li
173.729 90.2912 li
173.37 90.0568 mo
173.19 89.9396 li
173.307 89.7599 li
173.487 89.8771 li
173.37 90.0568 li
173.01 89.8224 mo
172.989 89.8085 li
173.017 89.7821 173.045 89.7552 173.072 89.7279 cv
173.01 89.8224 li
.36408 .213107 0 0 cmyk
f
207.863 112.56 mo
207.827 112.537 li
207.862 112.501 207.897 112.466 207.933 112.431 cv
207.936 112.448 li
207.863 112.56 li
.904997 .707607 .0103151 0 cmyk
f
172.989 89.8085 mo
172.831 89.7052 li
172.948 89.5255 li
173.128 89.6427 li
173.072 89.7279 li
173.045 89.7552 173.017 89.7821 172.989 89.8085 cv
f
196.365 105.059 mo
196.185 104.942 li
196.303 104.762 li
196.482 104.88 li
196.365 105.059 li
196.006 104.825 mo
195.826 104.708 li
195.943 104.528 li
196.123 104.645 li
196.006 104.825 li
195.646 104.59 mo
195.628 104.578 li
195.756 104.405 li
195.764 104.411 li
195.646 104.59 li
1 .87277 .340093 .34934 cmyk
f
198.515 106.462 mo
198.341 106.349 li
198.389 106.275 li
198.469 106.175 li
198.638 106.286 li
198.563 106.4 li
198.515 106.462 li
f
207.936 112.448 mo
207.933 112.431 li
207.918 112.34 li
207.98 112.381 li
207.936 112.448 li
f
201.598 108.473 mo
201.575 108.458 li
201.692 108.279 li
201.738 108.308 li
201.598 108.473 li
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
/VALTWG+Calibri*1 uf
/VALTWG+Calibri uf
/PBAAAA+Calibri uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
