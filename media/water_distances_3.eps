%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: water_distances.pdf
%%Creator: Adobe Acrobat 11.0.23
%%For: Gollum
%%CreationDate: 2/27/2018, 5:56:27 PM
%%BoundingBox: 0 0 288 216
%%HiResBoundingBox: 0 0 288 216
%%CropBox: 0 0 288 216
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1093 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.4-c006 80.159825, 2016/09/16-03:31:08        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   xmp:ModifyDate="2018-02-27T17:56:14-05:00"
   xmp:CreateDate="2018-02-27T17:54:55-05:00"
   xmp:MetadataDate="2018-02-27T17:56:14-05:00"
   xmp:CreatorTool="Acrobat PDFMaker 11 for PowerPoint"
   xmpMM:DocumentID="uuid:7ba52d38-78ab-4c62-9a69-dd82e84e2688"
   xmpMM:InstanceID="uuid:d7b0a9ba-3121-4bf9-b991-c1e1b7150fb5"
   dc:format="application/pdf"
   pdf:Producer="Adobe PDF Library 11.0">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">PowerPoint Presentation</rdf:li>
    </rdf:Alt>
   </dc:title>
   <dc:creator>
    <rdf:Seq>
     <rdf:li>Volodymyr Sakun</rdf:li>
    </rdf:Seq>
   </dc:creator>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 3 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -216 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 216 li
288 216 li
288 0 li
cp
clp
gsave
0 216 mo
288 216 li
288 0 li
0 0 li
0 216 li
clp
-65.4329 203.164 mo
323.029 203.164 li
323.029 -15.3459 li
-65.4329 -15.3459 li
-65.4329 203.164 li
false sop
0 0 0 0 cmyk
f
59.0207 66.1826 mo
59.0207 62.9644 61.7274 60.3556 65.0661 60.3556 cv
68.4049 60.3556 71.1116 62.9644 71.1116 66.1826 cv
71.1116 69.4007 68.4049 72.0095 65.0661 72.0095 cv
61.7274 72.0095 59.0207 69.4007 59.0207 66.1826 cv
0 1 1 0 cmyk
ef
59.0207 66.1826 mo
58.8264 66.1826 li
58.8263 64.5183 59.5271 63.0106 60.6565 61.9225 cv
61.7858 60.8339 63.3457 60.1614 65.066 60.1614 cv
66.7864 60.1614 68.3463 60.8339 69.4756 61.9225 cv
70.6051 63.0106 71.3059 64.5183 71.3057 66.1826 cv
71.3059 67.8468 70.6051 69.3545 69.4756 70.4427 cv
68.3463 71.5313 66.7864 72.2038 65.066 72.2038 cv
63.3457 72.2038 61.7858 71.5313 60.6565 70.4427 cv
59.5271 69.3545 58.8263 67.8468 58.8264 66.1826 cv
59.0207 66.1826 li
59.2149 66.1826 li
59.215 67.7365 59.8675 69.1422 60.9261 70.163 cv
61.9848 71.1833 63.4476 71.8153 65.066 71.8153 cv
66.6844 71.8153 68.1473 71.1833 69.206 70.163 cv
70.2646 69.1422 70.9171 67.7365 70.9172 66.1826 cv
70.9171 64.6286 70.2646 63.2229 69.206 62.2021 cv
68.1473 61.1818 66.6844 60.5499 65.066 60.5499 cv
63.4476 60.5499 61.9848 61.1818 60.9261 62.2021 cv
59.8675 63.2229 59.215 64.6286 59.2149 66.1826 cv
59.0207 66.1826 li
1 .816159 .15967 .0319219 cmyk
f
45.6187 107.845 mo
45.6187 104.627 48.3254 102.018 51.6641 102.018 cv
55.0029 102.018 57.7096 104.627 57.7096 107.845 cv
57.7096 111.063 55.0029 113.672 51.6641 113.672 cv
48.3254 113.672 45.6187 111.063 45.6187 107.845 cv
0 1 1 0 cmyk
ef
45.6187 107.845 mo
45.4244 107.845 li
45.4243 106.181 46.1251 104.673 47.2546 103.585 cv
48.3838 102.496 49.9437 101.824 51.6641 101.824 cv
53.3845 101.824 54.9443 102.496 56.0736 103.585 cv
57.2031 104.673 57.9039 106.181 57.9038 107.845 cv
57.9039 109.509 57.2031 111.017 56.0736 112.105 cv
54.9443 113.194 53.3845 113.866 51.6641 113.866 cv
49.9437 113.866 48.3838 113.194 47.2546 112.105 cv
46.1251 111.017 45.4243 109.509 45.4244 107.845 cv
45.6187 107.845 li
45.8129 107.845 li
45.8131 109.399 46.4656 110.805 47.5241 111.826 cv
48.5828 112.846 50.0457 113.478 51.6641 113.478 cv
53.2825 113.478 54.7453 112.846 55.8041 111.826 cv
56.8626 110.805 57.5152 109.399 57.5153 107.845 cv
57.5152 106.291 56.8626 104.885 55.8041 103.865 cv
54.7453 102.844 53.2825 102.212 51.6641 102.212 cv
50.0457 102.212 48.5828 102.844 47.5241 103.865 cv
46.4656 104.885 45.8131 106.291 45.8129 107.845 cv
45.6187 107.845 li
1 .816159 .15967 .0319219 cmyk
f
9.92876 133.338 mo
9.92876 131.729 11.2334 130.424 12.8422 130.424 cv
14.4511 130.424 15.7557 131.729 15.7557 133.338 cv
15.7557 134.947 14.4511 136.251 12.8422 136.251 cv
11.2334 136.251 9.92876 134.947 9.92876 133.338 cv
.808743 .585351 0 0 cmyk
ef
9.92876 133.338 mo
9.73452 133.338 li
9.73468 131.622 11.126 130.23 12.8422 130.23 cv
14.5585 130.23 15.9498 131.622 15.95 133.338 cv
15.9498 135.054 14.5585 136.446 12.8422 136.446 cv
11.126 136.446 9.73468 135.054 9.73452 133.338 cv
9.92876 133.338 li
10.123 133.338 li
10.1257 134.839 11.3407 136.054 12.8422 136.057 cv
14.3438 136.054 15.5587 134.839 15.5615 133.338 cv
15.5587 131.836 14.3438 130.621 12.8422 130.619 cv
11.3407 130.621 10.1257 131.836 10.123 133.338 cv
9.92876 133.338 li
1 .816159 .15967 .0319219 cmyk
f
34.9846 43.7975 mo
34.9846 42.1886 36.2891 40.884 37.8981 40.884 cv
39.5069 40.884 40.8115 42.1886 40.8115 43.7975 cv
40.8115 45.4064 39.5069 46.7109 37.8981 46.7109 cv
36.2891 46.7109 34.9846 45.4064 34.9846 43.7975 cv
.808743 .585351 0 0 cmyk
ef
34.9846 43.7975 mo
34.7903 43.7975 li
34.7905 42.0812 36.1817 40.6899 37.8981 40.6898 cv
39.6143 40.6899 41.0055 42.0812 41.0057 43.7975 cv
41.0055 45.5137 39.6143 46.905 37.8981 46.9052 cv
36.1818 46.905 34.7905 45.5137 34.7903 43.7975 cv
34.9846 43.7975 li
35.1787 43.7975 li
35.1815 45.299 36.3965 46.514 37.8981 46.5167 cv
39.3995 46.514 40.6145 45.299 40.6172 43.7975 cv
40.6145 42.2959 39.3995 41.081 37.8981 41.0782 cv
36.3965 41.081 35.1815 42.2959 35.1787 43.7975 cv
34.9846 43.7975 li
1 .816159 .15967 .0319219 cmyk
f
87.7668 43.7975 mo
87.7668 42.1886 89.0714 40.884 90.6803 40.884 cv
92.2892 40.884 93.5938 42.1886 93.5938 43.7975 cv
93.5938 45.4064 92.2892 46.7109 90.6803 46.7109 cv
89.0714 46.7109 87.7668 45.4064 87.7668 43.7975 cv
.808743 .585351 0 0 cmyk
ef
87.7668 43.7975 mo
87.5726 43.7975 li
87.5728 42.0812 88.964 40.6899 90.6803 40.6898 cv
92.3966 40.6899 93.7878 42.0812 93.7879 43.7975 cv
93.7878 45.5137 92.3966 46.905 90.6803 46.9052 cv
88.964 46.905 87.5728 45.5137 87.5726 43.7975 cv
87.7668 43.7975 li
87.9611 43.7975 li
87.9638 45.299 89.1788 46.514 90.6803 46.5167 cv
92.1818 46.514 93.3968 45.299 93.3995 43.7975 cv
93.3968 42.2959 92.1818 41.081 90.6803 41.0782 cv
89.1788 41.081 87.9638 42.2959 87.9611 43.7975 cv
87.7668 43.7975 li
1 .816159 .15967 .0319219 cmyk
f
10.5115 80.8471 mo
10.5115 79.2381 11.816 77.9336 13.425 77.9336 cv
15.0338 77.9336 16.3384 79.2381 16.3384 80.8471 cv
16.3384 82.4559 15.0338 83.7604 13.425 83.7604 cv
11.816 83.7604 10.5115 82.4559 10.5115 80.8471 cv
.808743 .585351 0 0 cmyk
ef
10.5115 80.847 mo
10.3172 80.847 li
10.3173 79.1308 11.7086 77.7395 13.425 77.7393 cv
15.1412 77.7395 16.5324 79.1308 16.5326 80.847 cv
16.5324 82.5633 15.1412 83.9546 13.425 83.9547 cv
11.7086 83.9546 10.3173 82.5633 10.3172 80.847 cv
10.5115 80.847 li
10.7057 80.847 li
10.7084 82.3485 11.9234 83.5635 13.425 83.5663 cv
14.9264 83.5635 16.1414 82.3485 16.1441 80.847 cv
16.1414 79.3455 14.9264 78.1305 13.425 78.1278 cv
11.9234 78.1305 10.7084 79.3455 10.7057 80.847 cv
10.5115 80.847 li
1 .816159 .15967 .0319219 cmyk
f
.750271 .679713 .654902 .901945 cmyk
%ADOBeginSubsetFont: PBAAAA+Calibri Initial
ct_T42Dict begin
-0.5 -0.305 1.238 0.961
 256 array 0 1 255 {1 index exch /.notdef put} for  /PBAAAA+Calibri
Type42DictBegin
[<00010000000c000c000c000c4f532f32f9e5b7d7000000cc000000606376
7420b09bc4d20000012c0000051c6670676df6f64d0c000006480000091a
676c7966bb6e81290000b18c0000175868656164e625fe3e00000f640000
0036686865610dad124400000f9c00000024686d74780b0cadc000000fc0
00003c4a6c6f63610123b65000004c0c00003c8c6d617870214303970000
8898000000206e616d65cf334127000088b8000004c1707265706baf02fe
00008d7c00002410676469720000000000000000000000000003042b0190
00050008059905330000011e05990533000003d0008602000800020f0502
020204030204e10002ff4000acff00000009000000004d53202000400000
feff0600fe0001c4079e02262000019f0000000003b7050e000000200003
0000079e0000fe930000000000000000000000000050006a007300800080
0086008d009300bf00db006200830093009900a000a600a900b000c100c9
00d700000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000fe79056d000c03b700060013
0000fffaffedfea6ffedfeb8050e000600130000fffaffedfe93050e0013
0420000600130000fffaffedff10ffee050e00130420000600130000fffa
ffeefe93ff10feb80612000a050e0006000d02d2fffafff301fdfffa023f
0006000dff36fffafff302870006000f0000fffafff1079efeaffea70000
0000000000000000000000500051005a005b005c005d0060006100620064
00680069006a006b006c006d006e00680069006e00600067006e00660068
005f00610063006400660068006a006b006c006d006e006f0070006f0072
0074007500760076007000720073007400750076006f0070007100720073
00750077007700780079007a007b007c007d007b007c007d00770079007a
007c0078007a007c007d0078007d007e007f008000810082007e007f0081
0082007e007f008000810082008300840085008600870088008900830084
008500860087008800890083008400850086008700880089008900860087
00880089008a008b008c008d008e008f008a008b008c008d008e008f008a
008b008c008d008e008f008d008a008b008c008d008e008f009000900091
0092009300940095009600980099009b009c009000910092009300940095
0096009700980099009a009e009f00a60090009100950098009f00900091
0096009700bc00c600b500ae00af00b6006800690063006a006f00700071
006f0070007100720066006c006d00700079007c007f0083008600870088
0089008a0074007500760077007a007b007c007d007e008200850086008a
0088008900830078007b00820083008600870088008900760079007a007c
007d007e0083008500880089008a0073007400750077007a007d00880089
008a008b008c008d008e00900094008b008c008d00910092009300940095
008c008d00910095008f009000910092009300940095008b008c008d008e
008f009000910092009300940095008b008c008d008e008f009000910092
00930096009700980099009c0096009700980099009a009b009c00960099
009a009c0096009700980099009a009b009c009700980099009a009b009c
009700980099009a009b009c0096009d00a000a1009d009e009f00a000a1
00a2009d009f00a000a1009f00a2009d009e009f00a000a100a2009d009e
00a000a1009d009e00a000a2009d00a300a400a500a600a700a300a400a6
00a700a300a400a500a600a700a600a300a700a800a900aa00ab00ac00ac
00a800a900aa00ab00ac00a800a900aa00ab00ac00a800aa00ab00ac00ae
00ad00ae00af00b000b100b200b300b400b500b600b700b800ad00ae00ad
00ae00af00b000b100b200b300b400b500b600b700b800ad00ae00af00b0
00b100b200b300b400b500b600b700b800b300ae00af00b000b200b500b6
00b700b800b900ba00bb00bc00be00c000c100c200c200b900ba00bb00bc
00bd00be00bf00c000c100c200c400ba00bb00be00bf00c000c200c300c4
00b900ba00bf00c000c200c600c700c900ca00cb00cc00cf00c500c700ce
00c500c700c800cf00d000d200d300d7010d00d000d100e900d000fd00d0
05e4000e0041000005ba009c009c005e005e4047645f5e5d5c5b5a595855
54535251504f4e4d4c4b4a494847464544434241403f3e3d3c3b3a393837
36352f2e2d2c2826252423221f181411100f0d0b0a090807060504030201
002c4523466020b02660b004262348482d2c452346236120b02661b00426
2348482d2c45234660b0206120b04660b004262348482d2c4523462361b0
206020b02661b02061b004262348482d2c45234660b0406120b06660b004
262348482d2c4523462361b0406020b02661b04061b004262348482d2c01
10203c003c2d2c20452320b0cd442320b8015a51582320b08d44235920b0
ed51582320b04d44235920b0042651582320b00d44235921212d2c202045
18684420b001602045b04676688a4560442d2c01b10b0a432343650a2d2c
00b10a0b4323430b2d2c00b0282370b101283e01b0282370b10228453ab1
0200080d2d2c2045b00325456164b050515845441b2121592d2c2045b000
4360442d2c01b00643b00743650a2d2c2069b04061b0008b20b12cc08a8c
b8100062602b0c642364615c58b00361592d2c8a03458a8a87b0112bb029
2344b0297ae4182d2c4565b02c234445b02b23442d2c4b525845441b2121
592d2c01b005251023208af500b0016023edec2d2c01b005251023208af5
00b0016123edec2d2c01b0062510f500edec2d2c20b001600110203c003c
2d2c20b001610110203c003c2d2c00b00743b006430b2d2c21210c642364
8bb84000622d2c21b08051580c6423648bb82000621bb200402f2b59b002
602d2c21b0c051580c6423648bb81555621bb200802f2b59b002602d2c0c
6423648bb84000626023212d2c4523456023456023456023766818b08062
202d2cb00426b00426b00425b0042545234520b003266062636820b00326
61658a2344442d2c2045b0005458b040442045b04061441b2121592d2c45
b1302f4523456160b0016069442d2c4b5158b02f2370b01423421b212159
2d2c4b515820b0032545695358441b2121591b2121592d2c45b01443b000
6063b0016069442d2cb02f45442d2c452320458a60442d2c45234560442d
2c4b235158b90033ffe0b134201bb3330034005944442d2cb0164358b003
26458a586466b01f601b64b020606620581b21b04059b001615923586559
b02923442310b029e01b2121212121592d2cb0164358b004254564b02060
6620581b21b04059b0016123586559b0292344b00425b00725082058021b
0359b0052510b004252046b0042523423cb0072510b006252046b00425b0
016023423c2058011b0059b0052510b00425b029e0b0072510b00625b029
e0b00425b00725082058021b0359b00425b003254348b00625b00325b001
6043481b2159212121212121212d2cb0164358b004254564b02060662058
1b21b04059b0016123581b6559b0292344b00525b00825082058021b0359
b0042510b005252046b0042523423cb00425b0072508b0072510b0062520
46b00425b0016023423c2058011b0059b0042510b00525b029e0b0292045
6544b0072510b00625b029e0b00525b00825082058021b0359b00525b003
254348b00425b0072508b00625b00325b0016043481b2159212121212121
212d2c02b00425202046b004252342b0052508b003254548212121212d2c
02b0032520b0042508b0022543482121212d2c452320451820b000502058
23652359236820b040505821b04059235865598a60442d2c4b53234b515a
5820458a60441b2121592d2c4b545820458a60441b2121592d2c4b53234b
515a58381b2121592d2cb000214b5458381b2121592d2cb002435458b046
2b1b21212121592d2cb002435458b0472b1b212121592d2cb002435458b0
482b1b21212121592d2cb002435458b0492b1b212121592d2c208a08234b
538a4b515a5823381b2121592d2c0020b200400325b0062649618b381234
2d2c014623466023466123201020468a61b8ff80628ab140408a70456068
3a2d2c208a2349648a2353583c1b21592d2c4b52587d1b7a592d2cb01200
4b014b54422d2cb1020042b123018851b1400188535a58b9100000208854
58b202010243604259b12401885158b920000040885458b2020202436042
b12401885458b2022002436042004b014b5258b2020802436042591bb940
000080885458b202040243604259b94000008063b80100885458b2020802
43604259b94000010063b80200885458b202100243604259b94000020063
b80400885458b202400243604259595959592d2c451868234b5158232045
2064b04050587c59688a6059442d2cb00016b00225b0022501b001233e00
b002233eb10102060cb00a236542b00b234201b001233f00b002233fb101
02060cb006236542b0072342b00116012d2c20b82000628a6023622d2cb0
072558001b0159b0042510b00325b0022520b8ffff545821cd1bed5921b0
06255cb006255a58b0092b5920b005254ab0042547b004254760b0062547
b0806361b00225b0005558b00325b00725496359b0082558001b0159b004
25b0062549b009255cb009255a58b0092b59b0072546b0806361b0032520
b0005558631b2159612320b0005558b080631b21b08059b0592bb006255c
586959b00425202010b00048233ab0062658001b0159b0052658b003252f
598a12233221212d2cb00625b00a2587b00625b009254ab0005358b00625
b00a251bb00925b0072559b00225b00225070cb005256323b00625636020
b94000040063535821b00426b00426b00a1bb94000040063655158b00426
65b0042665b00a1bb00426b00426b000b00325b003250b0d0ab0092eb007
25b007250b0d0ab00b2eb00525b0052507595920b0005558b00525b00525
87b00725b007250bb0092510b00b25b0092620b8ffff545821cd1bed59b0
0525b0052507b00825b00b254923b00625b0062587b00a2510b00b25c159
20b00051b800522378b00161b00225b00725b0072507b00a25b00d254961
b08062b00525b005250bb00a252338b00625b0062587b00825b008250bb0
0a2510b00b25c4b00625b0062507b00925b00c2549b0032554b8ffa72379
2121212121212121212121212d2c23b0005458b9400000001bb900004000
598ab0005458b9400000001bb90000400059b05b2b2d2c08b0005458b940
0000001bb900004000590db05b2b2d2c8a8a080d8ab0005458b940000000
1bb90000400059b05b2b2d2cb00426b00426080db00426b00426080db05b
2b2d2c204569442d00000001000000059eb828685d5a5f0f3cf500190800
00000000bbeb7ccc00000000c522987afbfafd8b09ec07b6000000090002
000100000000000100000600fe0001c40aa0fbfafaa009ec000100000000
000000000000000000000f03040e0000000000000000000001cf000004a1
002304a1002304a1002304a1002304a1002304a1002304a1002304a10023
04a1002304a1002304a10023061bffcc061bffcc045a00ac044400610444
00610444006104440061044400610444006104ec00ac04ec009704ff001b
04ff001b03e800ac03e8004503e800ac03e8004603e8004603e8006303e8
005f03e8008103e800ac03e800ac03ad00ac050c005b050c005b050c005b
050c005b050c005b04fc00ac04fc00ac05400020020400ac0204ff4a0204
00280204ff390204ff310204ff500204ff4f0204ff7b0204001e02040027
049200ac028d0007028dffa9042800ac042800ac035d00ac035d00810362
00ac035d00ac0370001c045e00ac06d700ac052a00ac052a00ac052a00ac
052a00ac052a00ac050700ac054c0063054c0063054c0063054c0063054c
0063054c0063054c0063054c0063054c0063054f0063054f006306ef0063
042200ac042200ac05620063045800ac045800ac04580053045800ac03ad
004703ad004703ad001503ad001803ad004703ad004703e6000f03e6000f
03e6000f03e6000f052200aa052200aa052200aa052200aa052200aa0522
00aa052200aa052200aa052200aa052200aa052200aa048a0022071e003d
071e003d071e003d071e003d071e003d0427003003e6001e03e6001e03e6
001e03e6001e03e6001e03bf003b03bf003b03bf001a03bf003b03f40010
03f4001003f4001003f4001003f4001003f4001003f4001003f4001003f4
001003f4001003f40010055cffe2055cffe2040400a103cb006d03cb006d
03cb006d03cb006d03cb006d03cb006d046500a10465006a047700320477
0032038000a103800030038000a103800020038000200380002c03800029
03800042038000a1038000a1035000a10482006c0482006c0482006c0482
006c0482006c047800a10478008c049d004001ec00a101ecff5801ec0019
01ecff4801ecff2701ecff5501ecff5201ecff7101ec001101ec0018041b
00a1023e0000023eff8c03c900a103c900a102e000a102e0008702e600a1
02e000a102f0003203d500a1060600a1049100a1049100a1049100990491
0078049100a1046600a104aa006604aa006604aa006604aa006604aa0066
04aa006604aa006604aa006604aa006604ba006604ba00660606006603c5
00a103c500a104b1006603ed00a103ed00a103ed004503ed00a1034f0049
034f0049034ffff5034ffff6034f0049034f00490359001c0359fffe0359
001c0359001c048d009f048d009c048d009f048d0097048d0075048d009f
048d009f048d009f048d009f048d009f048d009f03fd0021063e0037063e
0037063e0037063e0037063e003703cc0036038300100383001003830010
03830010038300100369004403690044036900080369004403d5005c03d5
005c03d5005c03d5005c03d5001e03d5005c03d5005c03d5005c03d5005c
03d5005c03d5005c062f005c062f005c043400990362005a0362005a0362
004e036200570362005a0362005a076f005a06dd005a0601005a0601005a
04340060048c0060046a00600434006103fb005d03fb005d03fb005d03fb
005d03fb005d03fb005d03fb005d03fb005d03fb005d03fb005d02710025
069a002508d5002504ab0025069b002508d50025043c0025043c0025043c
0025043c0025044f0025044f0025044f0025044f0025043c0025043c0025
067600250676002506760025067600250689002506890025068900250689
00250676002506760025043c0025043c0025067600250609002508430025
043c0025043c002504830025043c00250676002504ed002504ed00250513
00250728002503c4003503c4003503c4003503c4003503c4003504340060
04340060043400600434006004340060043400990434ffad0443fff901d6
008501d6ff6e01d6000f01d6ff5a01d6ff2001d6ff7201d6ff5801d6ff67
01d6001101d6009903c00085041e008801eaffd501eaffd501eaff6303a3
009903a3009903a3009901d6009901d6002a021c009901d6004b01fb001c
02fd0099066400990434009904340099043400990434004e0434009904a2
ff9d043400990438005a0438005a0438005a0438005a0438004f0438005a
0438005a0438005a0438005a043c005a043c005a06cc005a043400990434
00990434006002ca009902ca009902cafff902ca006e0321005103210051
0321fffe0321fffd032100510321005105ae005105ae00510438009901f1
009902ae002102c4002102ae002102bc002604e600210475002104750021
047500210475002104750021047500210475002104750021047500210475
002105130021074b002106d9002106d9002106d9002106d9002106d90021
06d9002106d9002106d9002106d9002106d90021043400940434008e0434
0094043400860434004d0434008904340086043400940434009404340094
04340094039d002205b8003505b8003505b8003505b8003505b800350377
0029039f0022039f0022039f0022039f0022039f00220329005903290059
032900070329005903380072036100640378005d02ac004402e5006c024e
004402e5004802b8004701c100240297002a02e9006c01630061016dffd8
0297006c015e006c0456006c02e6006c02e6004502e5006c02e5004801f6
006c0230004201e3002302e9006c0285001f03ef002c027e00280286001f
023700420254000002750000029400000000fd080000fce8025600000275
0000029400000000fd080000fce803290000035f0000039400000000fc9f
0000fc6703290000035f0000039400000000fc9d0000fc6901ff0000039a
000003a2000003a800000000fc650000fc600324000002f5000003460000
036700000000fca00000fc7e0327000003490000036a00000000fc9d0000
fc7d030c0000030f0000031100000000fcac0000fca90291000002980000
02a000000000fce90000fce202cf000002c2000002b5000003c1000003e1
0000040000000000fc520000fc3101ce000001d6000001ce000001ce0000
0000fd4d0000fd4d027500840000fd7a027f00840000fd7601f700840231
000004a1002304a1ff89045a00ac035300ac0484003a03e800ac03e8fec7
03bf003b04fc00ac04fcfe9e054c0063020400ac0204feb20204ff520428
00ac0495002406d700ac052a00ac03ef0053054c0063054cff1604fc00ac
042200ac03ab004603e6000f03e6001e03e6fe6e03e6001e061300000427
0030060000900550005e0550fef903f4001003f40010040400a102fb00a1
03c90023038000a1038000a103690044047800a1047800a104b4006601ec
00a101ec000001ecff5403c900a103e10011060600a1049100a10387005e
04aa006604aa0066047800a103c500a1035b004b0359001c038300100383
0010038300100552000003cc00360558008704b1006604b10066048a0061
048a00610440009904320064039200180430000003a5005903a5005902c8
004e044c0099044c00990441006004780006023200940232ffec0232ff7a
0232ff0f03a3009903b4000004660099039700220302004d0303004d0438
005a0438005a046c002804120076044100590349005c0319000304550090
045500900455007d0455001605360055053b00550369001205a900940592
006405920064028900000000fd0a03f400000000fc360205009702050097
020500970224004801ff006e01ff006e04a10023044d00ad045a00ac0370
00ac037000ac037600ac0527000303e800ac03e8004503e8006106680055
03ca004b052200ac052200ac052200ac020400ac0204ff50028d00070458
00ac045800ac04e3000306fa000306d700ac04fc00ac070300ac054c0063
054c006304f900ac042200ac0444006103ad004703e6000f0438000f0438
000f04b800220594000004270030051c00ac04f500ac0472007406f200ac
071e00ac04eb000f061800ac044000ac0462005d04610062070800ac0471
005304ff000f04f2000f0504000003f4001003ee00a2040400a1031400a1
031400a1032700a10480000e038000a1038000300380002c057800440380
0057048900a1048900960489009501ec00a101ecff55023e000003ca00a1
03ca00a104320001060600a1047800a104aa006604a90066046a00a103c5
00a103cb006d034f00490359001c039d001e039d001b042f0022050a0000
03cc0036048e00a1046900a103fa006d062300a1064500a1045f00170583
00a103e800a103e4006b03f00066063200a103ff005c045f001f0463001f
044d000006010001063200a103d5005c044300000430000003d5009902c4
009902c4009902d5009901d6ff58047700170434006003fb005d03fb005d
03fb005d0583003e0362004b04530099045300780453008801d6008501d6
ff7201eaffd503b6009903b6009904150016060200130569005f04470099
062800990438005a0431005a042a009904340086043400990362005a0321
00510319000a06640099039f0022039f001803d2002204fe005103770029
045500990433009903c0004205d4009905fe0099044a000a0554009903c2
0099038b004d038d005d05c6009903cb00380453fff90443fff904270018
036e0000036e0000036e00000000fca50000fca5029b010a029b00bf029b
00bf03b5008503b5005e03b5005e03de0064026000ed026000b10364007a
0361005f01ff002a02240048022400bb020500970586009601ff008c01ff
002a01ff008c01ff002a035900880359002b035900880359002b01ff002a
0359002b02b6007402b600c002b6007402b600c004190075041900ad0419
0075041900ad0317000102df001f03af018a03fc01ae0317000b02df002d
027300450273004503fcfff603fcfff6073e0095073e0095073e0095073e
009503fcfff903fc00c10205009702050097026d0085026d007a027400bf
0274005a0284005602840075024000840240007a024a00b0024a0067026d
0085026d007a027400bf0274005a028400560284007503fc009e03fc0077
03fc007803fc007604b0006b043d006e03fc006a03fc003d01c4008b0335
008b057500000556000007f7000007270000073c00000727000006ad00af
06ad00af040e008005a4003f05ac004d02b6000003fc003f04b30049040e
002a03fc0057040e00600434005803fc00b903fc004a040e005303fc006d
0419002b040e003403f30035039f006103be005f039f0058039f00250621
0049083300ac03fc002406e300a10411001d0494005f02cb002303ec0062
03ec00510455002203d700510436007e03b20035043600630436005c040e
0048040e00ae040e0072040e0067040e0020040e0065040e006b040e0063
040e0052040e005204430067028d00190381005c0373005903ac00260368
006103b7006e0349002f03b5004b03bc0052039f0050039f008d039f0065
039f0062039f003a039f0067039f0061039f005e039f0051039f00500494
005f02cb002303ec006203ec00510428002203d700510436007e03b20035
043600630436005c040e0048040e00ae040e0072040e0067040e0030040e
0065040e006b040e0063040e0052040e00520321004801f8002302b0004b
02ad004102db002502a6004502df005b0291003202e1004b02df004402ea
005102df005102d0005701bc006001bc00580321004801f8002302b0004b
02ad004102db002502a6004502df005b0291003202e1004b02df004402ea
005102df005102d0005701bc006001bc0058029d003801f500310252003c
0249002d024a001402460032025100300238002202570025024d0023029d
003801f500310252003c0249002d024a0014024600320251003002380022
02570025024d002302b1ff4b03130044055f004405690044051700440569
0044052e00440553004405c9004e05c9004e0567004705b7004705a20047
05cd0027057d004505a20045052a003505b80048084e0048057d005c07c9
005c03fc004603fc004c03fc006003fc002b03fc005e03fc006003fc0059
03fc004503fc006503fc004c03fc005503fc005603fc003d05e9002c0405
003506d300690443006102ed000703fc00080484003a0550005e04660099
066500660454005b0416004a073e009a073e0096073e00c9073e00c9070e
00af070e013a070e00af070e013a0a4e009a0638009f04660028018a0000
01da00000466000004660000046600000466000004660000046600000466
000004660000046600000466000004660000046600000466000004660000
0466000004660000046601d004a1002304a1002304a1002304a1001904a1
001504a1001d04a1002304a1001c04a1001c04a1001c04a1001d04a10023
03e800ac03e800ac03e8003703e8ffe803e8ffe903e8ffe803e8ffe803e8
003702040015020400a0054c0063054c0063054c0063054c0063054c0063
054c0063054c006305940063059400630594006305940063059400630594
0063052200aa052200aa05c600aa05c600aa05c600aa05c600aa05c600aa
05c600aa03e6001e03e6001e03e6001e03d5005c03d5005c03d5ffbb03d5
ffb103d5ffb803d5ffb803d5005703d5ffb803d5ffb803d5ffb803d5ffb8
03d5005c03fb005d03fb005d03fb003003fbffdb03fbffdb03fbffd903fb
ffcb03fb005d01d6002601d600850438005a0438005a0438ffe80438ffea
0438ffe80438ffea0438005a04a0005a04a0005a04a0005a04a0005a04a0
004904a0005a043400940434009404d2009404d2009404d2008c04d20094
04d2004604d20094039f0022039f0002039f0022046a00530466003803f4
001003f4001003f4ffbd03f4ffc003f4ffbd03f4ffc803f4001003f4ffc8
03f4ffc803f4ffc803f4ffc803f40010038000a1038000a10380fff00380
ffa70380ffa00380ffa20380ff8e0380001101ec000901ec009404aa0066
04aa006604aa002104aa002204aa002104aa002204aa006604ec006604ec
006604ec006604ec006604ec006604ec0066048d009f048d009f0515009f
0515009f0515009a0515009f051500750515009f038300100383fff10383
001001da0000046600000466000004660000046600000466000004660000
046600000466000004c10066052400ac052400ac050600ac049300a10493
00a1047c00a103e6000f02ae00210359001c01d60011043c0025043c0025
043c002506760025067600250676002502f5001c02e7008e0306005a034b
008e02a8008e028c008e0344005a035b008e01a6008e01cb000502e0008e
025b008e046d008e0375008d0375005a02d8008e0375005a029b00570280
0046025700040314005702e3001a0445002202b5001c028b001c02b80050
0000fdfd0000fdfd0466ffff0466ffff0466ffff0466ffff03c1ffff03c1
0000030cffff030c0000030cffff030c0002023100000231000001ffffff
01ffffff01ffffff01ffffff0000fd090000fd0902aa008202aa008202aa
009802aa009801ce008402aa008202aa008202aa008202aa0082027f008e
027f008e0324000002910084046601fd02aa001402aa0013032900000329
0000032900000329ffff039a00000327000003fcfff903fcfff9039a0000
039a00000000ff080000fe4c0000fdfb0000fdfb0000fe3f0000fe3f0000
fdc20000fdc201ce008402aa00140291008302aa001502aa009302aa0093
039a014c039a00000000fdfd0000fdfd0000fd090000fce90000fd090000
feb702aa001402aa001403fcfff90466ffff02aa0098039a0000039a0000
039a0000039a0000039a0000039a000004010014040101470000000002aa
ffff02aaffff01ceffff01ceffff030c0000030c000002aa009302aa00c8
02aa00c803f100c801ceffff01ceffff01ce000001ce000002aa00a003b1
008402aaffff02aaffff075c003c075cffff075cffff075cffff075cffff
075c003f06d0ffff06d0ffff075c0003075c0003075c004001df003001df
003001e7003201e7003200f8004400f8004402070030020700300209004c
0209004c019d0030019d003002070032020700320209004c0209004c0309
004c0309004c015f004c015f004c015200180152001801c3001601c30016
01bf001c01bf001c032700510327005103270051032700510000ffab03bd
ffff041a0000041a00000416000104160001041a0001041a0001041a0001
041a000104010002040100020401000204010002015f004c02aa00c801ce
00c803f100c804ec000f044d00ad0440001e0462005d049d006104ff001b
057e000f044d004c03e8006c0525006403ca005a03adffd6050e005b048a
001c025000ac0226001b042800ac070900aa052affd6054c0063062f0061
04e4000f045800ac03ad004703ab0046043f000f03e6000f0550005e0522
00aa0442001e03bf003b03ca004b03ca005a040e006808ab00ac081500ac
060300ac054700ac07b700ac071400ac04a100230204ff3a054c00630522
00aa052200aa052200aa052200aa052200aa04a1002304a10023061bffcc
050c005b050c005b04280073054c0063054c006303ca0008089500ac0815
00ac050c005b072800ac04d400ac052a00ac04a1ffef04a1002303e8ffe1
03e8006e0204feac0204ff4c054c003b054c00630458ffbf0458006e0522
002f052200aa03ca004b04fc00ac052400ac040e004d03ef003b04a10023
03e800ac054c0063054c0063054c0063054c006303e6001e04a1ffd90444
ffe7035d001b03e6ffb803940064046b001b0545001b0495002403e8ff9e
02a10007050a00630469001a04a0001b04a10023045a00ac045a00ac045a
00990444006104ec00ac04ec00ac04ec00ac04ec00ac04ec00ac03e80084
03e8008403e8008203e8003403e8008103ad00ac050c005b04fc00ac04fc
00ac04fc00ac04fc002804fc00ac0204ff360204ff71042800ac042800ac
042800a0035d00ac035d0035035d0060035d006606d700ac06d700ac06d7
00ac052a00ac052a00ac052a00ac052a00ac054c0063054c0063054c0063
054c0063042200ac042200ac045800ac045800ac04580077045800ac03ad
004703ad004703ad004703ad004703ad004703e6000f03e6000f03e6000f
03e6000f052200aa052200aa052200aa052200aa052200aa048a0022048a
0022071e003d071e003d042700300427003003e6001e03bf001503bf003b
03bf003b035d001b03c2ff9b0433001b045800ac052400ac047100ac03e2
003b0444003803ad005903b500ac046a0027043400990434000403b3005a
043400600430005d0271ffee064300990434009903a300990241002703b4
0014044c0099053e0059043400990321005102e0002102ae002103fc001b
0329005903ca004b0366003a03680050075d006003c00099061e009903d5
005601d6ff570438005a0434007a04340088043400880434008804340088
03fb006203d5005803d50058062f005c044cffe203c4003503a3003a0438
005a0438005a03ca002e01eaff60075d006003c400350434009903d5ffbf
03d5005c03fbffe203fb005d01d6fece01d6ff650438ffed0438005a02ca
ff7302ca00100434ffff0434008703ca004b0434005104cd0060040e0052
034c005903d5005c03fb005d0438005a0438004f0438005a0438005a039f
00220289009804eb009902ae002106930060069200600362fff003210051
032900590394006403fb003c0240fff70240fff70434006002ff002703e2
002203720049040e00720321005101f300ad032900ad049700ac029b010a
03d5005c0434009904340099043400860362005a04340060043400600434
0060043400600434006003fb005d03fb005d03fb005d03fb003f03fb005d
0271002503c40035043400990434009904340067043400130434009401d6
ff1f01d6ff1f01d6ff5a03a3009903a3009903a3006b01d6008901d6ff58
01d6ff5801d6ff5906640099066400990664009904340099043400990434
0086043400860438004f0438004f0438005a0438005a0434009904340099
02ca009902ca008a02ca000a02caffff0321005103210051032100510321
00030321005102ae002102ae002102aeffd202aeffd20434008904340041
0434007b0434004d04340086039d0001039d002205b8003505b800350377
002903770029039f00220329000103290059032900000434008602aeffc6
05b80035039f002203d5005c01f100530241002703d5002902aeff960463
009903db00990344005903c200360362003b02ee003c03190099053b0055
0471000803ee00a203ee001403cb004803fc006d0477003204d3000803ee
00530380007204a40066038a00680350ffe80482006c03f300130232008e
01ecfffe03c900a1063200910491ffe804aa00660592006e0433000803ed
00a1034f0053035b004b038300080359001c04b10066048d009f03b70010
03690044039000570393006b0398005507ce00a1085500ac055a00a105cd
00ac06cf00a1076800ac03f4001001ecff4704aa0066048d0096048d009f
048d009f048d009f048d009f03f4001003f40010055cffe20482006c0482
006c03c9005204aa006604aa00660390000007ce00a1085500ac0482006c
065500a1046200a0049100a103f4ffc503f400100380ffb10380004d01ec
fed001ecff7004aa001d04aa006603edffa403ed0064048d0000048d009f
039000570478008c049300a103c50057038c004403f40010038000a104aa
006604aa006604aa006604aa00660383001003f4001003cb002402e00027
0359ffeb0339005004040027048d002703fd00210380ffff023e0000048b
006603ed00270383000c039000550339005001f300ac032900ac049700ac
026000ed03f40010040400a1040400a10404006e03cb006d046500a10465
00a104650081046500a1046500950380002a038000260380004103800000
0380004a035000a10482006c047800a1047800a10478009a047800200478
00a101ecff2a01ecff5503c900a103c900a103c9007e02e000a102e00000
02e0002802e00024060600a1060600a1060600a1049100a1049100a10491
00a1049100a104aa006604aa006604aa006604aa006603c500a103c500a1
03ed00a103ed00a103ed003e03ed0091034f0049034f0049034f0049034f
0000034f00490359001c0359001c0359001803590019048d009f048d0079
048d009f048d0075048d009f03fd002103fd0021063e0037063e003703cc
003603cc003603830010036900050369004403690020047800a10359000a
063e00370383001003f4001002e00027035effa703c5002703ed00a104b6
00a103ef00a10369004403cb004803500060039900a1043c0025043c0025
0447002504470025043c0025043c0025044f0025043c0025043c00250676
002506760025068200250682002506760025067600250689002506760025
067600250475002104750021047500210475002104750021047500210475
0021047500210475002106d9002106d9002106d9002106d9002106d90021
06d9002106d9002106d9002106d9002103d5009604340060043400990434
00990362003b039b005a043400600434006003fb006203fb0062051b0065
0362005a0362004b0435004b043b005d0241fff704340060043400600451
005a039d001f03d0001e0433009404340099043400990241002701d6fff3
0232009401d6009902e7ffa702f9002701d6009904860099066300940663
0094066400990434ffc204340099045300990438005a05b3005a05920064
0536005502ca002302ca002302ca002302ca009902ca0099028e0094028e
002303980085039800850321005101eaffd50242fff801eaffd5028affc4
02ae004102ae002104a400270476004904550090039d002205b80035039f
00220351001f0329005903d3005903bc004b03bb0056039400640394005e
039400640362005a0507005f03d50099043b005a046b005a04470099028a
ffc403a300270319009904340060039400640394005e066f006006d40060
0719006004f3002103c40021057a0021060c002504ae00990469009903ef
002c03ef00700434ffd5044dffd503d60010050fffe3062f006204120027
03cb006a0444009904590030033f0099036f005501d60085022700000391
009802f000300569005f045300990474005a03cb006304a9006604a80066
0528001406cc00560368003a0438005a0438005a03a8009903cf005203cf
0052033f001b046a009a0465004b05c7004b0664014c03de0020060e0035
034f0042032f00380321005103d0001e02f2009903de00200450009903a8
0099052f0083040e000102f5001c03f1000002e7008e02fb0027034b008e
02a8008e02a800500344005a035b008e01a6008e01cb000502e0008e025b
008e046d008e0375008d0375008d0375005a02b2004802d8008e029b0057
02570004031400570445002202ac004402ac006c02e50048042b004402e5
006c02e5004802b8004702b8004702770046027700460297002a01630061
0297006c0456006c02e6006c02e60045024e003602e6004502e6004502e5
006c01e3002302e9006c02db00460456006c0285001f024a000d02be006c
024600230283002803650055025f00180163006101f6006c02e9006c0285
001f02be006c0246002302e5006c03650050025f00180694009404bbffa7
04bd0060030affa7069cffe504b4002204beffa70352ffa7031affa7039d
0014030fffa70329ffc203c4003b0304006e03c400350688002102410027
026900270468002704db002704c40027043400990451006002710025054c
0060041e009901f0006b067f0099045100990434009902ca006a037b0051
02faffd5039d002203ed0029033c0059047c005c04d800600434006003fb
005d0362005a0362004b03fb006201d600850362003b0233001e04d80094
0376004b02e5006b024e0044026e004402b200440277004201c1002401c1
00070297002a02e9006c0192000001aa006c0163006d0192000001e50000
0194006c017b00530224006e0456006c0456006c031b0000031c006c0304
006e02e600450336004502300042016dffd801e4002302e9000002b8002c
02e6006e02e6006e0285001f023700420294004202a600420272003c02e6
004502e9006c02e9006c016dffd801f6006c01f6002502030025028b006c
03ef002c0286001f01c400540334005401ff008c01ff002a01ff008c01ce
008401ce0084029900650299006c03fc004503fc0065044b0044044b0044
025100f20256000002540000025100f20327000002540000025600000239
00980239009801ce008401ce008402aa008202aa008202aa008202aa0082
02aa004b02aa009302610024015e006c02300042027e00280299006c0310
009603100096031000960310009603100096045700960457009604570096
045700960310004304570043045700430457004304570043045700430457
00430457002f0457002f0457002f0457002f0457002f0310002f04570025
045700250457002504570025045700250310001a0457001a0457001a0457
001a0457001a0457001a0310004204570042045700420457004204570042
045700420457009604570096045700960457009603100042045700420457
0042045700420457004204570042045700420457002f0457002f0457002f
0457002f0457002f0310002f0457002f0457002f0457002f0457002f0457
002f03100026045700260457002604570026045700260457002603100042
045700420457004204570042045700420457004204570096045700960457
009604570096031000420457004204570042045700420457004204570042
031000260457002604570026045700260457002604570026031000230457
0023045700230457002304570023045700230310002f0457002f0457002f
0457002f0457002f0457002f0310004b0457004b0457004b0457004b0457
004b0457004b045700960457009604570096045700960310004204570042
045700420457004204570042045700420310001a0457001a0457001a0457
001a0457001a0457001a0310002404570024045700240457002404570024
045700240310002f0457002f0457002f0457002f0457002f0457002f0310
004e0457004e0457004e0457004e0457004e0457004e0457009604570096
045700960457009602aa006202aa006203290000049a00000359002b02aa
008502aa008502aa00c802aa00c8029100840254000003c1ffff03c10000
039a0000022400bb02aa009802aa009802aa009802aa00980440fff60440
fff60302009803270000032700000324000002aa0000071200d4071200d4
02ac004402b8004702e60045027e002802b8004701d9ffff01d9ffff01d9
000001d90000028900000289000002890000028900000000fc660000fc66
032900000329000003290000032900000324000003240000032900000329
00000329000003290000032400000324000003f4000003f4000003f40000
03f40000032400000324000003270000030c000001ffffff01d900000327
000003290000032900000329000004660000046600000466000004660000
03f4000003f4000003f4000003f40000023200b6023200b6054c00630444
006104440043044400610444004303e6000e0456fec803e6000e03ad00ac
054c0063045d001e059700ac04a2000f04440061042200ac043200640375
005a037500420478000604d700510684001404120076041200030362005a
0362003b0362005a0362003b053b0055037800940438005a0399001404c5
009904a2000f0349005c01eaffd50476ffd504d7005104a9006603cb006d
03cb004803cb006d03cb00480389001a0389fe6f0389001a035000a104b1
005b03e2001e050000a1045d002a03db006d03c500a104a1ffc504a1fe8a
04a1fe6204a1ff2204a1ffc604a1fe8b04a1fe6204a1ff2204a1ff8004a1
ff5804a1002304a1002304a1002304a1ffc504a1fe8a04a1fe6204a1ff22
04a1ffc604a1fe8b04a1fe6204a1ff22066500230665ffc50665fe8a0665
fe620665ff220665ffc60665fe8b0665fe620665ff2203e8fef004bdfe82
04bdfe7a03e8fef004c1fe8604bdfe7a03e8fea403e8fe9504fcfef005d1
fe8205d1fe7a0559feaa04fcfef005d1fe8205d1fe7a0559feaa04fcfea4
04fcfe9504fc00ac04fcfef005d1fe8205d1fe7a0559feaa04fcfef005d1
fe8205d1fe7a0559feaa06c000ac06c0fef00795fe820795fe7a071dfeaa
06c0fef00795fe820795fe7a071dfeaa0204fef002d9fe8202d9fe7a0261
feaa0204fef002d9fe8202d9fe7a0261feaa0204fea40204fe950204ff4e
0204ff7a054cff0605f5fe82060cfe7b054cff0605f2fe7f0605fe74054c
fecf054cfeac0422fef003e6fe940517fe820513fe7e049ffeaa03e6fe47
03e6fe4703e6001e03e6001e0550ff0605f2fe7b060dfe780599feaa0550
ff0605f2fe7b0611fe7c0599feaa0550fecf0550feac0550005e0550ff06
05f2fe7b060dfe780599feaa0550ff0605f2fe7b0611fe7c0599feaa0714
005e0714ff0607b6fe7b07d1fe78075dfeaa0714ff0607b6fe7b07d5fe7c
075dfeaa048a0061048a0061048a0061048a0061048a0061048a0061048a
0061048a0061048a0061048a0061048a005a048a0061048a0061048a0061
048a0061048a0061048a0061048a0061048a0061048a0061048a0061048a
0061048a0061048a0061048a005a03a5005903a5005903a5004f03a50059
03a5005203a5005203a5005903a50059044c0099044c0092044c008f044c
0094044c0099044c0092044c0092044c0094044c0099044c0099044c0059
044c0099044c0099044c0092044c008f044c0094044c0099044c0092044c
0092044c0094044c0099044c0099044c0059023200010232ff860232ff83
0232ff62023200000232ff860232ff860232ff600232ff100232fecf0232
ff600232ffef0232ff7b0232ff290232ff690232ff680438005a0438005a
0438005a0438005a0438005a0438005a0438005a0438005a041200760412
007604550090045500820455008204550084045500900455008204550082
045500840455001204550010045500800455009004550090045500410455
00710455007d059200640592006405920064059200640592006405920064
059200640592006405920064059200640592006405920064059200640592
006405920064059200640592006405920064059200640592006405920064
059200640592006403f4001003f4001003f4001003f4001003f4001003f4
001003f4001003f4001003f4001003f4001003f4001003f4001003f40010
03f4001003f4001003f4001003f4001003f4001003f4001003f4001003f4
001003f4001005b9001005b9001005b9001005b9001005b9001005b90010
05b9001005b9001005b90010038000a10380004903800049038000a10380
004903800049038000a10380007b047800a1047800a1047800a1047800a1
047800a1047800a1047800a1047800a1047800a1047800a10478006f0478
00a1047800a1047800a1047800a1047800a1047800a1047800a1047800a1
047800a1063c00a1063c00a1063c00a1063c00a1063c00a1063c00a1063c
00a1063c00a1063c00a101ec000901ecff6201ecff6201ecff6501ec0009
01ecff6201ecff6201ecff6501ecff1001ecfee901ecff6401ec000001ec
ff8c01ecff2a01ecff5301ecff7004aa006604aa006604aa006604aa0066
04aa006604aa006604aa006604aa006603c500a103c500a1038300100389
001a038300100389001a038300100389001a038300100389001a03830010
0389001a038300100389001a038300100389001a038300100389001a0383
00100389001a038300100389001a0383fff50389fff5038300100389001a
038300100389001a04b1006604b1006604b1006604b1006604b1006604b1
006604b1006604b1006604b1006604b1006604b1006604b1006604b10066
04b1006604b1006604b1006604b1006604b1006604b1006604b100660675
006606750066067500660675006606750066067500660675006606750066
0675006604a1002304a1ffc504a1fe8a04a1fe6204a1ff2204a1ffc604a1
fe8b04a1fe6204a1ff2204fc00ac04fcfef005d1fe8205d1fe7a0559feaa
04fcfef005d1fe8205d1fe7a0559feaa0550005e0550ff0605f2fe7b060d
fe780599feaa0550ff0605f2fe7b0611fe7c0599feaa066500230665ffc5
0665fe8a0665fe620665ff220665ffc60665fe8b0665fe620665ff2206c0
00ac06c0fef00795fe820795fe7a06c0fe4d06c0fef00795fe820795fe7a
06c0fe4d0714005e0714ff0607b6fe7b07d1fe780714fe610714ff0607b6
fe7b07d5fe7c0714fe6101d9ffff01d900000289000002890000039a0000
03290000032900000324000003290000032900000324000003f4000003f4
00000324000001d9000003270000030c0000023200b601c4007901c40079
01c40079054e00ac0440000a042200ac0366001b044100ac06b2005503ca
004b04a500ac045800ac046a001b050c000f052400ac05b100ac073800ac
051900610444006103e6000f03e6001e03e6001e0476003005d2000f049a
007404720074047200ad05f6002805f60028020400ac06680055045f00ac
050e000304fc00ac04fc00ac04720074070700ac04a1002304a10023061b
ffcc03e8005905250064052500640668005503ca001503ca004b052200ac
052200ac054c0063054c0063054c00630462004c0438000f0438000f0438
000f04720071035300ac061800ac0366001b048500300427003004400035
065d0037061d003d041a003d070f0003072800ac0515005b0521000f03ca
005a05090003045f009903df00270434009902f90027039f009905c0003e
0362004b03f4009903b6009903eb00270447000a0471009904d8009905f1
0099045c00590362005a0319000a039d0022039d002203b2002904c5000a
03ea004203c0004203c0009904c8001904c800190583003e03cf00990421
0016044700990454009903c0004205b6005f020400ac03d5002e03d50058
062f005c03fb005603fb006203fb00620583003e0362000803bc004b0453
0095045300970438005a0431005a0431005a038b0004039f0022039f0022
039f002203c0002902c400990554009902f9002703b10029037700290434
006006550060059b004b03ba004b061f001606500099044500500481000a
0362005a042b001604a800a103e8002703c500a10314002703ec00a105d0
004403800057041c00a103ca00a103ca002704530017049800a1050100a1
067700a104a2006503cb006d0359001c0383001003830010041300360545
001c041a006d03fa006d03fa00a1054f0020054f002001ec00a105780044
03ff00a1045a0001047800a104a100a103fa006d062f00a103f4001003f4
0010055cffe20380004204a2006504a20065057800440380000303900057
048900a0048900a004aa006604a9006604a9006603e4001e039d001e039d
001e039d001e03fa0044031400a1058300a1031400270417003603cc0036
03e8004a0588004a0559007203d8007205d20001061900a10488006c0444
001c03800068045c00010400000008000000040000000800000002af0000
02000000015500000450000001bc00000199000001000000000000000000
ffdc0000ff25040e0024040e00240329000003fcfff901ff008c03580088
01c400540334005404a400540476010a03fcfffb0273004404ee004f0444
00610444006103ad0027040e005306640099052a0020076000ac064800ac
071e002005f500ac0428001b03e6000f08a80032043afffe0482002104b2
005b0495002003ad0020044400610621004906210065057800e6059d00e6
03fc005e070100bc03fc0062045201d7045200be0400fff6040001bd0400
01bd0400fff6040001bd0400fff6070900aa045c005b047200ad04440071
04d0003a0562007403c9001006640094042f005f04180015035a0053040b
00300441006f03260010032700030327000303270003025400c0025400c0
025400c8025400c802aaff8c02aaff8c04e0005907f4000a07e200140798
0003076c0061064100ac050b002406a700ac05c80055073f00ac03ca0021
0600009004b8001c085c0063054c003b076c0061076c006104440061056a
0022053400990433001b05af00990480001b060b0099034e001605a90094
03d2ffc40745005a049c005a06420059056a00220362005a06b8006d05c3
00a10453001205c000a1050b0046066400a10380002205580087042e0022
07f10066050f006806b0006d06b8006d039c006d03c7009602aa00db040e
008d0000ffdc0000fe5101cf0000022400bb01c700000163006102b1ff4b
0aa000b404d5009202d5008302d5008304d500b202d500700aa000b40aa0
00b40aa000b40aa000b40aa000b40aa000b40aa000b40aa000b40aa000b4
0000fc48000000000000fd170000000000000000039a0000039a00000324
00000324000003240000039a000003240000032400000256000003290000
0329000003bdffff02aaff8c055001e5027f008403240000039a00000256
000000000027000000e1000000ed0000001b032400000324000003240000
032400000324000003240000032400000324000003240000032400000000
0000000000000000000000000000039a0000039a00000346000000000027
03c10000030f00000346000003460000039a0000034800000348000003a2
000003a2000002560000035f00000000009e00000067000000220000009e
0000009e0000009e0000009e0000009e0517fe820513fe7e049ffeaa03e6
fe4703e6fe4703e6000e03e6000e03f4001003f4001003f4001005b80010
05b8001005b80010047800a1047800a10478006f063c00a1063c00a1063c
006f0383ffc80383ffc80383001004b1006604b1006604b1006606750066
06750066067500660000fdbc0000fd1a0000fd770000fd4f0000fbfe0000
fbfa0000fc000000fbfa0000fc000000fbfa0000fc000000fbfa0000fc00
0000fc000000fc000000fc000000fc000000fc000000fc000000fc000000
fdd00000fc300000fc300000fbff0000fbff0000fbff0000fbff0000fbff
0000fc000000fcac0000fcad0000fcac0000fcac0000fd1b0000fd1b0000
fd340000fd340000fd340000fd340000fd600000fd600000fd730000fd73
0000fdcf0000fd5f0000fd5f0000fd5f0000fd5f0000fd7f0000fd7f0000
fca10000fd6f0000fdfd0000fcef0000fcf20000fca00000fca00000fcae
0000fcad0000fc660000fca00000fc2f0000fc2f0000fc660000fc5f0000
fdd00000fcf10000fd6d0000fcf30000fd710000fd710000fdb10000fc65
0000fcf10000fcf10000fc2f0000fbff0000fd770000fc660000fc660000
fc650000fc650000fc650000fc650000fc460000fd790000fcde0000fcde
0000fd4b0000fd4b0000fca80000fca80000fd710000fda60000fda60000
fce30000fd4c0000fd4c0000fd4b0000fd4b0000fd7e0000fcdf0000fcde
0000fcde0000fc8f0000fc520000fc520000fc520000fc520000fc920000
fc970000fc970000fc560000fc560000fc910000fd820000fd820000fd70
0000fd700000fdfa0000fdfa0000fd5f0000fd5f0000fd790000fd790000
fd8f0000fd8f0000fd6e0000fd6e0000fd7a0000fd7a0000fcfb0000fcfb
0000fdb60000fdb60000fda80000fda80000fd680000fd680000fd710000
fd710000fcf10000fcf10000fcf10000fcf10000fc540000fc260000fc26
0000fc290000fc290000fc270000fc270000fc270000fc270000fc350000
fc350000fc350000fc350000fdb60000fda80000fda80000fce30000fd46
0000fd460000fd470000fd470000fd020000fd020000fd020000fd020000
fc650000fc660000fc9f0000fc9f0000fc9f0000fc9f0000fca10000fca1
0000fc9f0000fc9f0000fc9f0000fc9f0000fca10000fca10000fc370000
fc370000fc370000fc370000fca00000fca00000fc9f0000fcad0000fd33
0000fd470000fc9f0000fc9f0000fc9f0000fc9f0000fbff0000fc020000
fbff0000fc000000fc370000fc370000fc370000fc370000fdbd0000fdbd
0000fca20000fca30000fca30000fdd10000fdd10000fdd10000fdd10000
fc6a0000fc6a03e6fe940389ffcb0389ffcb0389001a01d6008904340060
043400600434006004340060043c0025067600250aa000b400b400b400b4
00b400b400b400b400b400b400b400b400b400b400b400b400b400b400b4
00b400b400b400b400b400b400b400b400b400b400b400b400b4000000>
<00000000000001420000014200000142000001420000025e0000025e0000
025e0000025e0000025e0000025e0000025e0000025e0000025e0000025e
0000025e0000025e0000025e0000025e0000025e0000025e0000025e0000
025e0000025e0000025e0000025e0000025e0000025e0000025e0000025e
0000025e0000025e0000025e0000025e0000025e0000025e0000025e0000
025e0000025e0000025e0000025e0000025e0000025e0000025e0000025e
0000039e0000039e0000039e0000039e0000039e0000039e0000039e0000
039e0000039e0000039e0000039e0000039e0000039e0000039e0000039e
0000039e0000039e0000039e0000039e0000039e0000039e0000039e0000
039e0000039e0000039e0000039e0000039e0000039e0000039e0000039e
0000039e0000048e0000048e0000048e0000048e0000048e0000048e0000
048e0000048e0000048e0000048e0000048e0000048e0000048e0000048e
0000048e0000048e0000048e0000048e0000048e0000048e0000048e0000
048e0000048e0000048e0000048e0000055c0000055c0000055c0000055c
0000055c0000055c0000055c0000055c0000055c0000055c0000055c0000
055c0000055c0000055c0000055c0000055c0000055c0000055c0000055c
0000055c0000055c0000055c0000055c0000055c0000055c0000055c0000
055c0000055c0000055c0000055c0000055c0000055c0000055c0000055c
0000055c0000055c0000055c0000055c0000055c0000055c0000055c0000
055c0000055c0000055c0000055c0000055c0000055c0000055c0000055c
0000055c0000055c0000055c0000055c0000055c0000055c0000055c0000
055c0000055c0000055c0000055c0000055c0000055c0000055c0000055c
0000055c0000055c0000055c0000055c0000055c0000055c0000055c0000
055c0000055c0000055c0000055c0000055c0000055c0000055c0000055c
0000055c0000055c0000055c0000055c0000055c0000055c0000055c0000
055c0000055c0000055c0000055c0000055c0000055c0000055c0000055c
0000055c0000055c0000055c0000055c0000055c0000055c0000055c0000
055c0000055c0000055c0000055c0000055c0000055c0000055c0000055c
0000055c0000055c0000055c0000055c0000055c0000055c0000055c0000
055c0000055c0000055c0000055c0000055c0000055c0000055c0000055c
0000055c0000055c0000055c0000055c0000055c0000055c0000055c0000
055c0000055c0000055c0000055c0000055c0000055c0000055c0000055c
0000055c0000055c0000055c0000055c0000055c0000055c0000055c0000
055c0000055c0000055c0000055c0000055c0000055c0000055c0000055c
0000055c0000055c0000055c0000055c0000055c0000055c0000055c0000
055c0000055c0000055c0000055c0000055c0000055c0000055c0000055c
0000055c0000055c0000055c0000055c0000055c0000055c0000055c0000
055c0000055c0000055c0000055c0000055c0000055c0000055c0000055c
0000055c0000055c0000069e0000069e0000069e0000069e0000069e0000
069e0000069e0000069e0000069e0000069e0000069e0000069e0000069e
0000069e0000069e0000069e0000069e0000069e0000069e0000069e0000
069e0000069e0000069e0000069e0000069e0000069e0000069e0000069e
0000069e0000069e0000069e0000069e0000069e0000069e0000069e0000
069e0000069e0000069e0000069e0000069e0000069e0000069e0000069e
0000069e0000069e0000069e0000069e0000069e0000069e0000069e0000
069e0000069e0000069e0000069e0000069e0000069e0000069e0000069e
0000069e0000069e0000069e0000069e0000069e0000069e0000069e0000
069e0000069e0000069e0000069e0000069e0000069e0000069e0000069e
0000069e0000069e0000069e0000069e0000069e0000069e0000069e0000
069e00000724000007240000072400000724000007240000072400000724
000007240000072400000724000007240000072400000724000007240000
072400000724000007240000072400000724000007240000072400000724
000007240000072400000724000007240000085200000852000008520000
085200000852000008520000085200000852000008520000085200000852
000008520000085200000852000008520000085200000852000008520000
085200000852000008520000085200000852000008520000085200000852
000008520000085200000852000008520000085200000852000008520000
085200000852000008520000085200000852000008520000085200000852
000008520000085200000852000008520000085200000852000008520000
085200000852000008520000085200000852000008520000085200000852
0000085200000852000008520000085200000852000008520000091c0000
091c0000091c0000091c0000091c0000091c0000091c0000091c0000091c
0000091c0000091c0000091c0000091c0000091c0000091c0000091c0000
091c0000091c0000091c0000091c0000091c0000091c0000091c0000091c
0000091c0000091c0000091c0000091c0000091c0000091c0000091c0000
091c0000091c0000091c0000091c0000091c0000091c0000091c0000091c
0000091c0000091c0000091c0000091c0000091c0000091c0000091c0000
091c0000091c0000091c0000091c0000091c0000091c0000091c0000091c
0000091c0000091c0000091c0000091c0000091c0000091c0000091c0000
091c0000091c0000091c0000091c0000091c0000091c0000091c0000091c
0000091c0000091c0000091c0000091c0000091c0000091c0000091c0000
091c0000091c0000091c0000091c0000091c0000091c0000091c0000091c
0000091c0000091c0000091c0000091c0000091c0000091c0000091c0000
091c0000091c0000091c0000091c0000091c0000091c0000091c0000091c
0000091c0000091c0000091c0000091c0000091c0000091c0000091c0000
091c0000091c0000091c0000091c0000091c0000091c0000091c0000091c
0000091c0000091c0000091c0000091c0000091c0000091c0000091c0000
091c0000091c0000091c0000091c0000091c0000091c0000091c0000091c
0000091c0000091c0000091c0000091c0000091c0000091c0000091c0000
091c0000091c0000091c0000091c0000091c0000091c0000091c0000091c
0000091c0000091c0000091c0000091c0000091c0000091c0000091c0000
091c0000091c0000091c0000091c0000091c0000091c0000091c0000091c
0000091c0000091c0000091c0000091c0000091c0000091c0000091c0000
091c0000091c0000091c0000091c0000091c0000091c0000091c0000091c
0000091c0000091c0000091c0000091c0000091c0000091c0000091c0000
091c0000091c0000091c0000091c0000091c0000091c0000091c0000091c
0000091c0000091c0000091c0000091c0000091c0000091c0000091c0000
091c0000091c0000091c0000091c0000091c0000091c0000091c0000091c
0000091c0000091c0000091c0000091c0000091c0000091c0000091c0000
091c0000091c0000091c0000091c0000091c0000091c0000091c0000091c
0000091c0000091c0000091c0000091c0000091c0000091c0000091c0000
091c0000091c0000091c0000091c0000091c0000091c0000091c0000091c
0000091c0000091c0000091c0000091c0000091c0000091c0000091c0000
091c0000091c0000091c0000091c0000091c0000091c0000091c0000091c
0000091c0000091c0000091c0000091c0000091c0000091c0000091c0000
091c0000091c0000091c0000091c0000091c0000091c0000091c0000091c
0000091c0000091c0000091c0000091c0000091c0000091c0000091c0000
091c0000091c0000091c0000091c0000091c0000091c0000091c0000091c
0000091c0000091c0000091c0000091c0000091c0000091c0000091c0000
091c0000091c0000091c0000091c0000091c0000091c0000091c0000091c
0000091c0000091c0000091c0000091c0000091c0000091c0000091c0000
091c0000091c0000091c0000091c0000091c0000091c0000091c0000091c
0000091c0000091c0000091c0000091c0000091c0000091c0000091c0000
091c0000091c0000091c0000091c0000091c0000091c0000091c0000091c
0000091c0000091c0000091c0000091c0000091c0000091c0000091c0000
091c0000091c0000091c0000091c0000091c0000091c0000091c0000091c
0000091c0000091c0000091c0000091c0000091c0000091c0000091c0000
091c0000091c0000091c0000091c0000091c0000091c0000091c0000091c
0000091c0000091c0000091c0000091c0000091c0000091c0000091c0000
091c0000091c0000091c0000091c0000091c0000091c0000091c0000091c
0000091c0000091c0000091c0000091c0000091c0000091c0000091c0000
091c0000091c0000091c0000091c0000091c0000091c0000091c0000091c
0000091c0000091c0000091c0000091c0000091c0000091c0000091c0000
091c0000091c0000091c0000091c0000091c0000091c0000091c0000091c
0000091c0000091c0000091c0000091c0000091c0000091c0000091c0000
091c0000091c0000091c0000091c0000091c0000091c0000091c0000091c
0000091c0000091c0000091c0000091c0000091c0000091c0000091c0000
091c0000091c0000091c0000091c0000091c0000091c0000096200000962
000009620000096200000962000009620000096200000962000009620000
096200000962000009620000096200000962000009620000096200000962
000009620000096200000962000009620000096200000962000009620000
096200000962000009620000096200000962000009620000096200000962
000009620000096200000962000009620000096200000962000009620000
096200000962000009620000096200000962000009620000096200000962
000009620000096200000962000009620000096200000962000009620000
096200000962000009620000096200000962000009620000096200000962
000009620000096200000962000009620000096200000962000009620000
096200000962000009620000096200000962000009620000096200000962
000009620000096200000962000009620000096200000962000009620000
096200000962000009620000096200000abe00000abe00000d0a00000d0a
00000d0a00000d0a00000d0a00000d0a00000d0a00000d0a00000d0a0000
0d0a00000d0a00000d0a00000d0a00000d0a00000d0a00000d0a00000d0a
00000d0a00000d0a00000d0a00000d0a00000d0a00000d0a00000d0a0000
0d0a00000d0a00000d0a00000d0a00000d0a00000d0a00000d0a00000d0a
00000e7000000fde0000111e0000130600001490000015fa0000160a0000
174800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
000017580000175800001758000017580000175800001758000017580000
175800001758000017580000175800001758000017580000175800001758
0000175800001758000017580000175800001758000100000f2201200010
00c3000700020010002f0065000011900182000400010000000e00ae0000
00030000000000640000000000030000000700fa00640001000000000000
0032015e0001000000000003000e01900001000000000004000e019e0001
000000000006000e01ac0001000000000007007d01ba0003000104090000
006402370003000104090001001c029b0003000104090002000e02b70003
000104090003001c02c50003000104090004001c02e10003000104090006
001c02fd000300010409000700fa031900a9002000320030003000380020
004d006900630072006f0073006f0066007400200043006f00720070006f
0072006100740069006f006e002e00200041006c006c0020005200690067
006800740073002000520065007300650072007600650064002e00430061
006c00690062007200690020006900730020006500690074006800650072
002000610020007200650067006900730074006500720065006400200074
0072006100640065006d00610072006b0020006f00720020006100200074
0072006100640065006d00610072006b0020006f00660020004d00690063
0072006f0073006f0066007400200043006f00720070006f007200610074
0069006f006e00200069006e002000740068006500200055006e00690074
00650064002000530074006100740065007300200061006e0064002f006f
00720020006f007400680065007200200063006f0075006e007400720069
00650073002ea92032303038204d6963726f736f667420436f72706f7261
74696f6e2e20416c6c205269676874732052657365727665642e4d575658
4e512b43616c696272694d5756584e512b43616c696272694d5756584e51
2b43616c6962726943616c69627269206973206569746865722061207265
67697374657265642074726164656d61726b206f7220612074726164656d
61726b206f66204d6963726f736f667420436f72706f726174696f6e2069
6e2074686520556e697465642053746174657320616e642f6f72206f7468
657220636f756e74726965732e00a9002000320030003000380020004d00
6900630072006f0073006f0066007400200043006f00720070006f007200
6100740069006f006e002e00200041006c006c0020005200690067006800
740073002000520065007300650072007600650064002e004d0057005600
58004e0051002b00430061006c0069006200720069005200650067007500
6c00610072004d005700560058004e0051002b00430061006c0069006200
720069004d005700560058004e0051002b00430061006c00690062007200
69004d005700560058004e0051002b00430061006c006900620072006900
430061006c00690062007200690020006900730020006500690074006800
650072002000610020007200650067006900730074006500720065006400
2000740072006100640065006d00610072006b0020006f00720020006100
2000740072006100640065006d00610072006b0020006f00660020004d00
6900630072006f0073006f0066007400200043006f00720070006f007200
6100740069006f006e00200069006e002000740068006500200055006e00
69007400650064002000530074006100740065007300200061006e006400
2f006f00720020006f007400680065007200200063006f0075006e007400
72006900650073002e000000b2090320b80284b40918014a20b80283b409
18014a20b80282b40918014a20b80281b40918014a20b80280b40918014a
20b8027fb40918014a20b8027eb40918014a20b8027db40918014a20b802
7cb40918014a20b8027bb40918014a20b8027ab40918014a20b80279b409
18014a20b80278b40918014a20b80277b40918014a20b80276b40918014a
20b80275b40918014a20b80274b40918014a20b80273b40918014a20b802
71b40918014a20b80270b40918014a20b8026fb40918014a20b8026eb409
18014a20b8026db40918014a20b8026cb40918014a20b8026bb40918014a
20b8026ab40918014a20b80269b40918014a20b80268b40918014a20b802
67b40918014a20b80266b40918014a20b80265b40918014a20b80264b409
18014a20b80263b40918014a20b80262b40918014a20b80261b40918014a
20b80260b40918014a20b8025fb40918014a20b8025eb40918014a20b802
5db40918014a20b8025cb40918014a20b8025bb40918014a20b8025ab409
18014a20b80259b40918014a20b80258b40918014a20b80257b40918014a
20b80256b40918014a20b80255b40918014a20b80254b40918014a20b802
53b40918014a20b80252b40918014a20b80251b40918014a20b80250b409
18014a20b8024fb40918014a20b8024eb40918014a20b8024db40918014a
20b8024cb40918014a20b8024bb40918014a20b8024ab40918014a20b802
49b40918014a20b80248b40918014a20b80247b40918014a20b80246b409
18014a20b80245b40918014a20b80244b40918014a20b80243b40918014a
20b80242b40918014a20b80241b40918014a20b80240b40918014a20b802
3fb40918014a20b8023eb40918014a20b8023db40918014a20b8023cb409
18014a20b8023bb40918014a20b8023ab40918014a20b80239b40918014a
20b80238b40918014a20b80237b40918014a20b80236b40918014a20b802
35b40918014a20b80234b40918014a20b80233b40918014a20b80232b409
18014a20b80231b40918014a20b80230b40918014a20b8022fb40918014a
20b8022eb40918014a20b8022db40918014a20b8022cb40918014a20b802
2bb40918014a20b8022ab40918014a20b80229b40918014a20b80228b409
18014a20b80227b40918014a20b80226b40918014a20b80225b40918014a
20b80224b40918014a20b80223b40918014a20b80222b40918014a20b802
21b40918014a20b80220b40918014a20b8021fb40918014a20b8021eb409
18014a20b8021db40918014a20b8021cb40918014a20b8021bb40918014a
20b8021ab40918014a20b80219b40918014a20b80218b40918014a20b802
17b40918014a20b80216b40918014a20b80215b40918014a20b80214b409
18014a20b80213b40918014a20b80212b40918014a20b80211b40918014a
20b80210b40918014a20b8020fb40918014a20b8020eb40918014a20b802
0db40918014a20b8020cb40918014a20b8020bb40918014a20b8020ab409
18014a20b80209b40918014a20b80208b40918014a20b80207b40918014a
20b80206b40918014a20b80205b40918014a20b80204b40918014a20b802
03b40918014a20b80202b40918014a20b80201b40918014a20b80200b409
18014a20b801ffb40918014a20b801feb40918014a20b801fdb40918014a
20b801fcb40918014a20b801fbb40918014a20b801fab40918014a20b801
f9b40918014a20b801f8b40918014a20b801f7b40918014a20b801f6b409
18014a20b801f5b40918014a20b801f4b40918014a20b801f3b40918014a
20b801f2b40918014a20b801f1b40918014a20b801f0b40918014a20b801
efb40918014a20b801eeb40918014a20b801edb40918014a20b801ecb409
18014a20b801ebb40918014a20b801eab40918014a20b801e9b40918014a
20b801e8b40918014a20b801e7b40918014a20b801e6b40918014a20b801
e5b40918014a20b801e4b40918014a20b801e3b40918014a20b801e2b409
18014a20b801e1b40918014a20b801e0b40918014a20b801dfb40918014a
20b801deb40918014a20b801ddb40918014a20b801dcb40918014a20b801
dbb40918014a20b801dab40918014a20b801d9b40918014a20b801d8b409
18014a20b801d7b40918014a20b801d6b40918014a20b801d5b40918014a
20b801d4b40918014a20b801d3b40918014a20b801d2b40918014a20b801
d1b40918014a20b801d0b40918014a20b801cfb40918014a20b801ceb409
18014a20b801cdb40918014a20b801ccb40918014a20b801cbb40918014a
20b801cab40918014a20b801c9b40918014a20b801c8b40918014a20b801
c7b40918014a20b801c6b40918014a20b801c5b40918014a20b801c4b409
18014a20b801c3b40918014a20b801c2b40918014a20b801c1b40918014a
20b801c0b40918014a20b801bfb40918014a20b801beb40918014a20b801
bdb40918014a20b801bcb40918014a20b801bbb40918014a20b801bab409
18014a20b801b9b40918014a20b801b8b40918014a20b801b7b40918014a
20b801b6b40918014a20b801b5b40918014a20b801b4b40918014a20b801
b3b40918014a20b801b2b40918014a20b801b1b40918014a20b801b0b409
18014a20b801afb40918014a20b801aeb40918014a20b801adb40918014a
20b801acb40918014a20b801abb40918014a20b801aab40918014a20b801
a9b40918014a20b801a8b40918014a20b801a7b40918014a20b801a6b409
18014a20b801a5b40918014a20b801a4b40918014a20b801a3b40918014a
20b801a2b40918014a20b801a1b40918014a20b801a0b40918014a20b801
9fb40918014a20b8019eb40918014a20b8019db40918014a20b8019cb409
18014a20b8019bb40918014a20b8019ab40918014a20b80199b40918014a
20b80198b40918014a20b80197b40918014a20b80196b40918014a20b801
95b40918014a20b80194b40918014a20b80193b40918014a20b80192b409
18014a20b80191b40918014a20b80190b40918014a20b8018fb40918014a
20b8018eb40918014a20b8018db40918014a20b8018cb40918014a20b801
8bb40918014a20b8018ab40918014a20b80189b40918014a20b80188b409
18014a20b80187b40918014a20b80186b40918014a20b80185b40918014a
20b80184b40918014a20b80183b40918014a20b80182b40918014a20b801
81b40918014a20b80180b40918014a20b8017fb40918014a20b8017eb409
18014a20b8017db40918014a20b8017cb40918014a20b8017bb40918014a
20b8017ab40918014a20b80179b40918014a20b80178b40918014a20b801
77b40918014a20b80176b40918014a20b80175b40918014a20b80174b409
18014a20b80173b40918014a20b80172b40918014a20b80171b40918014a
20b80170b40918014a20b8016fb40918014a20b8016eb40918014a20b801
6db40918014a20b8016cb40918014a20b8016bb40918014a20b8016ab409
18014a20b80169b40918014a20b80168b40918014a20b80167b40918014a
20b80166b40918014a20b80165b40918014a20b80164b40918014a20b801
63b40918014a20b80162b40918014a20b80161b40918014a20b80160b409
18014a20b8015fb40918014a20b8015eb40918014a20b8015db40918014a
20b8015cb40918014a20b8015bb40918014a20b8015ab40918014a20b801
59b40918014a20b80158b40918014a20b80157b40918014a20b80156b409
18014a20b80155b40918014a20b80154b40918014a20b80153b40918014a
20b80152b40918014a20b80150b40918014a20b8014fb40918014a20b801
4eb40918014a20b8014cb40918014a20b8014bb40918014a20b8014ab409
18014a20b80149b40918014a20b80148b40918014a20b80147b40918014a
20b80146b40918014a20b80145b40918014a20b80144b40918014a20b801
43b30918014ab80284b21e3e1fb80283b21e151fb80282b21e3e1fb80281
b21e3a1fb80280b21e3e1fb8027fb21e3e1fb8027eb21e0c1fb8027db21e
3e1fb8027cb21e3e1fb8027bb21e3e1fb8027ab21e3e1fb80279b21d411f
b80278b21d431fb80277b21d431fb80276b21d431fb80275b21d411fb802
74b21d431fb80273b21d431fb80272b21d411fb80271b21d421fb80270b2
1d421fb8026fb21d421fb8026eb21d431fb8026db21d431fb8026cb21d43
1fb8026bb21c451fb8026ab21c451fb80269b21c451fb80268b21c451fb8
0267b21c451fb80266b21c441fb80265b21c451fb80264b21c451fb80263
b21c451fb80262b21c451fb80261b21c451fb80260b21c451fb8025fb21c
451fb8025eb21c441fb8025db21c451fb8025cb21c451fb8025bb21c451f
b8025ab21c451fb80259b21c451fb80258b21c451fb80257b21c451fb802
56b21c451fb80255b21c451fb80254b21c451fb80253b21c451fb80252b2
1c451fb80251b21c451fb80250b21c451fb8024fb21c451fb8024eb21c45
1fb8024db21c451fb8024cb21c451fb8024bb21c451fb8024ab21b491fb8
0249b21b491fb80248b21b4a1fb80247b21b4a1fb80246b21b4b1fb80245
b21b4c1fb80244b21b4c1fb80243b21b4c1fb80242b21b4b1fb80241b21b
491fb80240b21b491fb8023fb21b4a1fb8023eb21b4a1fb8023db21b4a1f
b8023cb21b4b1fb8023bb21b4b1fb8023ab21b4c1fb80239b21b4c1fb802
38b21b4c1fb80237b21b4c1fb80236b21b4c1fb80235b21b491fb80234b2
1b491fb80233b21b4a1fb80232b21b4a1fb80231b21b4a1fb80230b21b4b
1fb8022fb21b4b1fb8022eb21b4c1fb8022db21b4c1fb8022cb21b4c1fb8
022bb21b4c1fb8022ab21b4c1fb80229b21b4c1fb80228b21b4c1fb80227
b21b491fb80226b21b491fb80225b21b4a1fb80224b21b4a1fb80223b21b
4a1fb80222b21b4b1fb80221b21b4b1fb80220b21b4c1fb8021fb21b4c1f
b8021eb21b4c1fb8021db21b4c1fb8021cb21b4c1fb8021bb21b4c1fb802
1ab21a4e1fb80219b21a4e1fb80218b21a4f1fb80217b21a4f1fb80216b2
1a4e1fb80215b21a4e1fb80214b21a4f1fb80213b21a4f1fb80212b21a4f
1fb80211b21a4e1fb80210b21a4e1fb8020fb21a4f1fb8020eb21a4f1fb8
020db21a4f1fb8020cb21a4e1fb8020bb21a4e1fb8020ab21a4e1fb80209
b21a4f1fb80208b21a4f1fb80207b21a4f1fb80206b219501fb80205b219
511fb80204b219511fb80203b219501fb80202b219511fb80201b219511f
b80200b219511fb801ffb219511fb801feb219501fb801fdb219511fb801
fcb219511fb801fbb219511fb801fab219501fb801f9b219511fb801f8b2
19511fb801f7b219511fb801f6b219511fb801f5b218541fb801f4b21853
1fb801f3b218541fb801f2b218541fb801f1b218541fb801f0b218531fb8
01efb218541fb801eeb218541fb801edb218541fb801ecb218531fb801eb
b218531fb801eab218541fb801e9b218541fb801e8b218541fb801e7b218
541fb801e6b218531fb801e5b218541fb801e4b218531fb801e3b218541f
b801e2b218541fb801e1b218541fb801e0b218531fb801dfb218531fb801
deb218541fb801ddb218541fb801dcb218541fb801dbb218541fb801dab2
18531fb801d9b218541fb801d8b218541fb801d7b217571fb801d6b21756
1fb801d5b217561fb801d4b217571fb801d3b217571fb801d2b217571fb8
01d1b217571fb801d0b217561fb801cfb217561fb801ceb217571fb801cd
b217571fb801ccb217571fb801cbb217571fb801cab217561fb801c9b217
561fb801c8b217571fb801c7b217571fb801c6b217571fb801c5b217571f
b801c4b217571fb801c3b217561fb801c2b217571fb801c1b217571fb801
c0b217571fb801bfb217561fb801beb217561fb801bdb217571fb801bcb2
17571fb801bbb217571fb801bab217571fb801b9b217571fb801b8b21756
1fb801b7b217571fb801b6b217571fb801b5b217571fb801b4b217571fb8
01b3b2163f1fb801b2b2165b1fb801b1b2165b1fb801b0b2165b1fb801af
b2165b1fb801aeb2165b1fb801adb2165b1fb801acb2165b1fb801abb216
5b1fb801aab2163e1fb801a9b2163f1fb801a8b2163f1fb801a7b2165b1f
b801a6b2165b1fb801a5b2165b1fb801a4b2165b1fb801a3b2165b1fb801
a2b2165b1fb801a1b2165b1fb801a0b2165b1fb8019fb2163e1fb8019eb2
163f1fb8019db2163f1fb8019cb2165b1fb8019bb2165b1fb8019ab2165b
1fb80199b2165b1fb80198b2163e1fb80197b2165b1fb80196b2165b1fb8
0195b2165b1fb80194b2163e1fb80193b2163f1fb80192b2163f1fb80191
b2165b1fb80190b2165b1fb8018fb2165b1fb8018eb2165b1fb8018db216
5b1fb8018cb2163f1fb8018bb2165b1fb8018ab2165b1fb80189b2165b1f
b80188b2165b1fb80187b2165b1fb80186b215611fb80185b215621fb801
84b215621fb80183b215661fb80182b215661fb80181b215551fb80180b2
15451fb8017fb215361fb8017eb215361fb8017db215611fb8017cb21562
1fb8017bb215621fb8017ab215641fb80179b215661fb80178b215661fb8
0177b215661fb80176b215661fb80175b215661fb80174b215661fb80173
b215451fb80172b215621fb80171b215621fb80170b215631fb8016fb215
641fb8016eb215661fb8016db215661fb8016cb215661fb8016bb215661f
b8016ab215661fb80169b215621fb80168b215621fb80167b215611fb801
66b215641fb80165b215641fb80164b215661fb80163b215661fb80162b2
15661fb80161b215661fb80160b215661fb8015fb215661fb8015eb21555
1fb8015db215451fb8015cb215451fb8015bb215361fb8015ab215611fb8
0159b215621fb80158b215621fb80157b215631fb80156b215641fb80155
b215661fb80154b215661fb80153b215661fb80152b215661fb80151b214
401fb80150b214551fb8014fb214561fb8014eb214831fb8014db2142d1f
b8014cb214401fb8014bb214401fb8014ab214411fb80149b214401fb801
48b214401fb80147b214411fb80146b2147e1fb80145b214871fb80144b2
147f1fb80143b214801fb80142b212461fb80141b212461fb80140b21246
1fb8013fb212461fb8013eb212441fb8013db212461fb8013cb211591fb8
013bb211591fb8013ab2115b1fb80139b2115b1fb80138b211471fb80137
b211581fb80136b2115a1fb80135b2115b1fb80134b2115b1fb80133b211
2c1fb80132b211471fb80131b211551fb80130b211571fb8012fb211571f
b8012eb211581fb8012db211591fb8012cb211591fb8012bb2115a1fb801
2ab2115a1fb80129b2115b1fb80128b2115b1fb80127b2115b1fb80126b2
115b1fb80125b211561fb80124b211561fb80123b211571fb80122b21158
1fb80121b211591fb80120b2115a1fb8011fb2115a1fb8011eb2115b1fb8
011db2115b1fb8011cb2115b1fb8011bb2115b1fb8011ab2115b1fb80119
b2105d1fb80118b2105e1fb80117b2105f1fb80116b2105f1fb80115b210
5f1fb80114b2105f1fb80113b2105f1fb80112b2105d1fb80111b2105e1f
b80110b2105f1fb8010fb2105f1fb8010eb2105f1fb8010db2105f1fb801
0cb2105d1fb8010bb2105e1fb8010ab2105f1fb80109b2105f1fb80108b2
105f1fb80107b2105f1fb80106b2105d1fb80105b2105e1fb80104b2105f
1fb80103b2105f1fb80102b2105f1fb80101b2105f1fb8010040ff0f621f
ff0f621ffe0f631ffd0f641ffc0f621ffb0f621ffa0f621ff90f631ff80f
641ff70f641ff60f641ff50f641ff40f621ff30f621ff20f631ff10f641f
f00f641fef0f641fee0f641fed0f621fec0f621feb0f631fea0f641fe90f
641fe80f641fe70f641fe60e671fe50e681fe40e681fe30e681fe20e681f
e10e671fe00e681fdf0e681fde0e681fdd0e671fdc0e681fdb0e681fda0e
681fd90e681fd80d6b1fd70d311fd60d6b1fd50d6c1fd40d261fd30d261f
d20d6c1fd10d2b1fd00d2b1fcf0d2b1fce0d6b1fcd0d6c1fcc0d6d1fcb0d
6b1fca0d6c1fc90d6d1fc80d6a1fc70d691fc60d681fc50d671fc40d261f
c30d311fc20d311fc10d311f40ffc00d311fbf0d311fbe0d311fbd0c711f
bc0c721fbb0c731fba0c741fb90c741fb80c741fb70c711fb60c711fb50c
721fb40c731fb30c741fb20c741fb10c741fb00c741faf0b791fae0b7a1f
ad0b7c1fac0b7d1fab0b7e1faa0b7e1fa90b7e1fa80b7e1fa70b7e1fa60b
7e1fa50b2d1fa40b7e1fa30b7e1fa20b791fa10b7e1fa00b6b1f9f0b791f
9e0b7e1f9d0b7e1f9c0b791f9b0b7a1f9a0b7c1f990b7d1f980b7e1f970b
7e1f960b7e1f950b7e1f940b7e1f930b7e1f920b6b1f910b2d1f900a4e1f
8f0a4f1f8e0a671f8d0aa51f8c0aa71f8503251f8403381f8301381f8255
805581ab80557f557d557eab7d550b7d010b7d1b7d4b7d7b7dab7ddb7d40
12060a7c557a557bab7a557955775578ab7755ba028600660285403c5576
ab755504751475747503f47501ab75014475013075010200751075207503
0c7455725573ab7255007250728072b072043bb072e072020072010ab8ff
c0b3721b1e46b8ffc0407c720d104671556f5570ab6f556e666d556a0325
1f6938675568ab67556638645565ab645563386255613860555f385d555e
ab5d555c385a555bab5a55593858555703251f5638545555ab5455533851
5552ab51554f384e554e03251f4d384b554cab4b554a38485549ab485547
3846554503381f001c101c201c0310b8ffc0404e1c1b1e46001b0142301b
401be01bf01b04001bb01bc01b03120f1a1f1a02290f1901434f19016f19
7f198f19030f18cf18024018292c460f17cf17df17ef1704134017292e46
0016101620160315b8ffc0b3164d5446b8ffc0b3163f4446b8ffc0b31631
3546b8ffc0404d162326460f15010f151f1502451f15010011e011f01103
15bf10cf10020f0f010f0fff0f02400f3135460f0e1f0e020f0e1f0eff0e
03400e3137460f0d1f0d020f0d1f0dff0d0316400d313746b8ffc040270c
5054460f0b1f0b02553f0b4f0b02400b3f4346400b2d3046000301200101
0001100120010308b8ffc0b301151f46b80100b316010501b80190b15453
2b2b4bb80800524bb008505bb00188b02553b00188b040515ab00688b000
555a5b58b101018e59b101024354b0144b515a58b101018e59858d8d0042
1d4bb01d5358b0a01d594bb0805358b0401d594bb0ff5358b0001db11600
42592b5e7375732b2b745e732b2b5e73742b73742b7374745e7301755e73
742b2b2b2b5e732b5e732b7374755e735e735e73755e732b5e73002b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b5e7375
5e732b2b5e735f73737373742b2b2b2b2b2b5e73742b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b012b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2bb10002435458
41ff0284006402830064028200640281006402800064027f0064027e0064
027d0064027c0064027b0064027a00640279006402780064027700640276
00640275006402740064027300640271006402700064026f0064026e0064
026d0064026c0064026b0064026a00640269006402680064026700640266
0064026500640264006402630064026200640261006402600064025f0064
025e0064025d0064025c0064025b0064025a006402590064025800640257
006402560064025500640254006402530064025200640251006402500064
024f0064024e0064024d0064024c0064024b0064024a0064024900640248
006402470064024600640245006402440064024300640242006402410064
02400064023f0064023e0064023d0064023c0064023b0064023a00640239
006402380064023700640236006402350064023400640233006402320064
0231006402300064022f0064022e0064022d0064022c0064022b0064022a
006402290064022800640227006402260064022500640224006402230064
022200640221006402200064021f0064021e0064021d0064021c0064021b
0064021a0064021900640218006402170064021600640215006402140064
02130064021200640211006402100064020f0064020e0064020d0064020c
0064020b0064020a00640209006402080064020700640206006402050064
020441ff00640203006402020064020100640200006401ff006401fe0064
01fd006401fc006401fb006401fa006401f9006401f8006401f7006401f6
006401f5006401f4006401f3006401f2006401f1006401f0006401ef0064
01ee006401ed006401ec006401eb006401ea006401e9006401e8006401e7
006401e6006401e5006401e4006401e3006401e2006401e1006401e00064
01df006401de006401dd006401dc006401db006401da006401d9006401d8
006401d7006401d6006401d5006401d4006401d3006401d2006401d10064
01d0006401cf006401ce006401cd006401cc006401cb006401ca006401c9
006401c8006401c7006401c6006401c5006401c4006401c3006401c20064
01c1006401c0006401bf006401be006401bd006401bc006401bb006401ba
006401b9006401b8006401b7006401b6006401b5006401b4006401b30064
01b2006401b1006401b0006401af006401ae006401ad006401ac006401ab
006401aa006401a9006401a8006401a7006401a6006401a5006401a40064
01a3006401a2006401a1006401a00064019f0064019e0064019d0064019c
0064019b0064019a00640199006401980064019700640196006401950064
0194006401930064019200640191006401900064018f0064018e0064018d
0064018c0064018b0064018a006401890064018800640187006401860064
0185006441800184006401830064018200640181006401800064017f0064
017e0064017d0064017c0064017b0064017a006401790064017800640177
006401760064017500640174006401730064017200640171006401700064
016f0064016e0064016d0064016c0064016b0064016a0064016900640168
006401670064016600640165006401640064016300640162006401610064
01600064015f0064015e0064015d0064015c0064015b0064015a00640159
006401580064015700640156006401550064015400640153006401520064
01500064014f0064014e0064014c0064014b0064014a0064014900640148
006401470064014600640145006401440064014300642b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b592b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b185f5e00>
[5977 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
2 3338 1004 <00020048ffed03c705210013002b00ea4019281201291101260d01260c01
2608012507012a03012902012db8ffc040250f024d602d01141810014d14
100f014d14160d014d140a0c014d14200b014d14180c014d14bb022d0000
0020ffe8b310014d20b8fff0b30f014d20b8ffeab30d014d20b8fff6b30c
014d20b8ffe8b60c014d24200120b8022d40090a200030004000030ab8ff
f040090f014d2f0a4f0a0200b8ffd040090f014d0a100f024d00b8ffc040
0a0f024d000a000a2d2c1bb8010ab20f5325b8010ab10556003fed3fed11
120139392f2f2b2b2b5d2b5d10e15d2b2b2b2b2b10e12b2b2b2b2b2b3130
5d2b5d5d5d5d5d5d5d5d01140e0223222e0235343e0233321e0207342e04
23220e0215141e0233323e0403c72f6db0817aa7662b306cb0807ba7662b
b00e1b2b3c4d30556a3d161e41654838553d281809028a95f6b16157a9f7
a094f7b16157a9f7ac619a76553719508cbc6c91cb803a24435e7285>PBAAAA+Calibri AddT42Char 
2 3696 1005 <000100ae0000039f0517002e00e54024241e01241d01241c01231b01241a
01241901261801261701291201291101122010014d30b8ffc0400d0f024d
60300100200b014d0029b8ffe8b310014d29b8fff0b30f014d29b8fff0b3
0d014d29b8fff6b30c014d29b8fff8b30b014d29b80211400e1e18200b01
4d180b200b014d0b11b8ffe0b30f014d11b8ffd4b30f024d11b8ffc0b310
014d11b8ffe0b30f014d11b8ffc0b30c014d11b8fff040090b014da01101
111312b8013fb323522910b80107b10654003fed323ffdcd012f5d2b2b2b
2b2b2bcd2bc42b33f12b2b2b2b2bc52b31305d2b002b015d5d5d5d5d5d5d
5d5d5d25140e022321222e0235343e02332111070606262635343e023725
3e0333321e02151133321e02039f060a0d07fd5c070c0b0606090d08010e
fa13170e0503060b09012a040c12181218201206ea080e090544131a1007
07101a13121a110903d8950a040d1e171118100c06bf0304040104070b06
fb8f09111a00>PBAAAA+Calibri AddT42Char 
2 4062 1006 <000100720000039c0521003e0094400d2936012b1e01291d01261e0140b8
ffc040170f024d604001161810014d16100c0d014c16200b014d16b8022d
b633253325330039b8ffe8b310014d39ba027f000bffc0b30c014d0bb8ff
e0400b0f014d0b1138392020391bb8012eb63316062e531039b80128b106
54003fed323f123939ed11392f123939012f2b2be12bcd39392f2f10e12b
2b2b31305d2b005d015d5d5d25140e022321222e0235343e0237133e0335
342e0223220e0223222e0235343e0633321e0215140e02070721321e0203
9c05090f09fd350e150f07030a0f0cfb576939121c3550343d6149310c07
0b0704020508183b596b3b5e8d5d2e1647866fcd0233080f0b054a121c13
0907101e16141e17170d010a5c9278622b2b4d3a2222282208121e150f16
100e15242318355c7a453e7b8faf72d609121b00>PBAAAA+Calibri AddT42Char 
2 4382 1007 <00010067ffed0392052100580105b9005affc0401c0f024d605a01310810
014d31100f014d31100c0d014c31200b014d31b80235400a4e53264e4e18
13014d40b8ffe840260f014d26200f014d40264e4e2640030e1b0810014d
1b100f014d1b100c0d014c1b200b014d1bb8fff8b30b014d1bb8022db500
080b014d00b8ffe8b40f024d000eb8ffe0b30f014d0eb8fff0b30f014d0e
b8ffc040130c014d0e3b400f014d3b400c0d014c2f3b0111b8ffc0b30f01
4d11b8ffc0400a0c0d014c3b113b111636b8010b400a49532cf320200549
5316b8010bb10556003fed3f12392fed3910ed1139392f2f2b2b5d2b2b01
2f2b2b2bd42b2be12b2b2b2b2b1217392f2f2f2b2b2b11123910e12b2b2b
2b31305d2b01140e0223222e0635343633321e0233323e0235342e022323
222e0235343e023333323e0235342e0223220e0223222e0235343e063332
1e0215140e0207151e0303923e74aa6b4171583a0f0806030e0d0935536f
44426444222b53794d7b080f0b07060b0e0971426949271a3451353a614c
320a070b0703020608133a556f405a885b2d203e5a3b436f502d0172598f
6637151d1f0e0e141d15241c202520223e55323758402207101a1513190f
07224059372849361f232823050f1b160f17110e132423182e5475473d69
51390b020735506b>PBAAAA+Calibri AddT42Char 
2 4870 1008 <00020030fffa03d30514002a002e00fb403a252e01262d01272c01242701
242601251c01261b01231a01241901251801251701261601261501261401
261001260f012405012404012b1b0130b8ffc040120f024d6030012d1618
0f024d162010014d16b8ffe0b30f014d16b8ffe0b70c014d161c2e2e10b8
fffc401d0f024d101810014d10100f014d10100d014d100a0c014d10100b
014d10bb021100270004ffd4b30f024d04b8ffd0b30c014d04b8ffe0400a
0b014d0404302f271b2eb8010b400a042b2110100a21520a55003f3f1239
2f123933ed3232111201392f2b2b2b33e12b2b2b2b2b2b321133cd2b2b2b
2b3231305d2b005d015d5d5d5d5d5d5d5d5d5d5d5d5d5d5d5d5d5d011406
232311140e0223222e02351121222e0235343e0237013e0333321e021511
3332160123012103d31412920814201918201307fdea0c100d0502060a07
01d205131e2c1e21311e10921115fea102fe5b01a701702126fef0080b08
0404080b08011006101e18131e19170d0312080c080305080d09fcc62302
e9fd3a00>PBAAAA+Calibri AddT42Char 
2 5264 1009 <00010065ffed0396050e003e00c1400d27370127360126080126030140b8
ffc0b60f024d60400137b8ffe8b310014d37b8fff0b40b0d014c37ba0211
0028ffc0402810014d28400f014d280e4f326f327f3203321d1810014d1d
100f014d1d100c0d014c1d200b014d1dba02330000ffe8b30f024d00b8ff
c0b50f014d004013b8ffc0b70f10014c13131836b8012c400c2c3af42022
012222052c5118b8010bb10556003fed3f12392f5ded10ed11392f2b0110
d62b2be12b2b2b2bc45dd4d42b2be12b2b31305d2b005d5d015d5d01140e
0223222e0635343e0233321e0233323e0235342e02232206232226351134
363321321e02151406232111363633321e0203964680b16c3c6c54360f06
050203080b070a2a4769484370512e27517c563d58261c181f1d023d080f
0a051412fe1d2349306fa66f3901a068a26f3a1119180e0c111a12111b11
08191d1a2044674a3e5f3f1f0c1a25020f212009121c132428fe95050235
618a>PBAAAA+Calibri AddT42Char 
2 606 44 <000100acfffa04500514002f00b8b43f3101230cb8ffe8b310014d0cb8ff
f0b30f014d0cb8fff0b30d014d0cb8fff6b30c014d0cb8ffe8b30b014d0c
b80211401c17240b1810014d0b100f014d0b100d014d0b0a0c014d0b180b
014d0bb802104017004015014d004013014d00401011014c00400c014d00
17b8ffc0b315014d17b8ffc0b613014d172a5224b8012c400fc00c01d00c
010c0c121d5212550555003f3f3f12392f5d71ed3f012f2b2bd42b2b2b2b
e12b2b2b2b2b3210e12b2b2b2b2b3231305d25140e0223222e0235112111
140e0223222e023511343e0233321e0215112111343e0233321e02150450
081421181a201408fdb308142119182214080814221819211408024d0814
201a182114081a080c070505070c08023efdc2080c070505070c0804da08
0c070505070c08fdfa0206080c070505070c0800>PBAAAA+Calibri AddT42Char 
2 926 75 <00020063ffed04e8052100130027007c401a141810014d14100f014d1414
0d014d14120c014d14180b014d14b80233400920003000800003001eb8ff
e8b310014d1eb8fff0b30f014d1eb8ffecb30d014d1eb8ffeeb30c014d1e
b8ffe8b30b014d1ebb0233000a00190129b20f5323b8012bb10556003fed
3fed012fe12b2b2b2b2bd45de12b2b2b2b2b313001140e0223222e023534
3e0233321e0207342e0223220e0215141e0233323e0204e84a93de9492d5
8b444a94de948fd48d45b5275b987070985f29265a9772719a5e2802969d
fcb15f57a6f6a099faaf5f56a5f3a96ebd8b4e548cbb6772c08b4d548fbc
>PBAAAA+Calibri AddT42Char 
2 0 0 <00050000fe7303d2050e000300070039004d004e005bbc000d0152001600
3a01b5b5154444082d07be0143000200200154000800010143400f04020d
b71a1a3f23b735068d031149b8012db43f078d0202003ffddefdce2ffdde
ed12392fed012fdde1dee110f1ce11392f33e1d4e1313001112111011121
1101140e020707140623222e02352726363333323e0235342623220e0223
222e02353436373e0333321e0203140e0223222e0235343e0233321e0201
03d2fc5a034ffd06027e233f5633051e1a0f140d0605021c18122d3c2510
535b253c2e1d0703070603050807283742224b6c4522da07111d15161d12
0808121d16151d1107fddb050efaf2050efb43046cfb9403063b5c3f2403
980a0802040606b81e18192a3b2149560f1310040b13101116080712110c
28445cfd86151c120808121c15151d120808121dfd4d>PBAAAA+Calibri AddT42Char 
PBAAAA+Calibri /CharStrings get begin
/zero 1004 def
/one 1005 def
/two 1006 def
/three 1007 def
/four 1008 def
/five 1009 def
/H 44 def
/O 75 def
end
PBAAAA+Calibri /Encoding get
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 72 /H put
dup 79 /O put
pop
end
%ADOEndSubsetFont
/VALTWH+Calibri /PBAAAA+Calibri findfont ct_VMDictPut
/VALTWH+Calibri*1 
[48{/.notdef}rp /zero /one /two /three /four /five 18{/.notdef}rp 
/H 6{/.notdef}rp /O 176{/.notdef}rp]
VALTWH+Calibri nf
VALTWH+Calibri*1 [7.2837 0 0 -7.2837 0 0 ]msf
48.1442 43.7853 mo
(H)sh
VALTWH+Calibri*1 [4.8558 0 0 -4.8558 0 0 ]msf
52.6601 43.7853 mo
(1)sh
VALTWH+Calibri*1 [7.2837 0 0 -7.2837 0 0 ]msf
74.5914 43.8172 mo
(H)sh
VALTWH+Calibri*1 [4.8558 0 0 -4.8558 0 0 ]msf
79.1073 43.8172 mo
(2)sh
VALTWH+Calibri*1 [7.2837 0 0 -7.2837 0 0 ]msf
10.2778 91.9033 mo
(H)sh
VALTWH+Calibri*1 [4.8558 0 0 -4.8558 0 0 ]msf
14.7936 91.9033 mo
(5)sh
VALTWH+Calibri*1 [7.2837 0 0 -7.2837 0 0 ]msf
20.6096 138.087 mo
(H)sh
VALTWH+Calibri*1 [4.8558 0 0 -4.8558 0 0 ]msf
25.1255 138.087 mo
(4)sh
VALTWH+Calibri*1 [7.2837 0 0 -7.2837 0 0 ]msf
61.9292 56.7777 mo
(O)sh
VALTWH+Calibri*1 [4.8558 0 0 -4.8558 0 0 ]msf
66.7364 56.7777 mo
(0)sh
VALTWH+Calibri*1 [7.2837 0 0 -7.2837 0 0 ]msf
48.5121 121.913 mo
(O)sh
VALTWH+Calibri*1 [4.8558 0 0 -4.8558 0 0 ]msf
53.3194 121.913 mo
(3)sh
78.5894 107.845 mo
78.5894 104.627 81.2961 102.018 84.6349 102.018 cv
87.9736 102.018 90.6802 104.627 90.6802 107.845 cv
90.6802 111.063 87.9736 113.672 84.6349 113.672 cv
81.2961 113.672 78.5894 111.063 78.5894 107.845 cv
0 1 1 0 cmyk
ef
78.5894 107.845 mo
78.3952 107.845 li
78.395 106.181 79.0958 104.673 80.2253 103.585 cv
81.3546 102.496 82.9144 101.824 84.6348 101.824 cv
86.3551 101.824 87.9151 102.496 89.0444 103.585 cv
90.1738 104.673 90.8746 106.181 90.8745 107.845 cv
90.8746 109.509 90.1738 111.017 89.0444 112.105 cv
87.9151 113.194 86.3551 113.866 84.6348 113.866 cv
82.9144 113.866 81.3546 113.194 80.2253 112.105 cv
79.0958 111.017 78.395 109.509 78.3952 107.845 cv
78.5894 107.845 li
78.7836 107.845 li
78.7837 109.399 79.4362 110.805 80.4949 111.826 cv
81.5536 112.846 83.0164 113.478 84.6348 113.478 cv
86.2532 113.478 87.7161 112.846 88.7748 111.826 cv
89.8333 110.805 90.4858 109.399 90.486 107.845 cv
90.4858 106.291 89.8333 104.885 88.7748 103.865 cv
87.7161 102.844 86.2532 102.212 84.6348 102.212 cv
83.0164 102.212 81.5536 102.844 80.4949 103.865 cv
79.4362 104.885 78.7837 106.291 78.7836 107.845 cv
78.5894 107.845 li
1 .816159 .15967 .0319219 cmyk
f
104.519 133.532 mo
104.519 131.923 105.824 130.619 107.433 130.619 cv
109.042 130.619 110.346 131.923 110.346 133.532 cv
110.346 135.141 109.042 136.446 107.433 136.446 cv
105.824 136.446 104.519 135.141 104.519 133.532 cv
.808743 .585351 0 0 cmyk
ef
104.519 133.532 mo
104.325 133.532 li
104.325 131.816 105.716 130.425 107.433 130.424 cv
109.149 130.425 110.54 131.816 110.54 133.532 cv
110.54 135.248 109.149 136.64 107.433 136.64 cv
105.716 136.64 104.325 135.248 104.325 133.532 cv
104.519 133.532 li
104.713 133.532 li
104.716 135.034 105.931 136.249 107.433 136.251 cv
108.934 136.249 110.149 135.034 110.152 133.532 cv
110.149 132.031 108.934 130.816 107.433 130.813 cv
105.931 130.816 104.716 132.031 104.713 133.532 cv
104.519 133.532 li
1 .816159 .15967 .0319219 cmyk
f
104.665 80.8471 mo
104.665 79.2381 105.97 77.9336 107.578 77.9336 cv
109.187 77.9336 110.492 79.2381 110.492 80.8471 cv
110.492 82.4559 109.187 83.7604 107.578 83.7604 cv
105.97 83.7604 104.665 82.4559 104.665 80.8471 cv
.808743 .585351 0 0 cmyk
ef
104.665 80.847 mo
104.471 80.847 li
104.471 79.1308 105.862 77.7395 107.578 77.7393 cv
109.295 77.7395 110.686 79.1308 110.686 80.847 cv
110.686 82.5633 109.295 83.9546 107.578 83.9547 cv
105.862 83.9546 104.471 82.5633 104.471 80.847 cv
104.665 80.847 li
104.859 80.847 li
104.862 82.3485 106.077 83.5635 107.578 83.5663 cv
109.08 83.5635 110.295 82.3485 110.298 80.847 cv
110.295 79.3455 109.08 78.1305 107.578 78.1278 cv
106.077 78.1305 104.862 79.3455 104.859 80.847 cv
104.665 80.847 li
1 .816159 .15967 .0319219 cmyk
f
.750271 .679713 .654902 .901945 cmyk
%ADOBeginSubsetFont: PBAAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal VALTWH+Calibri gcheck setglobal} if
2 2402 970 <0002006bffed03bd0520003400480099b9004affc040170f024d604a012b
753f01663f01433f01343f01243f013fb8024340140c1c1c0c7a35016a35
014b35013a35012b350135b80243b670000120000100b8ffe0b30f014d00
b8ffe8b70f024d00300c010cb8fffa400a0f024d0c3aff30300526b80100
b2135944b80115b1055f003fed3fed12392fed012f2b5dd42b2b5d5de15d
5d5d5d5d12392f10e15d5d5d5d5d3231305d2b01140e0223222e0435343e
0433321e0615140e0223222e0223220e02073e0333321e0207342e022322
0e0207141e0233323e0203bd346ca671517c5c3d2510122e4f77a66e254c
402c0e07040201070b090b26364d335d865529031a414d563169905926ae
17365a42254a453f1a213f5e3f405e3e1d01a3559f7949284a6c8aa45e53
aa9e8b673c090f120b0d0f130e121a10080e110e4c80a95c0f1e180f3965
89603a5f42240d171f1281ae692d30516500>VALTWH+Calibri AddT42Char 
2 5626 1010 <ffff006bffed03bd0520020603ca0000>VALTWH+Calibri AddT42Char 
2 5642 1011 <00010063fffa03af050e001f00d7b90011ffe8400a1121014c111010014d
11b8ffe8b30f014d11b8fff0b30d014d11b8ffe8b30c014d11b8fff8400a
0b014d74110126110110b8ffe8400a1121014c101010014d10b8ffe8b30f
014d10b8fff0b30d014d10b8ffe8400b0b0c014c75100126100106b8fff0
b30b014d21b8ffc0b60f024d60210100b8ffc0b310014d00b8ffd8b40b01
4d0015b8ffc0b30c014d15b8ffe8b30b014d15b8ffe8b30f014d15b8ffe0
b50f024d150511b8012db31a510b55003f3fed32012f2b2b2b2bcd2b2b31
305d2b2b5d5d2b2b2b2b2b5d5d2b2b2b2b2b2b01140e0207010e03232226
2636370121222635343e023321321e0203af03050906fe2e050f17241a22
2611020601eafd931313050a0e0902f20e150b0604c4121d1b190efbce0c
0f0903060d130d044a2824131c130906121c>VALTWH+Calibri AddT42Char 
2 2750 972 <00030052ffed03ba05210027003700470182b90036fff0b40f11014c36b8
fff0b40c0d014c35b8fff0b40f11014c35b8fff0b40c0d014c34b8fff0b4
0f11014c34b8fff0b40c0d014c33b8fff0b311014d33b8fff0b30f014d49
b8ffc0b60f024d60490130b8fff0b40c0d014c30b8fff0b40f10014c30b8
fff0b40c0d014c30b8ffe0b30b014d30b8021940191428100c0d014c2810
0f10014c28100c0d014c28200b014d28b80218401a1e0f231e1e180f014d
14180f014d141e141e0a38100c0d014c38b8ffd040151d014d38100f1001
4c38100c0d014c38200b014d38ba02430000ffd4b30f024d00b8ffe0b30f
014d00b8ffc0b314014d00b8ffc0b310014d00b8ffc0b30d014d00b8ffc0
b40b014d0042b8fff0400a0c0d014c42301d014d42b8fff0b40f10014c42
b8fff0b40c0d014c42b8ffe0b30b014d42b8024340110a400b014d0a353d
052dfd195945fd055f003fed3fed123939012f2be12b2b2b2b2bd42b2b2b
2b2b2be12b2b2b2b2b1239392f2f2b2b12393910e12b2b2b2b10e12b2b2b
2b31305d2b002b2b2b2b2b2b2b2b01140e0223222e0235343e02372e0335
343e0233321e0215140e02071e0303342e0223220615141e021736361334
2e02270e0315141633323603ba3c71a66b649e6e3a284b6e453c5c402131
639966628f5d2c21405d3c476f4b27d81d3853356c6f1b39573c656c2a22
4567443f5f3d1f85848083014c54835a2e2a52784d3d66564b221f45515c
36447758332f516e3f335e544920234a555f025f2a443019625527433c39
1f347efda22e4b413d211f3e42492c616a6b>VALTWH+Calibri AddT42Char 
2 5960 1012 <ffff0052ffed03ba0521020603cc0000>VALTWH+Calibri AddT42Char 
VALTWH+Calibri /CharStrings get begin
/six 1010 def
/seven 1011 def
/eight 1012 def
end
VALTWH+Calibri /Encoding get
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/VALTWH+Calibri*1 
[48{/.notdef}rp /zero /one /two /three /four /five /six 
/seven /eight 15{/.notdef}rp /H 6{/.notdef}rp /O 176{/.notdef}rp]
VALTWH+Calibri nf
VALTWH+Calibri*1 [7.2837 0 0 -7.2837 0 0 ]msf
104.964 94.9924 mo
(H)sh
VALTWH+Calibri*1 [4.8558 0 0 -4.8558 0 0 ]msf
109.48 94.9924 mo
(7)sh
VALTWH+Calibri*1 [7.2837 0 0 -7.2837 0 0 ]msf
104.055 126.289 mo
(H)sh
VALTWH+Calibri*1 [4.8558 0 0 -4.8558 0 0 ]msf
108.571 126.289 mo
(8)sh
VALTWH+Calibri*1 [7.2837 0 0 -7.2837 0 0 ]msf
80.948 97.846 mo
(O)sh
VALTWH+Calibri*1 [4.8558 0 0 -4.8558 0 0 ]msf
85.7552 97.846 mo
(6)sh
.825481 lw
0 lc
0 lj
8 ml
[] 0 dsh
true sadj
71.1358 66.2068 mo
104.685 80.8879 li
@
65.0786 72.0338 mo
55.9372 103.737 li
@
59.1069 66.2371 mo
58.6711 66.8803 li
58.5103 66.7714 li
58.946 66.1281 li
59.1069 66.2371 li
58.3443 67.3626 mo
57.9085 68.0059 li
57.7477 67.8969 li
58.1834 67.2537 li
58.3443 67.3626 li
57.5817 68.4883 mo
57.1459 69.1315 li
56.9852 69.0226 li
57.4209 68.3794 li
57.5817 68.4883 li
56.8191 69.614 mo
56.3834 70.2572 li
56.2226 70.1483 li
56.6583 69.505 li
56.8191 69.614 li
56.0566 70.7396 mo
55.6209 71.3828 li
55.46 71.2739 li
55.8958 70.6306 li
56.0566 70.7396 li
55.294 71.8652 mo
54.8583 72.5085 li
54.6974 72.3995 li
55.1332 71.7563 li
55.294 71.8652 li
54.5314 72.9908 mo
54.0957 73.634 li
53.9349 73.5251 li
54.3707 72.8819 li
54.5314 72.9908 li
53.7689 74.1165 mo
53.3331 74.7597 li
53.1724 74.6508 li
53.6081 74.0076 li
53.7689 74.1165 li
53.0063 75.2421 mo
52.5706 75.8853 li
52.4098 75.7764 li
52.8455 75.1332 li
53.0063 75.2421 li
52.2438 76.3678 mo
51.808 77.011 li
51.6472 76.902 li
52.0829 76.2588 li
52.2438 76.3678 li
51.4812 77.4933 mo
51.0454 78.1366 li
50.8846 78.0276 li
51.3203 77.3844 li
51.4812 77.4933 li
50.7186 78.619 mo
50.2829 79.2622 li
50.1221 79.1533 li
50.5579 78.5101 li
50.7186 78.619 li
49.956 79.7447 mo
49.5203 80.3879 li
49.3595 80.279 li
49.7953 79.6357 li
49.956 79.7447 li
49.1935 80.8703 mo
48.7578 81.5135 li
48.5969 81.4045 li
49.0327 80.7613 li
49.1935 80.8703 li
48.4309 81.9959 mo
47.9952 82.6391 li
47.8343 82.5302 li
48.2701 81.887 li
48.4309 81.9959 li
47.6684 83.1215 mo
47.2326 83.7647 li
47.0718 83.6558 li
47.5076 83.0126 li
47.6684 83.1215 li
46.9058 84.2472 mo
46.47 84.8904 li
46.3093 84.7815 li
46.745 84.1383 li
46.9058 84.2472 li
46.1432 85.3728 mo
45.7075 86.016 li
45.5467 85.9071 li
45.9824 85.2638 li
46.1432 85.3728 li
45.3807 86.4984 mo
44.9449 87.1417 li
44.7841 87.0327 li
45.2198 86.3895 li
45.3807 86.4984 li
44.6181 87.624 mo
44.1824 88.2673 li
44.0215 88.1583 li
44.4573 87.5151 li
44.6181 87.624 li
43.8555 88.7497 mo
43.4198 89.3929 li
43.259 89.284 li
43.6948 88.6408 li
43.8555 88.7497 li
43.0929 89.8754 mo
42.6572 90.5186 li
42.4964 90.4096 li
42.9322 89.7664 li
43.0929 89.8754 li
42.3305 91.001 mo
41.8947 91.6442 li
41.7338 91.5352 li
42.1696 90.892 li
42.3305 91.001 li
41.5679 92.1266 mo
41.1321 92.7698 li
40.9713 92.6609 li
41.407 92.0177 li
41.5679 92.1266 li
40.8053 93.2522 mo
40.3695 93.8954 li
40.2087 93.7865 li
40.6445 93.1433 li
40.8053 93.2522 li
40.0427 94.3779 mo
39.6069 95.0211 li
39.4462 94.9122 li
39.8819 94.2689 li
40.0427 94.3779 li
39.2801 95.5035 mo
38.8444 96.1467 li
38.6836 96.0378 li
39.1193 95.3945 li
39.2801 95.5035 li
38.5176 96.6291 mo
38.0819 97.2723 li
37.921 97.1634 li
38.3568 96.5202 li
38.5176 96.6291 li
37.755 97.7547 mo
37.3193 98.3979 li
37.1584 98.289 li
37.5942 97.6458 li
37.755 97.7547 li
36.9924 98.8804 mo
36.5567 99.5236 li
36.3959 99.4147 li
36.8317 98.7715 li
36.9924 98.8804 li
36.2299 100.006 mo
35.7941 100.649 li
35.6334 100.54 li
36.0691 99.897 li
36.2299 100.006 li
35.4674 101.132 mo
35.0316 101.775 li
34.8708 101.666 li
35.3065 101.023 li
35.4674 101.132 li
34.7048 102.257 mo
34.269 102.901 li
34.1082 102.792 li
34.5439 102.148 li
34.7048 102.257 li
33.9422 103.383 mo
33.5065 104.026 li
33.3456 103.917 li
33.7814 103.274 li
33.9422 103.383 li
33.1796 104.509 mo
32.7439 105.152 li
32.5831 105.043 li
33.0189 104.4 li
33.1796 104.509 li
32.4171 105.634 mo
31.9813 106.277 li
31.8205 106.168 li
32.2563 105.525 li
32.4171 105.634 li
31.6546 106.76 mo
31.2188 107.403 li
31.0579 107.294 li
31.4937 106.651 li
31.6546 106.76 li
30.892 107.885 mo
30.4562 108.529 li
30.2954 108.42 li
30.7311 107.776 li
30.892 107.885 li
30.1294 109.011 mo
29.6936 109.654 li
29.5329 109.545 li
29.9686 108.902 li
30.1294 109.011 li
29.3668 110.137 mo
28.931 110.78 li
28.7703 110.671 li
29.206 110.028 li
29.3668 110.137 li
28.6043 111.262 mo
28.1685 111.906 li
28.0077 111.797 li
28.4435 111.153 li
28.6043 111.262 li
27.8417 112.388 mo
27.406 113.031 li
27.2451 112.922 li
27.6809 112.279 li
27.8417 112.388 li
27.0791 113.514 mo
26.6434 114.157 li
26.4825 114.048 li
26.9183 113.405 li
27.0791 113.514 li
26.3166 114.639 mo
25.8808 115.282 li
25.7201 115.173 li
26.1558 114.53 li
26.3166 114.639 li
25.554 115.765 mo
25.1182 116.408 li
24.9575 116.299 li
25.3932 115.656 li
25.554 115.765 li
24.7915 116.89 mo
24.3557 117.534 li
24.1949 117.425 li
24.6306 116.781 li
24.7915 116.89 li
24.0289 118.016 mo
23.5932 118.659 li
23.4323 118.55 li
23.868 117.907 li
24.0289 118.016 li
23.2663 119.142 mo
22.8306 119.785 li
22.6698 119.676 li
23.1055 119.033 li
23.2663 119.142 li
22.5037 120.267 mo
22.068 120.911 li
21.9072 120.802 li
22.343 120.158 li
22.5037 120.267 li
21.7412 121.393 mo
21.3054 122.036 li
21.1446 121.927 li
21.5804 121.284 li
21.7412 121.393 li
20.9787 122.519 mo
20.5429 123.162 li
20.3821 123.053 li
20.8178 122.41 li
20.9787 122.519 li
20.2161 123.644 mo
19.7803 124.287 li
19.6195 124.178 li
20.0552 123.535 li
20.2161 123.644 li
19.4535 124.77 mo
19.0177 125.413 li
18.857 125.304 li
19.2927 124.661 li
19.4535 124.77 li
18.6909 125.896 mo
18.2552 126.539 li
18.0944 126.43 li
18.5302 125.787 li
18.6909 125.896 li
17.9284 127.021 mo
17.4927 127.664 li
17.3318 127.555 li
17.7676 126.912 li
17.9284 127.021 li
17.1658 128.147 mo
16.7301 128.79 li
16.5692 128.681 li
17.005 128.038 li
17.1658 128.147 li
16.4033 129.272 mo
15.9675 129.916 li
15.8067 129.807 li
16.2424 129.163 li
16.4033 129.272 li
15.6407 130.398 mo
15.2049 131.041 li
15.0442 130.932 li
15.4799 130.289 li
15.6407 130.398 li
f
.194231 lw
[.776924 .582693 ] 0 dsh
60.7812 70.31 mo
51.6398 102.013 li
@
80.2928 103.768 mo
79.3643 102.522 li
79.5201 102.406 li
80.4485 103.652 li
80.2928 103.768 li
79.0161 102.055 mo
78.9001 101.899 li
79.0558 101.783 li
79.1719 101.939 li
79.0161 102.055 li
78.552 101.432 mo
78.4358 101.276 li
78.5916 101.16 li
78.7077 101.316 li
78.552 101.432 li
78.0877 100.809 mo
77.1593 99.563 li
77.315 99.4469 li
78.2435 100.693 li
78.0877 100.809 li
76.8111 99.0957 mo
76.6951 98.94 li
76.8509 98.8239 li
76.9669 98.9797 li
76.8111 99.0957 li
76.3469 98.4728 mo
76.2308 98.3171 li
76.3866 98.201 li
76.5026 98.3568 li
76.3469 98.4728 li
75.8827 97.8498 mo
74.9543 96.6038 li
75.11 96.4878 li
76.0385 97.7338 li
75.8827 97.8498 li
74.6061 96.1366 mo
74.49 95.9808 li
74.6458 95.8648 li
74.7618 96.0205 li
74.6061 96.1366 li
74.1419 95.5136 mo
74.0258 95.3578 li
74.1816 95.2418 li
74.2976 95.3975 li
74.1419 95.5136 li
73.6776 94.8906 mo
72.7492 93.6447 li
72.9049 93.5286 li
73.8334 94.7745 li
73.6776 94.8906 li
72.4011 93.1774 mo
72.285 93.0217 li
72.4408 92.9056 li
72.5568 93.0614 li
72.4011 93.1774 li
71.9369 92.5544 mo
71.8208 92.3987 li
71.9765 92.2826 li
72.0926 92.4384 li
71.9369 92.5544 li
71.4726 91.9314 mo
70.5442 90.6854 li
70.7 90.5694 li
71.6284 91.8154 li
71.4726 91.9314 li
70.1961 90.2182 mo
70.08 90.0625 li
70.2358 89.9464 li
70.3518 90.1021 li
70.1961 90.2182 li
69.7318 89.5952 mo
69.6158 89.4395 li
69.7715 89.3234 li
69.8876 89.4792 li
69.7318 89.5952 li
69.2676 88.9722 mo
68.3392 87.7262 li
68.4949 87.6102 li
69.4234 88.8562 li
69.2676 88.9722 li
67.991 87.259 mo
67.8749 87.1032 li
68.0307 86.9872 li
68.1467 87.143 li
67.991 87.259 li
67.5268 86.6361 mo
67.4108 86.4803 li
67.5665 86.3643 li
67.6826 86.52 li
67.5268 86.6361 li
67.0626 86.0131 mo
66.1341 84.7671 li
66.2899 84.651 li
67.2183 85.897 li
67.0626 86.0131 li
65.786 84.2998 mo
65.6699 84.1441 li
65.8257 84.028 li
65.9417 84.1838 li
65.786 84.2998 li
65.3218 83.6768 mo
65.2057 83.5211 li
65.3614 83.405 li
65.4776 83.5608 li
65.3218 83.6768 li
64.8576 83.0539 mo
63.9291 81.8079 li
64.0849 81.6919 li
65.0133 82.9379 li
64.8576 83.0539 li
63.581 81.3407 mo
63.4649 81.1849 li
63.6207 81.0689 li
63.7367 81.2246 li
63.581 81.3407 li
63.1167 80.7177 mo
63.0007 80.5619 li
63.1564 80.4459 li
63.2725 80.6016 li
63.1167 80.7177 li
62.6526 80.0947 mo
61.7241 78.8487 li
61.8799 78.7326 li
62.8083 79.9786 li
62.6526 80.0947 li
61.376 78.3815 mo
61.2599 78.2258 li
61.4156 78.1097 li
61.5317 78.2655 li
61.376 78.3815 li
60.9117 77.7585 mo
60.7957 77.6028 li
60.9514 77.4867 li
61.0675 77.6425 li
60.9117 77.7585 li
60.4476 77.1355 mo
59.5191 75.8895 li
59.6749 75.7735 li
60.6033 77.0195 li
60.4476 77.1355 li
59.1709 75.4223 mo
59.0549 75.2666 li
59.2106 75.1505 li
59.3267 75.3062 li
59.1709 75.4223 li
58.7067 74.7993 mo
58.5907 74.6436 li
58.7464 74.5275 li
58.8625 74.6833 li
58.7067 74.7993 li
58.2425 74.1763 mo
57.314 72.9303 li
57.4698 72.8143 li
58.3982 74.0603 li
58.2425 74.1763 li
56.9659 72.4631 mo
56.8499 72.3073 li
57.0056 72.1913 li
57.1217 72.347 li
56.9659 72.4631 li
56.5017 71.8401 mo
56.3856 71.6844 li
56.5414 71.5684 li
56.6575 71.724 li
56.5017 71.8401 li
56.0375 71.2172 mo
55.109 69.9712 li
55.2648 69.8551 li
56.1932 71.1011 li
56.0375 71.2172 li
54.7609 69.5039 mo
54.6449 69.3482 li
54.8006 69.2321 li
54.9167 69.3879 li
54.7609 69.5039 li
54.2967 68.8809 mo
54.1806 68.7252 li
54.3364 68.6091 li
54.4524 68.7649 li
54.2967 68.8809 li
53.8325 68.2579 mo
52.904 67.012 li
53.0598 66.896 li
53.9882 68.1419 li
53.8325 68.2579 li
52.5558 66.5448 mo
52.4398 66.389 li
52.5955 66.273 li
52.7116 66.4287 li
52.5558 66.5448 li
52.0917 65.9218 mo
51.9756 65.766 li
52.1314 65.65 li
52.2474 65.8057 li
52.0917 65.9218 li
51.6274 65.2988 mo
50.699 64.0528 li
50.8548 63.9368 li
51.7831 65.1827 li
51.6274 65.2988 li
50.3508 63.5856 mo
50.2348 63.4299 li
50.3905 63.3138 li
50.5066 63.4696 li
50.3508 63.5856 li
49.8867 62.9626 mo
49.7706 62.8069 li
49.9264 62.6908 li
50.0424 62.8466 li
49.8867 62.9626 li
49.4224 62.3396 mo
48.494 61.0936 li
48.6497 60.9776 li
49.5782 62.2236 li
49.4224 62.3396 li
48.1458 60.6264 mo
48.0298 60.4707 li
48.1855 60.3546 li
48.3016 60.5104 li
48.1458 60.6264 li
47.6816 60.0034 mo
47.5655 59.8477 li
47.7213 59.7316 li
47.8373 59.8874 li
47.6816 60.0034 li
47.2174 59.3804 mo
46.289 58.1344 li
46.4447 58.0184 li
47.3731 59.2644 li
47.2174 59.3804 li
45.9408 57.6672 mo
45.8248 57.5114 li
45.9805 57.3954 li
46.0966 57.5511 li
45.9408 57.6672 li
45.4766 57.0443 mo
45.3605 56.8885 li
45.5163 56.7725 li
45.6323 56.9282 li
45.4766 57.0443 li
45.0124 56.4213 mo
44.084 55.1753 li
44.2397 55.0592 li
45.1682 56.3052 li
45.0124 56.4213 li
43.7358 54.708 mo
43.6197 54.5523 li
43.7755 54.4362 li
43.8915 54.592 li
43.7358 54.708 li
43.2716 54.085 mo
43.1555 53.9294 li
43.3113 53.8133 li
43.4273 53.969 li
43.2716 54.085 li
42.8073 53.4621 mo
41.8789 52.2161 li
42.0346 52.1001 li
42.9631 53.3461 li
42.8073 53.4621 li
41.5308 51.7489 mo
41.4147 51.5931 li
41.5705 51.4771 li
41.6865 51.6328 li
41.5308 51.7489 li
41.0666 51.1259 mo
40.9505 50.9701 li
41.1063 50.8541 li
41.2223 51.0098 li
41.0666 51.1259 li
40.6023 50.5029 mo
39.6739 49.2569 li
39.8296 49.1409 li
40.7581 50.3868 li
40.6023 50.5029 li
39.3258 48.7897 mo
39.2097 48.6339 li
39.3655 48.5179 li
39.4815 48.6737 li
39.3258 48.7897 li
38.8615 48.1667 mo
38.7455 48.0109 li
38.9012 47.8949 li
39.0173 48.0507 li
38.8615 48.1667 li
38.3973 47.5437 mo
37.8201 46.7691 li
37.9758 46.653 li
38.5531 47.4277 li
38.3973 47.5437 li
f
[1.55385 .582693 .194231 .582693 .194231 .582693 ] 0 dsh
69.3556 70.31 mo
57.7094 107.84 li
@
.750271 .679713 .654902 .901945 cmyk
%ADOBeginSubsetFont: PBAAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal VALTWH+Calibri gcheck setglobal} if

2 0 3 <> VALTWH+Calibri AddT42Char 
2 1166 100 <0001000ffffa03d7050e00220065b718400d014d181100b8ffc0b40d014d
0006b8ffe8b310014d06b8fff0b30f014d06b8fff0b30d014d06b8fff6b3
0c014d06b8ffe8b30b014d06ba02110011ffc0b50d014d110612b80128b3
1d510c55003f3fed32012f2bf12b2b2b2b2bc52b10c42b313001140e0223
2111140e0223222e02351121222e0235343e023321321e0203d704090d08
fe940814211918221408fe94080d080505080d080384080d090404c4131c
1108fb9e080c070505070c08046208111c13131d120808121d00>VALTWH+Calibri AddT42Char 
2 1372 286 <0002005dffed039903ca002b003400ae402a2f363f366f360313200d014d
13200f014d1313212c100c014d2c180b014d2c100d014d2c100f10014c2c
b801f9b5442ba42b022bb8fff0b50f014d2b3404b8ffe0b30d014d04b8ff
eeb30c014d04b8ffe0b30b014d04b8ffe8b40f10014c04b8020a4021212c
c78004900402c00401d0040104041c2fdc264a18ea600e700e020e09ea1c
4d003ffdd45ded3fed12392f5d7172ed012fe12b2b2b2b32dd2b5de12b2b
2b2b12392f2b2b31305d0114062321141e0233323e0233321e0215140e06
23222e0235343e0233321e021527362623220e020703992719fdb21e4670
514064492f0c070b06030203070b365671406fa7723a3c71a0636a95602d
a60379773d5c3e2202020227214b78562e151a15070e19120d130f0c0b19
18133e7ab87a74b9814544739b581382942e4c653700>VALTWH+Calibri AddT42Char 
2 1828 393 <00020099fe9403d503ca002a003d0080b53f3f0121360ab8fff0b30d014d
0ab8fff6b30c014d0ab8fff0b40f10014c0ab8ffe8b30b014d0ab801f840
17152b200d014d2b120c014d2b180f10014c2b180b014d2bb8020a400900
150a363521040530b80105b6264a1b49104f39b80105b1054d003fed3f3f
3fed121739012fd4e12b2b2b2b10e12b2b2b2b323931305d01140e022322
2e022711140e0223222e023511343e0233321e0215153e0333321e020734
2e0223220e020711161633323e0203d53363925e28444140240812201918
20130706121c14151b1207294c4d512d628a5728ae15335640203e404627
447a433e59371a01e976bc834710223423fe3e080c080404080c0804e909
0b080303080b09792a3e29154c84af754581643c13294331fe9a53583c64
7c00>VALTWH+Calibri AddT42Char 
2 2130 455 <00010022fe94037c03bc00240052b9001bfff040350b014d371b01291b01
18180b014d261801260e360e022709011a400b014d3a1a0119380b014d3b
19011f49190a13490a4b044f004b003f3f3f3f12393f31305d2b5d2b015d
5d5d2b5d5d2b2103060623222e023713262627012634363633321e021701
33133e023332161614070233780631321a201102067c091003febf081024
1e1e22140905010103f8061122201c241106feb51011050c140e01390412
0a035c15180e0503080f0dfd2e02d6130b05050e1812>VALTWH+Calibri AddT42Char 
VALTWH+Calibri /CharStrings get begin
/space 3 def
/T 100 def
/e 286 def
/p 393 def
/y 455 def
end
VALTWH+Calibri /Encoding get
dup 32 /space put
dup 84 /T put
dup 101 /e put
dup 112 /p put
dup 121 /y put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/VALTWH+Calibri*1 
[32{/.notdef}rp /space 15{/.notdef}rp /zero /one /two /three /four 
/five /six /seven /eight 15{/.notdef}rp /H 6{/.notdef}rp /O 
4{/.notdef}rp /T 16{/.notdef}rp /e 10{/.notdef}rp /p 8{/.notdef}rp /y 
134{/.notdef}rp]
VALTWH+Calibri nf
VALTWH+Calibri*1 [7.2837 0 0 -7.2837 0 0 ]msf
91.2283 63.6954 mo
(Type 66)
[3.20483 3.30172 3.83628 3.64186 1.65338 3.69068 0 ]xsh
.404648 lw
[] 0 dsh
102.866 67.2023 mo
88.5461 71.3163 li
.808743 .585351 0 0 cmyk
@
88.5996 70.0377 mo
86.6015 71.8748 li
89.2701 72.3713 li
cp
ef
.750271 .679713 .654902 .901945 cmyk
VALTWH+Calibri*1 [7.2837 0 0 -7.2837 0 0 ]msf
54.2806 135.867 mo
(Type 67)
[3.20482 3.30172 3.83628 3.64186 1.65338 3.69068 0 ]xsh
65.9644 127.627 mo
67.7469 90.0544 li
.808743 .585351 0 0 cmyk
@
68.9406 90.5162 mo
67.8427 88.0337 li
66.5155 90.4013 li
cp
ef
.750271 .679713 .654902 .901945 cmyk
VALTWH+Calibri*1 [7.2837 0 0 -7.2837 0 0 ]msf
12.3006 65.716 mo
(Type 56)
[3.20482 3.30172 3.83628 3.64186 1.65339 3.69068 0 ]xsh
23.962 69.2417 mo
38.9627 91.6997 li
.808743 .585351 0 0 cmyk
@
39.7475 90.6887 mo
40.0866 93.3821 li
37.7287 92.037 li
cp
ef
.750271 .679713 .654902 .901945 cmyk
%ADOBeginSubsetFont: PBAAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal VALTWH+Calibri gcheck setglobal} if
2 2332 882 <0001004501b4022e023d000f000eb400070bed04002fed012fcd31300114
06232122263534363321321e02022e1211fe5e1212121201a2080d090501
f9271e1f26261e06111a>VALTWH+Calibri AddT42Char 
VALTWH+Calibri /CharStrings get begin
/hyphen 882 def
end
VALTWH+Calibri /Encoding get
dup 45 /hyphen put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/VALTWH+Calibri*1 
[32{/.notdef}rp /space 12{/.notdef}rp /hyphen 2{/.notdef}rp /zero /one /two 
/three /four /five /six /seven /eight 15{/.notdef}rp /H 
6{/.notdef}rp /O 4{/.notdef}rp /T 16{/.notdef}rp /e 10{/.notdef}rp /p 
8{/.notdef}rp /y 134{/.notdef}rp]
VALTWH+Calibri nf
VALTWH+Calibri*1 [7.2837 0 0 -7.2837 0 0 ]msf
43.7324 166.528 mo
(OO)
[4.80726 0 ]xsh
53.3469 166.528 mo
(-)sh
55.583 166.528 mo
(OH)
[4.80726 0 ]xsh
218.533 67.4937 mo
218.533 64.2755 221.239 61.6667 224.578 61.6667 cv
227.917 61.6667 230.624 64.2755 230.624 67.4937 cv
230.624 70.7118 227.917 73.3206 224.578 73.3206 cv
221.239 73.3206 218.533 70.7118 218.533 67.4937 cv
0 1 1 0 cmyk
ef
218.533 67.4937 mo
218.339 67.4937 li
218.338 65.8294 219.039 64.3216 220.169 63.2335 cv
221.298 62.1449 222.858 61.4725 224.578 61.4725 cv
226.299 61.4725 227.858 62.1449 228.988 63.2335 cv
230.117 64.3216 230.818 65.8294 230.818 67.4937 cv
230.818 69.1579 230.117 70.6656 228.988 71.7537 cv
227.858 72.8424 226.299 73.5148 224.578 73.5148 cv
222.858 73.5148 221.298 72.8424 220.169 71.7537 cv
219.039 70.6656 218.338 69.1579 218.339 67.4937 cv
218.533 67.4937 li
218.727 67.4937 li
218.727 69.0476 219.38 70.4533 220.438 71.4741 cv
221.497 72.4944 222.96 73.1263 224.578 73.1264 cv
226.197 73.1263 227.659 72.4944 228.718 71.4741 cv
229.777 70.4533 230.429 69.0476 230.429 67.4937 cv
230.429 65.9397 229.777 64.534 228.718 63.5132 cv
227.659 62.4929 226.197 61.861 224.578 61.861 cv
222.96 61.861 221.497 62.4929 220.438 63.5132 cv
219.38 64.534 218.727 65.9397 218.727 67.4937 cv
218.533 67.4937 li
1 .816159 .15967 .0319219 cmyk
f
205.131 109.108 mo
205.131 105.889 207.838 103.281 211.176 103.281 cv
214.515 103.281 217.222 105.889 217.222 109.108 cv
217.222 112.326 214.515 114.935 211.176 114.935 cv
207.838 114.935 205.131 112.326 205.131 109.108 cv
0 1 1 0 cmyk
ef
205.131 109.108 mo
204.937 109.108 li
204.936 107.443 205.637 105.936 206.767 104.847 cv
207.896 103.759 209.456 103.086 211.176 103.086 cv
212.897 103.086 214.456 103.759 215.586 104.847 cv
216.715 105.936 217.416 107.443 217.416 109.108 cv
217.416 110.772 216.715 112.28 215.586 113.368 cv
214.456 114.456 212.897 115.129 211.176 115.129 cv
209.456 115.129 207.896 114.456 206.767 113.368 cv
205.637 112.28 204.936 110.772 204.937 109.108 cv
205.131 109.108 li
205.325 109.108 li
205.325 110.662 205.978 112.067 207.036 113.088 cv
208.095 114.108 209.558 114.74 211.176 114.74 cv
212.795 114.74 214.257 114.108 215.316 113.088 cv
216.375 112.067 217.027 110.662 217.027 109.108 cv
217.027 107.554 216.375 106.148 215.316 105.127 cv
214.257 104.107 212.795 103.475 211.176 103.475 cv
209.558 103.475 208.095 104.107 207.036 105.127 cv
205.978 106.148 205.325 107.554 205.325 109.108 cv
205.131 109.108 li
1 .816159 .15967 .0319219 cmyk
f
169.49 134.649 mo
169.49 133.04 170.794 131.735 172.403 131.735 cv
174.012 131.735 175.316 133.04 175.316 134.649 cv
175.316 136.258 174.012 137.562 172.403 137.562 cv
170.794 137.562 169.49 136.258 169.49 134.649 cv
.808743 .585351 0 0 cmyk
ef
169.489 134.649 mo
169.295 134.649 li
169.295 132.933 170.687 131.541 172.403 131.541 cv
174.119 131.541 175.51 132.933 175.511 134.649 cv
175.51 136.365 174.119 137.757 172.403 137.757 cv
170.687 137.757 169.295 136.365 169.295 134.649 cv
169.489 134.649 li
169.684 134.649 li
169.686 136.15 170.901 137.366 172.403 137.368 cv
173.904 137.366 175.119 136.15 175.122 134.649 cv
175.119 133.148 173.904 131.932 172.403 131.93 cv
170.901 131.932 169.686 133.148 169.684 134.649 cv
169.489 134.649 li
1 .816159 .15967 .0319219 cmyk
f
194.497 45.1085 mo
194.497 43.4996 195.801 42.1951 197.41 42.1951 cv
199.019 42.1951 200.324 43.4996 200.324 45.1085 cv
200.324 46.7174 199.019 48.0219 197.41 48.0219 cv
195.801 48.0219 194.497 46.7174 194.497 45.1085 cv
.808743 .585351 0 0 cmyk
ef
194.497 45.1086 mo
194.302 45.1086 li
194.303 43.3923 195.694 42.001 197.41 42.0008 cv
199.126 42.001 200.518 43.3923 200.518 45.1086 cv
200.518 46.8248 199.126 48.2161 197.41 48.2163 cv
195.694 48.2161 194.303 46.8248 194.302 45.1086 cv
194.497 45.1086 li
194.691 45.1086 li
194.694 46.6101 195.909 47.8251 197.41 47.8278 cv
198.912 47.8251 200.127 46.6101 200.129 45.1086 cv
200.127 43.607 198.912 42.392 197.41 42.3893 cv
195.909 42.392 194.694 43.607 194.691 45.1086 cv
194.497 45.1086 li
1 .816159 .15967 .0319219 cmyk
f
247.328 45.1085 mo
247.328 43.4996 248.632 42.1951 250.241 42.1951 cv
251.85 42.1951 253.154 43.4996 253.154 45.1085 cv
253.154 46.7174 251.85 48.0219 250.241 48.0219 cv
248.632 48.0219 247.328 46.7174 247.328 45.1085 cv
.808743 .585351 0 0 cmyk
ef
247.327 45.1086 mo
247.133 45.1086 li
247.133 43.3923 248.525 42.001 250.241 42.0008 cv
251.957 42.001 253.348 43.3923 253.349 45.1086 cv
253.348 46.8248 251.957 48.2161 250.241 48.2163 cv
248.525 48.2161 247.133 46.8248 247.133 45.1086 cv
247.327 45.1086 li
247.522 45.1086 li
247.524 46.6101 248.739 47.8251 250.241 47.8278 cv
251.742 47.8251 252.957 46.6101 252.96 45.1086 cv
252.957 43.607 251.742 42.392 250.241 42.3893 cv
248.739 42.392 247.524 43.607 247.522 45.1086 cv
247.327 45.1086 li
1 .816159 .15967 .0319219 cmyk
f
170.072 82.1581 mo
170.072 80.5492 171.377 79.2446 172.986 79.2446 cv
174.594 79.2446 175.899 80.5492 175.899 82.1581 cv
175.899 83.7669 174.594 85.0715 172.986 85.0715 cv
171.377 85.0715 170.072 83.7669 170.072 82.1581 cv
.808743 .585351 0 0 cmyk
ef
170.072 82.1581 mo
169.878 82.1581 li
169.878 80.4418 171.269 79.0505 172.986 79.0504 cv
174.702 79.0505 176.093 80.4418 176.093 82.1581 cv
176.093 83.8743 174.702 85.2656 172.986 85.2658 cv
171.269 85.2656 169.878 83.8743 169.878 82.1581 cv
170.072 82.1581 li
170.266 82.1581 li
170.269 83.6596 171.484 84.8746 172.986 84.8773 cv
174.487 84.8746 175.702 83.6596 175.705 82.1581 cv
175.702 80.6565 174.487 79.4416 172.986 79.4388 cv
171.484 79.4416 170.269 80.6565 170.266 82.1581 cv
170.072 82.1581 li
1 .816159 .15967 .0319219 cmyk
f
.750271 .679713 .654902 .901945 cmyk
VALTWH+Calibri*1 [7.2837 0 0 -7.2837 0 0 ]msf
207.668 45.0848 mo
(H)sh
VALTWH+Calibri*1 [4.8558 0 0 -4.8558 0 0 ]msf
212.184 45.0848 mo
(1)sh
VALTWH+Calibri*1 [7.2837 0 0 -7.2837 0 0 ]msf
234.115 45.1167 mo
(H)sh
VALTWH+Calibri*1 [4.8558 0 0 -4.8558 0 0 ]msf
238.631 45.1167 mo
(2)sh
VALTWH+Calibri*1 [7.2837 0 0 -7.2837 0 0 ]msf
169.801 93.2028 mo
(H)sh
VALTWH+Calibri*1 [4.8558 0 0 -4.8558 0 0 ]msf
174.317 93.2028 mo
(5)sh
VALTWH+Calibri*1 [7.2837 0 0 -7.2837 0 0 ]msf
180.133 139.386 mo
(H)sh
VALTWH+Calibri*1 [4.8558 0 0 -4.8558 0 0 ]msf
184.649 139.386 mo
(4)sh
VALTWH+Calibri*1 [7.2837 0 0 -7.2837 0 0 ]msf
221.453 58.0772 mo
(O)sh
VALTWH+Calibri*1 [4.8558 0 0 -4.8558 0 0 ]msf
226.26 58.0772 mo
(0)sh
VALTWH+Calibri*1 [7.2837 0 0 -7.2837 0 0 ]msf
208.036 123.212 mo
(O)sh
VALTWH+Calibri*1 [4.8558 0 0 -4.8558 0 0 ]msf
212.843 123.212 mo
(3)sh
238.15 109.108 mo
238.15 105.889 240.857 103.281 244.196 103.281 cv
247.534 103.281 250.241 105.889 250.241 109.108 cv
250.241 112.326 247.534 114.935 244.196 114.935 cv
240.857 114.935 238.15 112.326 238.15 109.108 cv
0 1 1 0 cmyk
ef
238.15 109.108 mo
237.956 109.108 li
237.956 107.443 238.656 105.936 239.786 104.847 cv
240.915 103.759 242.475 103.086 244.196 103.086 cv
245.916 103.086 247.476 103.759 248.605 104.847 cv
249.735 105.936 250.435 107.443 250.435 109.108 cv
250.435 110.772 249.735 112.28 248.605 113.368 cv
247.476 114.456 245.916 115.129 244.196 115.129 cv
242.475 115.129 240.915 114.456 239.786 113.368 cv
238.656 112.28 237.956 110.772 237.956 109.108 cv
238.15 109.108 li
238.344 109.108 li
238.344 110.662 238.997 112.067 240.056 113.088 cv
241.114 114.108 242.577 114.74 244.196 114.74 cv
245.814 114.74 247.277 114.108 248.335 113.088 cv
249.394 112.067 250.047 110.662 250.047 109.108 cv
250.047 107.554 249.394 106.148 248.335 105.127 cv
247.277 104.107 245.814 103.475 244.196 103.475 cv
242.577 103.475 241.114 104.107 240.056 105.127 cv
238.997 106.148 238.344 107.554 238.344 109.108 cv
238.15 109.108 li
1 .816159 .15967 .0319219 cmyk
f
241.112 134.795 mo
241.112 133.186 242.417 131.881 244.026 131.881 cv
245.634 131.881 246.939 133.186 246.939 134.795 cv
246.939 136.404 245.634 137.708 244.026 137.708 cv
242.417 137.708 241.112 136.404 241.112 134.795 cv
.808743 .585351 0 0 cmyk
ef
241.112 134.795 mo
240.918 134.795 li
240.918 133.078 242.309 131.687 244.026 131.687 cv
245.742 131.687 247.133 133.078 247.133 134.795 cv
247.133 136.511 245.742 137.902 244.026 137.902 cv
242.309 137.902 240.918 136.511 240.918 134.795 cv
241.112 134.795 li
241.306 134.795 li
241.309 136.296 242.524 137.511 244.026 137.514 cv
245.527 137.511 246.742 136.296 246.745 134.795 cv
246.742 133.293 245.527 132.078 244.026 132.075 cv
242.524 132.078 241.309 133.293 241.306 134.795 cv
241.112 134.795 li
1 .816159 .15967 .0319219 cmyk
f
267.43 101.775 mo
267.43 100.166 268.735 98.8619 270.344 98.8619 cv
271.953 98.8619 273.257 100.166 273.257 101.775 cv
273.257 103.384 271.953 104.689 270.344 104.689 cv
268.735 104.689 267.43 103.384 267.43 101.775 cv
.808743 .585351 0 0 cmyk
ef
267.43 101.775 mo
267.236 101.775 li
267.236 100.059 268.628 98.6679 270.344 98.6677 cv
272.06 98.6679 273.451 100.059 273.452 101.775 cv
273.451 103.492 272.06 104.883 270.344 104.883 cv
268.628 104.883 267.236 103.492 267.236 101.775 cv
267.43 101.775 li
267.625 101.775 li
267.627 103.277 268.842 104.492 270.344 104.495 cv
271.845 104.492 273.06 103.277 273.063 101.775 cv
273.06 100.274 271.845 99.0589 270.344 99.0562 cv
268.842 99.0589 267.627 100.274 267.625 101.775 cv
267.43 101.775 li
1 .816159 .15967 .0319219 cmyk
f
.750271 .679713 .654902 .901945 cmyk
VALTWH+Calibri*1 [7.2837 0 0 -7.2837 0 0 ]msf
275.775 99.4211 mo
(H)sh
VALTWH+Calibri*1 [4.8558 0 0 -4.8558 0 0 ]msf
280.291 99.4211 mo
(8)sh
VALTWH+Calibri*1 [7.2837 0 0 -7.2837 0 0 ]msf
248.711 137.657 mo
(H)sh
VALTWH+Calibri*1 [4.8558 0 0 -4.8558 0 0 ]msf
253.227 137.657 mo
(7)sh
VALTWH+Calibri*1 [7.2837 0 0 -7.2837 0 0 ]msf
242.317 99.4211 mo
(O)sh
VALTWH+Calibri*1 [4.8558 0 0 -4.8558 0 0 ]msf
247.124 99.4211 mo
(6)sh
.825481 lw
175.341 134.673 mo
241.166 134.857 li
@
218.887 67.7636 mo
170.671 132.854 li
170.007 132.363 li
218.224 67.2722 li
218.887 67.7636 li
f
195.454 47.1753 mo
195.236 47.9208 li
195.049 47.8662 li
195.268 47.1206 li
195.454 47.1753 li
195.072 48.48 mo
194.853 49.2255 li
194.667 49.1708 li
194.885 48.4253 li
195.072 48.48 li
194.689 49.7846 mo
194.47 50.5302 li
194.284 50.4755 li
194.503 49.73 li
194.689 49.7846 li
194.307 51.0893 mo
194.088 51.8348 li
193.901 51.7802 li
194.12 51.0346 li
194.307 51.0893 li
193.924 52.394 mo
193.705 53.1395 li
193.519 53.0849 li
193.738 52.3394 li
193.924 52.394 li
193.541 53.6986 mo
193.323 54.4442 li
193.136 54.3896 li
193.355 53.6441 li
193.541 53.6986 li
193.159 55.0034 mo
192.94 55.7489 li
192.754 55.6943 li
192.972 54.9487 li
193.159 55.0034 li
192.776 56.3081 mo
192.558 57.0536 li
192.371 56.9989 li
192.59 56.2534 li
192.776 56.3081 li
192.394 57.6127 mo
192.175 58.3583 li
191.989 58.3036 li
192.207 57.5581 li
192.394 57.6127 li
192.011 58.9174 mo
191.792 59.6629 li
191.606 59.6083 li
191.825 58.8627 li
192.011 58.9174 li
191.628 60.2221 mo
191.41 60.9676 li
191.223 60.9129 li
191.442 60.1674 li
191.628 60.2221 li
191.246 61.5267 mo
191.027 62.2723 li
190.841 62.2177 li
191.06 61.4721 li
191.246 61.5267 li
190.863 62.8314 mo
190.645 63.5769 li
190.458 63.5224 li
190.677 62.7768 li
190.863 62.8314 li
190.481 64.1361 mo
190.262 64.8817 li
190.076 64.827 li
190.294 64.0815 li
190.481 64.1361 li
190.098 65.4408 mo
189.88 66.1864 li
189.693 66.1317 li
189.912 65.3862 li
190.098 65.4408 li
189.716 66.7455 mo
189.497 67.491 li
189.311 67.4364 li
189.529 66.6908 li
189.716 66.7455 li
189.333 68.0502 mo
189.114 68.7957 li
188.928 68.741 li
189.147 67.9955 li
189.333 68.0502 li
188.95 69.3548 mo
188.732 70.1004 li
188.545 70.0457 li
188.764 69.3002 li
188.95 69.3548 li
188.568 70.6595 mo
188.349 71.405 li
188.163 71.3504 li
188.382 70.6049 li
188.568 70.6595 li
188.185 71.9642 mo
187.967 72.7097 li
187.78 72.6551 li
187.999 71.9096 li
188.185 71.9642 li
187.803 73.2689 mo
187.584 74.0144 li
187.398 73.9598 li
187.616 73.2143 li
187.803 73.2689 li
187.42 74.5736 mo
187.202 75.3191 li
187.015 75.2645 li
187.234 74.5189 li
187.42 74.5736 li
187.038 75.8783 mo
186.819 76.6238 li
186.633 76.5691 li
186.851 75.8236 li
187.038 75.8783 li
186.655 77.1829 mo
186.436 77.9285 li
186.25 77.8738 li
186.469 77.1283 li
186.655 77.1829 li
186.272 78.4876 mo
186.054 79.2331 li
185.868 79.1784 li
186.086 78.4329 li
186.272 78.4876 li
185.89 79.7923 mo
185.671 80.5378 li
185.485 80.4832 li
185.704 79.7376 li
185.89 79.7923 li
185.507 81.0969 mo
185.289 81.8424 li
185.102 81.7879 li
185.321 81.0424 li
185.507 81.0969 li
185.125 82.4016 mo
184.906 83.1472 li
184.72 83.0925 li
184.938 82.347 li
185.125 82.4016 li
184.742 83.7063 mo
184.524 84.4519 li
184.337 84.3972 li
184.556 83.6517 li
184.742 83.7063 li
184.36 85.011 mo
184.141 85.7565 li
183.955 85.7019 li
184.173 84.9563 li
184.36 85.011 li
183.977 86.3157 mo
183.758 87.0612 li
183.572 87.0065 li
183.791 86.261 li
183.977 86.3157 li
183.594 87.6203 mo
183.376 88.3659 li
183.189 88.3112 li
183.408 87.5657 li
183.594 87.6203 li
183.212 88.925 mo
182.993 89.6705 li
182.807 89.6159 li
183.026 88.8703 li
183.212 88.925 li
182.829 90.2297 mo
182.611 90.9752 li
182.424 90.9206 li
182.643 90.1751 li
182.829 90.2297 li
182.447 91.5343 mo
182.228 92.2799 li
182.042 92.2253 li
182.26 91.4798 li
182.447 91.5343 li
182.064 92.8391 mo
181.846 93.5846 li
181.659 93.5299 li
181.878 92.7844 li
182.064 92.8391 li
181.682 94.1438 mo
181.463 94.8893 li
181.277 94.8346 li
181.495 94.0891 li
181.682 94.1438 li
181.299 95.4484 mo
181.08 96.1939 li
180.894 96.1393 li
181.113 95.3937 li
181.299 95.4484 li
180.916 96.7531 mo
180.698 97.4986 li
180.511 97.4439 li
180.73 96.6984 li
180.916 96.7531 li
180.534 98.0577 mo
180.315 98.8033 li
180.129 98.7486 li
180.347 98.0031 li
180.534 98.0577 li
180.151 99.3624 mo
179.933 100.108 li
179.746 100.053 li
179.965 99.3078 li
180.151 99.3624 li
179.769 100.667 mo
179.55 101.413 li
179.364 101.358 li
179.582 100.612 li
179.769 100.667 li
179.386 101.972 mo
179.168 102.717 li
178.981 102.663 li
179.2 101.917 li
179.386 101.972 li
179.004 103.276 mo
178.785 104.022 li
178.599 103.967 li
178.817 103.222 li
179.004 103.276 li
178.621 104.581 mo
178.402 105.327 li
178.216 105.272 li
178.435 104.527 li
178.621 104.581 li
178.238 105.886 mo
178.02 106.631 li
177.833 106.577 li
178.052 105.831 li
178.238 105.886 li
177.856 107.191 mo
177.637 107.936 li
177.451 107.881 li
177.669 107.136 li
177.856 107.191 li
177.473 108.495 mo
177.255 109.241 li
177.068 109.186 li
177.287 108.441 li
177.473 108.495 li
177.091 109.8 mo
176.872 110.545 li
176.686 110.491 li
176.904 109.745 li
177.091 109.8 li
176.708 111.105 mo
176.49 111.85 li
176.303 111.795 li
176.522 111.05 li
176.708 111.105 li
176.326 112.409 mo
176.107 113.155 li
175.921 113.1 li
176.139 112.355 li
176.326 112.409 li
175.943 113.714 mo
175.724 114.459 li
175.538 114.405 li
175.757 113.659 li
175.943 113.714 li
175.56 115.019 mo
175.342 115.764 li
175.155 115.709 li
175.374 114.964 li
175.56 115.019 li
175.178 116.323 mo
174.959 117.069 li
174.773 117.014 li
174.991 116.269 li
175.178 116.323 li
174.795 117.628 mo
174.577 118.373 li
174.39 118.319 li
174.609 117.573 li
174.795 117.628 li
174.413 118.933 mo
174.194 119.678 li
174.008 119.623 li
174.226 118.878 li
174.413 118.933 li
174.03 120.237 mo
173.812 120.983 li
173.625 120.928 li
173.844 120.183 li
174.03 120.237 li
173.648 121.542 mo
173.429 122.287 li
173.243 122.233 li
173.461 121.487 li
173.648 121.542 li
173.265 122.847 mo
173.046 123.592 li
172.86 123.538 li
173.079 122.792 li
173.265 122.847 li
172.882 124.151 mo
172.664 124.897 li
172.477 124.842 li
172.696 124.097 li
172.882 124.151 li
172.5 125.456 mo
172.281 126.202 li
172.095 126.147 li
172.313 125.401 li
172.5 125.456 li
172.117 126.761 mo
171.899 127.506 li
171.712 127.452 li
171.931 126.706 li
172.117 126.761 li
171.735 128.065 mo
171.516 128.811 li
171.33 128.756 li
171.548 128.011 li
171.735 128.065 li
171.352 129.37 mo
171.133 130.115 li
170.947 130.061 li
171.166 129.315 li
171.352 129.37 li
170.97 130.675 mo
170.751 131.42 li
170.565 131.366 li
170.783 130.62 li
170.97 130.675 li
170.587 131.979 mo
170.408 132.589 li
170.222 132.534 li
170.401 131.925 li
170.587 131.979 li
f
220.406 71.6816 mo
219.922 72.2891 li
219.77 72.168 li
220.254 71.5605 li
220.406 71.6816 li
219.559 72.7447 mo
219.074 73.3522 li
218.923 73.2311 li
219.407 72.6236 li
219.559 72.7447 li
218.711 73.8078 mo
218.227 74.4153 li
218.075 74.2942 li
218.559 73.6868 li
218.711 73.8078 li
217.864 74.8709 mo
217.379 75.4785 li
217.227 75.3573 li
217.712 74.7498 li
217.864 74.8709 li
217.016 75.9341 mo
216.532 76.5415 li
216.38 76.4205 li
216.864 75.813 li
217.016 75.9341 li
216.169 76.9971 mo
215.684 77.6047 li
215.532 77.4836 li
216.017 76.8761 li
216.169 76.9971 li
215.321 78.0603 mo
214.837 78.6678 li
214.685 78.5467 li
215.169 77.9392 li
215.321 78.0603 li
214.473 79.1234 mo
213.989 79.7309 li
213.837 79.6098 li
214.322 79.0023 li
214.473 79.1234 li
213.626 80.1865 mo
213.142 80.794 li
212.99 80.673 li
213.474 80.0655 li
213.626 80.1865 li
212.778 81.2496 mo
212.294 81.8572 li
212.142 81.736 li
212.627 81.1285 li
212.778 81.2496 li
211.931 82.3128 mo
211.447 82.9202 li
211.295 82.7992 li
211.779 82.1917 li
211.931 82.3128 li
211.083 83.3758 mo
210.599 83.9834 li
210.447 83.8623 li
210.931 83.2548 li
211.083 83.3758 li
210.236 84.439 mo
209.751 85.0465 li
209.6 84.9254 li
210.084 84.3179 li
210.236 84.439 li
209.388 85.5021 mo
208.904 86.1096 li
208.752 85.9885 li
209.236 85.381 li
209.388 85.5021 li
208.541 86.5652 mo
208.056 87.1727 li
207.904 87.0517 li
208.389 86.4441 li
208.541 86.5652 li
207.693 87.6283 mo
207.209 88.2358 li
207.057 88.1147 li
207.541 87.5073 li
207.693 87.6283 li
206.846 88.6915 mo
206.361 89.2989 li
206.209 89.1779 li
206.694 88.5703 li
206.846 88.6915 li
205.998 89.7545 mo
205.514 90.362 li
205.362 90.241 li
205.846 89.6335 li
205.998 89.7545 li
205.15 90.8176 mo
204.666 91.4252 li
204.514 91.3041 li
204.999 90.6966 li
205.15 90.8176 li
204.303 91.8808 mo
203.819 92.4883 li
203.667 92.3672 li
204.151 91.7597 li
204.303 91.8808 li
203.455 92.9439 mo
202.971 93.5514 li
202.819 93.4304 li
203.303 92.8228 li
203.455 92.9439 li
202.608 94.007 mo
202.123 94.6145 li
201.972 94.4934 li
202.456 93.886 li
202.608 94.007 li
201.76 95.0701 mo
201.276 95.6777 li
201.124 95.5565 li
201.608 94.949 li
201.76 95.0701 li
200.913 96.1333 mo
200.428 96.7407 li
200.277 96.6197 li
200.761 96.0122 li
200.913 96.1333 li
200.065 97.1963 mo
199.581 97.8039 li
199.429 97.6827 li
199.913 97.0753 li
200.065 97.1963 li
199.218 98.2595 mo
198.733 98.867 li
198.581 98.7459 li
199.066 98.1384 li
199.218 98.2595 li
198.37 99.3226 mo
197.886 99.9301 li
197.734 99.809 li
198.218 99.2015 li
198.37 99.3226 li
197.523 100.386 mo
197.038 100.993 li
196.886 100.872 li
197.371 100.265 li
197.523 100.386 li
196.675 101.449 mo
196.191 102.056 li
196.039 101.935 li
196.523 101.328 li
196.675 101.449 li
195.827 102.512 mo
195.343 103.119 li
195.191 102.998 li
195.676 102.391 li
195.827 102.512 li
194.98 103.575 mo
194.496 104.183 li
194.344 104.061 li
194.828 103.454 li
194.98 103.575 li
194.132 104.638 mo
193.648 105.246 li
193.496 105.125 li
193.98 104.517 li
194.132 104.638 li
193.285 105.701 mo
192.8 106.309 li
192.649 106.188 li
193.133 105.58 li
193.285 105.701 li
192.437 106.764 mo
191.953 107.372 li
191.801 107.251 li
192.285 106.643 li
192.437 106.764 li
191.59 107.827 mo
191.105 108.435 li
190.954 108.314 li
191.438 107.706 li
191.59 107.827 li
190.742 108.891 mo
190.258 109.498 li
190.106 109.377 li
190.59 108.77 li
190.742 108.891 li
189.895 109.954 mo
189.41 110.561 li
189.258 110.44 li
189.743 109.833 li
189.895 109.954 li
189.047 111.017 mo
188.563 111.624 li
188.411 111.503 li
188.895 110.896 li
189.047 111.017 li
188.2 112.08 mo
187.715 112.687 li
187.563 112.566 li
188.048 111.959 li
188.2 112.08 li
187.352 113.143 mo
186.868 113.751 li
186.716 113.629 li
187.2 113.022 li
187.352 113.143 li
186.504 114.206 mo
186.02 114.814 li
185.868 114.693 li
186.353 114.085 li
186.504 114.206 li
185.657 115.269 mo
185.173 115.877 li
185.021 115.756 li
185.505 115.148 li
185.657 115.269 li
184.809 116.332 mo
184.325 116.94 li
184.173 116.819 li
184.657 116.211 li
184.809 116.332 li
183.962 117.396 mo
183.477 118.003 li
183.326 117.882 li
183.81 117.274 li
183.962 117.396 li
183.114 118.459 mo
182.63 119.066 li
182.478 118.945 li
182.962 118.338 li
183.114 118.459 li
182.267 119.522 mo
181.782 120.129 li
181.63 120.008 li
182.115 119.401 li
182.267 119.522 li
181.419 120.585 mo
180.935 121.192 li
180.783 121.071 li
181.267 120.464 li
181.419 120.585 li
180.572 121.648 mo
180.087 122.255 li
179.935 122.134 li
180.42 121.527 li
180.572 121.648 li
179.724 122.711 mo
179.24 123.319 li
179.088 123.197 li
179.572 122.59 li
179.724 122.711 li
178.877 123.774 mo
178.392 124.382 li
178.24 124.261 li
178.725 123.653 li
178.877 123.774 li
178.029 124.837 mo
177.545 125.445 li
177.393 125.324 li
177.877 124.716 li
178.029 124.837 li
177.181 125.9 mo
176.697 126.508 li
176.545 126.387 li
177.03 125.779 li
177.181 125.9 li
176.334 126.964 mo
175.85 127.571 li
175.698 127.45 li
176.182 126.842 li
176.334 126.964 li
175.486 128.027 mo
175.002 128.634 li
174.85 128.513 li
175.335 127.906 li
175.486 128.027 li
174.639 129.09 mo
174.154 129.697 li
174.003 129.576 li
174.487 128.969 li
174.639 129.09 li
173.791 130.153 mo
173.307 130.76 li
173.155 130.639 li
173.639 130.032 li
173.791 130.153 li
172.944 131.216 mo
172.479 131.799 li
172.327 131.678 li
172.792 131.095 li
172.944 131.216 li
f
.194231 lw
[1.55385 .582693 .194231 .582693 .194231 .582693 ] 0 dsh
241.956 132.767 mo
197.41 48.022 li
@
228.952 71.6841 mo
227.943 72.8657 li
227.796 72.7397 li
228.805 71.5579 li
228.952 71.6841 li
227.565 73.3089 mo
227.439 73.4566 li
227.291 73.3305 li
227.417 73.1827 li
227.565 73.3089 li
227.06 73.8997 mo
226.934 74.0474 li
226.787 73.9213 li
226.913 73.7736 li
227.06 73.8997 li
226.556 74.4905 mo
225.547 75.6722 li
225.399 75.5461 li
226.408 74.3644 li
226.556 74.4905 li
225.169 76.1153 mo
225.042 76.263 li
224.895 76.1369 li
225.021 75.9892 li
225.169 76.1153 li
224.664 76.7061 mo
224.538 76.8538 li
224.39 76.7277 li
224.516 76.58 li
224.664 76.7061 li
224.16 77.2969 mo
223.15 78.4786 li
223.003 78.3525 li
224.012 77.1708 li
224.16 77.2969 li
222.772 78.9217 mo
222.646 79.0694 li
222.498 78.9433 li
222.624 78.7956 li
222.772 78.9217 li
222.268 79.5126 mo
222.142 79.6602 li
221.994 79.5342 li
222.12 79.3864 li
222.268 79.5126 li
221.763 80.1034 mo
220.754 81.285 li
220.606 81.1589 li
221.615 79.9772 li
221.763 80.1034 li
220.376 81.7282 mo
220.25 81.8758 li
220.102 81.7498 li
220.228 81.602 li
220.376 81.7282 li
219.871 82.319 mo
219.745 82.4667 li
219.597 82.3406 li
219.723 82.1928 li
219.871 82.319 li
219.367 82.9098 mo
218.358 84.0914 li
218.21 83.9654 li
219.219 82.7837 li
219.367 82.9098 li
217.979 84.5346 mo
217.853 84.6823 li
217.705 84.5562 li
217.832 84.4084 li
217.979 84.5346 li
217.475 85.1254 mo
217.349 85.2731 li
217.201 85.147 li
217.327 84.9992 li
217.475 85.1254 li
216.97 85.7162 mo
215.961 86.8978 li
215.814 86.7718 li
216.822 85.5901 li
216.97 85.7162 li
215.583 87.341 mo
215.457 87.4887 li
215.309 87.3626 li
215.435 87.2148 li
215.583 87.341 li
215.078 87.9318 mo
214.952 88.0796 li
214.804 87.9534 li
214.931 87.8057 li
215.078 87.9318 li
214.574 88.5226 mo
213.565 89.7042 li
213.417 89.5782 li
214.426 88.3966 li
214.574 88.5226 li
213.186 90.1474 mo
213.06 90.2951 li
212.913 90.169 li
213.039 90.0212 li
213.186 90.1474 li
212.682 90.7382 mo
212.556 90.886 li
212.408 90.7598 li
212.534 90.6121 li
212.682 90.7382 li
212.177 91.329 mo
211.168 92.5107 li
211.021 92.3846 li
212.03 91.203 li
212.177 91.329 li
210.79 92.9538 mo
210.664 93.1015 li
210.516 92.9754 li
210.642 92.8277 li
210.79 92.9538 li
210.285 93.5446 mo
210.159 93.6924 li
210.012 93.5662 li
210.138 93.4185 li
210.285 93.5446 li
209.781 94.1355 mo
208.772 95.3171 li
208.624 95.191 li
209.633 94.0094 li
209.781 94.1355 li
208.393 95.7602 mo
208.267 95.908 li
208.12 95.7818 li
208.246 95.6341 li
208.393 95.7602 li
207.889 96.3511 mo
207.763 96.4988 li
207.615 96.3726 li
207.741 96.225 li
207.889 96.3511 li
207.385 96.9419 mo
206.375 98.1236 li
206.228 97.9974 li
207.237 96.8158 li
207.385 96.9419 li
205.997 98.5667 mo
205.871 98.7144 li
205.723 98.5883 li
205.849 98.4406 li
205.997 98.5667 li
205.493 99.1575 mo
205.366 99.3052 li
205.219 99.1791 li
205.345 99.0314 li
205.493 99.1575 li
204.988 99.7483 mo
203.979 100.93 li
203.831 100.804 li
204.84 99.6222 li
204.988 99.7483 li
203.601 101.373 mo
203.475 101.521 li
203.327 101.395 li
203.453 101.247 li
203.601 101.373 li
203.096 101.964 mo
202.97 102.112 li
202.822 101.986 li
202.948 101.838 li
203.096 101.964 li
202.592 102.555 mo
201.583 103.736 li
201.435 103.61 li
202.444 102.429 li
202.592 102.555 li
201.204 104.18 mo
201.078 104.327 li
200.93 104.201 li
201.057 104.053 li
201.204 104.18 li
200.7 104.77 mo
200.574 104.918 li
200.426 104.792 li
200.552 104.644 li
200.7 104.77 li
200.195 105.361 mo
199.186 106.543 li
199.038 106.417 li
200.047 105.235 li
200.195 105.361 li
198.808 106.986 mo
198.682 107.134 li
198.534 107.008 li
198.66 106.86 li
198.808 106.986 li
198.303 107.577 mo
198.177 107.724 li
198.029 107.598 li
198.156 107.451 li
198.303 107.577 li
197.799 108.168 mo
196.79 109.349 li
196.642 109.223 li
197.651 108.041 li
197.799 108.168 li
196.411 109.792 mo
196.285 109.94 li
196.137 109.814 li
196.264 109.666 li
196.411 109.792 li
195.907 110.383 mo
195.781 110.531 li
195.633 110.405 li
195.759 110.257 li
195.907 110.383 li
195.402 110.974 mo
194.393 112.156 li
194.246 112.03 li
195.255 110.848 li
195.402 110.974 li
194.015 112.599 mo
193.889 112.746 li
193.741 112.62 li
193.867 112.473 li
194.015 112.599 li
193.51 113.19 mo
193.384 113.337 li
193.237 113.211 li
193.363 113.063 li
193.51 113.19 li
193.006 113.78 mo
191.997 114.962 li
191.849 114.836 li
192.858 113.654 li
193.006 113.78 li
191.618 115.405 mo
191.492 115.553 li
191.345 115.427 li
191.471 115.279 li
191.618 115.405 li
191.114 115.996 mo
190.988 116.144 li
190.84 116.018 li
190.966 115.87 li
191.114 115.996 li
190.609 116.587 mo
189.6 117.768 li
189.453 117.642 li
190.462 116.461 li
190.609 116.587 li
189.222 118.212 mo
189.096 118.359 li
188.948 118.233 li
189.074 118.085 li
189.222 118.212 li
188.717 118.802 mo
188.591 118.95 li
188.444 118.824 li
188.57 118.676 li
188.717 118.802 li
188.213 119.393 mo
187.204 120.575 li
187.056 120.449 li
188.065 119.267 li
188.213 119.393 li
186.826 121.018 mo
186.699 121.166 li
186.552 121.04 li
186.678 120.892 li
186.826 121.018 li
186.321 121.609 mo
186.195 121.757 li
186.047 121.63 li
186.173 121.483 li
186.321 121.609 li
185.817 122.2 mo
184.807 123.381 li
184.66 123.255 li
185.669 122.074 li
185.817 122.2 li
184.429 123.824 mo
184.303 123.972 li
184.155 123.846 li
184.281 123.698 li
184.429 123.824 li
183.925 124.415 mo
183.799 124.563 li
183.651 124.437 li
183.777 124.289 li
183.925 124.415 li
183.42 125.006 mo
182.411 126.188 li
182.263 126.062 li
183.272 124.88 li
183.42 125.006 li
182.033 126.631 mo
181.907 126.779 li
181.759 126.652 li
181.885 126.505 li
182.033 126.631 li
181.528 127.222 mo
181.402 127.369 li
181.254 127.243 li
181.381 127.096 li
181.528 127.222 li
181.024 127.812 mo
180.015 128.994 li
179.867 128.868 li
180.876 127.686 li
181.024 127.812 li
179.636 129.437 mo
179.51 129.585 li
179.362 129.459 li
179.489 129.311 li
179.636 129.437 li
179.132 130.028 mo
179.006 130.176 li
178.858 130.05 li
178.984 129.902 li
179.132 130.028 li
178.627 130.619 mo
177.618 131.801 li
177.471 131.674 li
178.48 130.493 li
178.627 130.619 li
177.24 132.244 mo
177.114 132.391 li
176.966 132.265 li
177.092 132.118 li
177.24 132.244 li
176.735 132.834 mo
176.609 132.982 li
176.461 132.856 li
176.588 132.708 li
176.735 132.834 li
176.231 133.425 mo
175.973 133.727 li
175.825 133.601 li
176.083 133.299 li
176.231 133.425 li
f
.750271 .679713 .654902 .901945 cmyk
VALTWH+Calibri*1 [7.2837 0 0 -7.2837 0 0 ]msf
198.745 155.097 mo
(Type 66)
[3.20482 3.30173 3.83629 3.64185 1.6534 3.69067 0 ]xsh
.404648 lw
[] 0 dsh
210.395 146.858 mo
209.984 138.078 li
.808743 .585351 0 0 cmyk
@
208.79 138.539 mo
209.89 136.057 li
211.215 138.426 li
cp
ef
.750271 .679713 .654902 .901945 cmyk
VALTWH+Calibri*1 [7.2837 0 0 -7.2837 0 0 ]msf
249.114 80.451 mo
(Type 67)
[3.20482 3.30173 3.83627 3.64188 1.65338 3.69067 0 ]xsh
260.791 83.9547 mo
226.542 94.0855 li
.808743 .585351 0 0 cmyk
@
226.586 92.8066 mo
224.603 94.6595 li
227.275 95.1346 li
cp
ef
.750271 .679713 .654902 .901945 cmyk
VALTWH+Calibri*1 [7.2837 0 0 -7.2837 0 0 ]msf
140.068 108.438 mo
(Type 56)
[3.20482 3.30173 3.83629 3.64185 1.6534 3.69067 0 ]xsh
198.279 175.74 mo
(OH)
[4.80727 0 ]xsh
207.602 175.74 mo
(-)sh
209.838 175.74 mo
(HH)
[4.5159 0 ]xsh
224.66 73.3833 mo
223.656 74.5695 li
223.508 74.4441 li
224.511 73.2579 li
224.66 73.3833 li
223.28 75.0144 mo
222.276 76.2005 li
222.128 76.0751 li
223.131 74.8889 li
223.28 75.0144 li
221.9 76.6454 mo
220.896 77.8316 li
220.748 77.7062 li
221.751 76.5199 li
221.9 76.6454 li
220.519 78.2765 mo
219.516 79.4627 li
219.368 79.3372 li
220.371 78.151 li
220.519 78.2765 li
219.139 79.9075 mo
218.136 81.0937 li
217.988 80.9683 li
218.991 79.782 li
219.139 79.9075 li
217.759 81.5385 mo
216.756 82.7248 li
216.608 82.5993 li
217.611 81.4131 li
217.759 81.5385 li
216.379 83.1696 mo
215.376 84.3558 li
215.227 84.2304 li
216.231 83.0441 li
216.379 83.1696 li
214.999 84.8006 mo
213.996 85.9869 li
213.847 85.8614 li
214.851 84.6752 li
214.999 84.8006 li
213.619 86.4316 mo
212.616 87.6179 li
212.467 87.4925 li
213.471 86.3062 li
213.619 86.4316 li
212.239 88.0627 mo
211.236 89.249 li
211.087 89.1235 li
212.091 87.9373 li
212.239 88.0627 li
210.859 89.6937 mo
209.856 90.88 li
209.707 90.7545 li
210.711 89.5683 li
210.859 89.6937 li
209.479 91.3248 mo
208.476 92.5111 li
208.327 92.3856 li
209.331 91.1994 li
209.479 91.3248 li
208.099 92.9558 mo
207.096 94.1421 li
206.947 94.0166 li
207.951 92.8304 li
208.099 92.9558 li
206.719 94.5869 mo
205.716 95.7732 li
205.567 95.6476 li
206.571 94.4615 li
206.719 94.5869 li
205.339 96.2179 mo
204.335 97.4042 li
204.187 97.2787 li
205.191 96.0925 li
205.339 96.2179 li
203.959 97.849 mo
202.956 99.0352 li
202.807 98.9097 li
203.811 97.7236 li
203.959 97.849 li
202.579 99.4801 mo
201.575 100.666 li
201.427 100.541 li
202.431 99.3546 li
202.579 99.4801 li
201.199 101.111 mo
200.195 102.297 li
200.047 102.172 li
201.051 100.986 li
201.199 101.111 li
199.819 102.742 mo
198.815 103.928 li
198.667 103.803 li
199.671 102.617 li
199.819 102.742 li
198.439 104.373 mo
197.435 105.559 li
197.287 105.434 li
198.291 104.248 li
198.439 104.373 li
197.059 106.004 mo
196.055 107.19 li
195.907 107.065 li
196.911 105.879 li
197.059 106.004 li
195.679 107.635 mo
194.675 108.822 li
194.527 108.696 li
195.531 107.51 li
195.679 107.635 li
194.299 109.266 mo
193.295 110.453 li
193.147 110.327 li
194.151 109.141 li
194.299 109.266 li
192.919 110.897 mo
191.915 112.084 li
191.767 111.958 li
192.771 110.772 li
192.919 110.897 li
191.539 112.528 mo
190.535 113.715 li
190.387 113.589 li
191.391 112.403 li
191.539 112.528 li
190.159 114.159 mo
189.155 115.346 li
189.007 115.22 li
190.011 114.034 li
190.159 114.159 li
188.779 115.791 mo
187.775 116.977 li
187.627 116.851 li
188.631 115.665 li
188.779 115.791 li
187.399 117.422 mo
186.395 118.608 li
186.247 118.482 li
187.251 117.296 li
187.399 117.422 li
186.019 119.053 mo
185.015 120.239 li
184.867 120.113 li
185.87 118.927 li
186.019 119.053 li
184.639 120.684 mo
183.635 121.87 li
183.487 121.744 li
184.49 120.558 li
184.639 120.684 li
183.259 122.315 mo
182.255 123.501 li
182.107 123.375 li
183.111 122.189 li
183.259 122.315 li
181.879 123.946 mo
180.875 125.132 li
180.727 125.006 li
181.73 123.82 li
181.879 123.946 li
180.499 125.577 mo
179.495 126.763 li
179.347 126.638 li
180.35 125.451 li
180.499 125.577 li
179.119 127.208 mo
178.115 128.394 li
177.967 128.269 li
178.97 127.082 li
179.119 127.208 li
177.739 128.839 mo
176.735 130.025 li
176.587 129.9 li
177.59 128.713 li
177.739 128.839 li
176.359 130.47 mo
175.355 131.656 li
175.207 131.531 li
176.21 130.344 li
176.359 130.47 li
174.979 132.101 mo
174.516 132.647 li
174.368 132.522 li
174.83 131.976 li
174.979 132.101 li
f
.194231 lw
[1.55385 .582693 ] 0 dsh
172.986 79.2384 mo
195.386 47.1479 li
@
.750271 .679713 .654902 .901945 cmyk
VALTWH+Calibri*1 [7.2837 0 0 -7.2837 0 0 ]msf
155.452 51.3641 mo
(Type 57)
[3.20482 3.30173 3.83629 3.64185 1.6534 3.69067 0 ]xsh
.404648 lw
[] 0 dsh
167.11 54.8686 mo
181.876 61.7598 li
.808743 .585351 0 0 cmyk
@
182.023 60.4886 mo
183.71 62.6155 li
180.996 62.6887 li
cp
ef
166.285 106.069 mo
178.006 100.85 li
@
178.13 102.124 mo
179.854 100.027 li
177.142 99.906 li
cp
ef
60.5867 61.9908 mo
60.4668 61.8976 li
60.5861 61.7443 li
60.728 61.8547 li
60.7039 61.8771 60.6802 61.8997 60.6565 61.9225 cv
60.6331 61.9451 60.6098 61.9679 60.5867 61.9908 cv
.36408 .213107 0 0 cmyk
f
60.6201 62.0169 mo
60.5867 61.9908 li
60.6098 61.9679 60.6331 61.9451 60.6565 61.9225 cv
60.6802 61.8997 60.7039 61.8771 60.728 61.8547 cv
60.7394 61.8636 li
60.6201 62.0169 li
.904997 .707607 .0103151 0 cmyk
f
60.3135 61.7783 mo
60.1602 61.659 li
60.2795 61.5058 li
60.4328 61.6251 li
60.3135 61.7783 li
60.0069 61.5397 mo
59.8537 61.4205 li
59.9729 61.2672 li
60.1262 61.3865 li
60.0069 61.5397 li
59.7003 61.3012 mo
59.5471 61.1819 li
59.6664 61.0286 li
59.8196 61.1479 li
59.7003 61.3012 li
59.3938 61.0626 mo
59.2405 60.9434 li
59.3598 60.79 li
59.5131 60.9093 li
59.3938 61.0626 li
59.0872 60.8241 mo
58.934 60.7048 li
59.0532 60.5515 li
59.2065 60.6707 li
59.0872 60.8241 li
58.7806 60.5855 mo
58.6274 60.4662 li
58.7467 60.3129 li
58.8999 60.4322 li
58.7806 60.5855 li
58.4741 60.3469 mo
58.3208 60.2276 li
58.4401 60.0744 li
58.5934 60.1936 li
58.4741 60.3469 li
58.1675 60.1083 mo
58.0142 59.989 li
58.1335 59.8358 li
58.2868 59.9551 li
58.1675 60.1083 li
57.8609 59.8698 mo
57.7076 59.7505 li
57.8269 59.5972 li
57.9802 59.7165 li
57.8609 59.8698 li
57.5544 59.6312 mo
57.4011 59.5119 li
57.5203 59.3586 li
57.6737 59.478 li
57.5544 59.6312 li
57.2478 59.3927 mo
57.0945 59.2734 li
57.2138 59.12 li
57.3671 59.2393 li
57.2478 59.3927 li
56.9412 59.1541 mo
56.7879 59.0348 li
56.9072 58.8815 li
57.0605 59.0008 li
56.9412 59.1541 li
56.6346 58.9155 mo
56.4814 58.7963 li
56.6006 58.6429 li
56.7539 58.7622 li
56.6346 58.9155 li
56.328 58.6769 mo
56.1748 58.5576 li
56.2941 58.4044 li
56.4473 58.5237 li
56.328 58.6769 li
56.0215 58.4383 mo
55.8682 58.3191 li
55.9875 58.1658 li
56.1407 58.2851 li
56.0215 58.4383 li
55.7149 58.1998 mo
55.5617 58.0805 li
55.6809 57.9273 li
55.8342 58.0465 li
55.7149 58.1998 li
55.4083 57.9612 mo
55.2551 57.8419 li
55.3744 57.6887 li
55.5276 57.808 li
55.4083 57.9612 li
55.1018 57.7227 mo
54.9484 57.6034 li
55.0678 57.4501 li
55.221 57.5693 li
55.1018 57.7227 li
54.7952 57.4841 mo
54.6419 57.3648 li
54.7612 57.2115 li
54.9145 57.3308 li
54.7952 57.4841 li
54.4886 57.2456 mo
54.3353 57.1263 li
54.4546 56.9729 li
54.6079 57.0922 li
54.4886 57.2456 li
54.1821 57.007 mo
54.0287 56.8877 li
54.148 56.7344 li
54.3013 56.8537 li
54.1821 57.007 li
53.8755 56.7684 mo
53.7222 56.6491 li
53.8415 56.4958 li
53.9948 56.6151 li
53.8755 56.7684 li
53.5689 56.5298 mo
53.4156 56.4105 li
53.5349 56.2573 li
53.6882 56.3766 li
53.5689 56.5298 li
53.2624 56.2912 mo
53.109 56.172 li
53.2283 56.0187 li
53.3816 56.138 li
53.2624 56.2912 li
52.9557 56.0527 mo
52.8025 55.9334 li
52.9218 55.7801 li
53.0751 55.8994 li
52.9557 56.0527 li
52.6492 55.8141 mo
52.4959 55.6948 li
52.6152 55.5416 li
52.7684 55.6608 li
52.6492 55.8141 li
52.3426 55.5756 mo
52.1893 55.4563 li
52.3086 55.303 li
52.4619 55.4222 li
52.3426 55.5756 li
52.036 55.337 mo
51.8828 55.2177 li
52.0021 55.0644 li
52.1553 55.1837 li
52.036 55.337 li
51.7295 55.0985 mo
51.5762 54.9791 li
51.6955 54.8259 li
51.8487 54.9451 li
51.7295 55.0985 li
51.4229 54.8598 mo
51.2696 54.7405 li
51.3889 54.5873 li
51.5422 54.7066 li
51.4229 54.8598 li
51.1163 54.6213 mo
50.963 54.502 li
51.0823 54.3487 li
51.2356 54.468 li
51.1163 54.6213 li
50.8098 54.3827 mo
50.6564 54.2634 li
50.7757 54.1102 li
50.929 54.2295 li
50.8098 54.3827 li
50.5032 54.1441 mo
50.3499 54.0249 li
50.4691 53.8716 li
50.6225 53.9909 li
50.5032 54.1441 li
50.1966 53.9056 mo
50.0433 53.7863 li
50.1626 53.633 li
50.3159 53.7523 li
50.1966 53.9056 li
49.8901 53.667 mo
49.7367 53.5477 li
49.856 53.3944 li
50.0093 53.5137 li
49.8901 53.667 li
49.5835 53.4285 mo
49.4302 53.3092 li
49.5494 53.1559 li
49.7028 53.2751 li
49.5835 53.4285 li
49.2768 53.1898 mo
49.1236 53.0706 li
49.2429 52.9173 li
49.3961 53.0366 li
49.2768 53.1898 li
48.9703 52.9513 mo
48.817 52.832 li
48.9363 52.6788 li
49.0896 52.798 li
48.9703 52.9513 li
48.6637 52.7127 mo
48.5105 52.5934 li
48.6297 52.4402 li
48.783 52.5595 li
48.6637 52.7127 li
48.3571 52.4742 mo
48.2039 52.3549 li
48.3232 52.2016 li
48.4764 52.3209 li
48.3571 52.4742 li
48.0506 52.2356 mo
47.8973 52.1163 li
48.0166 51.9631 li
48.1699 52.0824 li
48.0506 52.2356 li
47.744 51.997 mo
47.5907 51.8778 li
47.71 51.7244 li
47.8633 51.8437 li
47.744 51.997 li
47.4374 51.7585 mo
47.2841 51.6392 li
47.4034 51.4859 li
47.5567 51.6052 li
47.4374 51.7585 li
47.1309 51.5199 mo
46.9776 51.4006 li
47.0968 51.2473 li
47.2502 51.3666 li
47.1309 51.5199 li
46.8243 51.2813 mo
46.671 51.162 li
46.7903 51.0088 li
46.9436 51.128 li
46.8243 51.2813 li
46.5177 51.0427 mo
46.3644 50.9235 li
46.4837 50.7702 li
46.637 50.8895 li
46.5177 51.0427 li
46.2112 50.8042 mo
46.0578 50.6849 li
46.1771 50.5317 li
46.3305 50.6509 li
46.2112 50.8042 li
45.9046 50.5656 mo
45.7513 50.4463 li
45.8706 50.2931 li
46.0239 50.4124 li
45.9046 50.5656 li
45.598 50.3271 mo
45.4447 50.2078 li
45.564 50.0545 li
45.7172 50.1738 li
45.598 50.3271 li
45.2914 50.0885 mo
45.1381 49.9692 li
45.2574 49.8159 li
45.4107 49.9352 li
45.2914 50.0885 li
44.9848 49.8499 mo
44.8316 49.7307 li
44.9509 49.5773 li
45.1041 49.6966 li
44.9848 49.8499 li
44.6783 49.6113 mo
44.525 49.492 li
44.6443 49.3388 li
44.7975 49.4581 li
44.6783 49.6113 li
44.3717 49.3727 mo
44.2185 49.2535 li
44.3377 49.1002 li
44.491 49.2195 li
44.3717 49.3727 li
44.0651 49.1342 mo
43.9118 49.0149 li
44.0311 48.8617 li
44.1844 48.9809 li
44.0651 49.1342 li
43.7586 48.8956 mo
43.6052 48.7764 li
43.7245 48.6231 li
43.8778 48.7424 li
43.7586 48.8956 li
43.452 48.6571 mo
43.2987 48.5378 li
43.4179 48.3846 li
43.5713 48.5038 li
43.452 48.6571 li
43.1454 48.4185 mo
42.9921 48.2992 li
43.1114 48.1459 li
43.2647 48.2652 li
43.1454 48.4185 li
42.8389 48.18 mo
42.6855 48.0607 li
42.8048 47.9074 li
42.9581 48.0266 li
42.8389 48.18 li
42.5323 47.9414 mo
42.379 47.822 li
42.4982 47.6688 li
42.6516 47.7881 li
42.5323 47.9414 li
42.2256 47.7028 mo
42.0724 47.5835 li
42.1917 47.4302 li
42.3449 47.5495 li
42.2256 47.7028 li
41.9191 47.4642 mo
41.7658 47.3449 li
41.8851 47.1917 li
42.0384 47.311 li
41.9191 47.4642 li
41.6125 47.2257 mo
41.4593 47.1064 li
41.5785 46.9531 li
41.7318 47.0724 li
41.6125 47.2257 li
41.3059 46.9871 mo
41.1527 46.8678 li
41.272 46.7146 li
41.4252 46.8339 li
41.3059 46.9871 li
40.9994 46.7485 mo
40.8461 46.6293 li
40.9654 46.4759 li
41.1187 46.5952 li
40.9994 46.7485 li
40.6928 46.51 mo
40.5395 46.3907 li
40.6588 46.2374 li
40.8121 46.3567 li
40.6928 46.51 li
40.3862 46.2714 mo
40.2329 46.1521 li
40.3522 45.9988 li
40.5055 46.1181 li
40.3862 46.2714 li
40.0797 46.0328 mo
40.067 46.0229 li
40.1007 45.99 40.1337 45.9564 40.1659 45.922 cv
40.0797 46.0328 li
.36408 .213107 0 0 cmyk
f
40.067 46.0229 mo
39.9264 45.9135 li
40.0456 45.7603 li
40.199 45.8795 li
40.1659 45.922 li
40.1337 45.9564 40.1007 45.99 40.067 46.0229 cv
.904997 .707607 .0103151 0 cmyk
f
69.4483 61.8963 mo
69.4305 61.8794 69.4126 61.8625 69.3946 61.8458 cv
69.4012 61.8402 li
69.4483 61.8963 li
.36408 .213107 0 0 cmyk
f
69.3773 62.1138 mo
69.2524 61.9651 li
69.3946 61.8458 li
69.4126 61.8625 69.4305 61.8794 69.4483 61.8963 cv
69.5261 61.989 li
69.3773 62.1138 li
.904997 .707607 .0103151 0 cmyk
f
69.6749 61.8641 mo
69.55 61.7153 li
69.6987 61.5905 li
69.8236 61.7392 li
69.6749 61.8641 li
69.9724 61.6144 mo
69.8475 61.4656 li
69.9962 61.3407 li
70.1212 61.4894 li
69.9724 61.6144 li
70.2699 61.3646 mo
70.145 61.2158 li
70.2938 61.0909 li
70.4187 61.2397 li
70.2699 61.3646 li
70.5674 61.1149 mo
70.4426 60.9661 li
70.5913 60.8412 li
70.7162 60.9899 li
70.5674 61.1149 li
70.865 60.8651 mo
70.7401 60.7164 li
70.8889 60.5914 li
71.0137 60.7402 li
70.865 60.8651 li
71.1625 60.6154 mo
71.0377 60.4666 li
71.1864 60.3417 li
71.3113 60.4904 li
71.1625 60.6154 li
71.46 60.3656 mo
71.3352 60.2168 li
71.484 60.092 li
71.6088 60.2407 li
71.46 60.3656 li
71.7576 60.1158 mo
71.6328 59.967 li
71.7815 59.8422 li
71.9063 59.991 li
71.7576 60.1158 li
72.0551 59.866 mo
71.9303 59.7173 li
72.079 59.5925 li
72.2039 59.7412 li
72.0551 59.866 li
72.3526 59.6163 mo
72.2278 59.4675 li
72.3766 59.3427 li
72.5014 59.4915 li
72.3526 59.6163 li
72.6502 59.3665 mo
72.5253 59.2178 li
72.6741 59.093 li
72.7989 59.2417 li
72.6502 59.3665 li
72.9477 59.1168 mo
72.8229 58.968 li
72.9716 58.8432 li
73.0964 58.992 li
72.9477 59.1168 li
73.2452 58.867 mo
73.1204 58.7183 li
73.2692 58.5934 li
73.394 58.7422 li
73.2452 58.867 li
73.5427 58.6173 mo
73.4179 58.4686 li
73.5667 58.3436 li
73.6915 58.4924 li
73.5427 58.6173 li
73.8403 58.3676 mo
73.7154 58.2188 li
73.8642 58.0939 li
73.9891 58.2426 li
73.8403 58.3676 li
74.1378 58.1178 mo
74.013 57.9691 li
74.1617 57.8441 li
74.2866 57.9929 li
74.1378 58.1178 li
74.4354 57.8681 mo
74.3105 57.7193 li
74.4593 57.5944 li
74.5842 57.7431 li
74.4354 57.8681 li
74.7329 57.6183 mo
74.608 57.4696 li
74.7568 57.3446 li
74.8817 57.4934 li
74.7329 57.6183 li
75.0305 57.3685 mo
74.9056 57.2198 li
75.0543 57.0949 li
75.1792 57.2437 li
75.0305 57.3685 li
75.328 57.1188 mo
75.2031 56.97 li
75.3519 56.8452 li
75.4768 56.9939 li
75.328 57.1188 li
75.6255 56.869 mo
75.5006 56.7202 li
75.6494 56.5954 li
75.7743 56.7442 li
75.6255 56.869 li
75.9231 56.6192 mo
75.7981 56.4705 li
75.9469 56.3457 li
76.0718 56.4944 li
75.9231 56.6192 li
76.2206 56.3695 mo
76.0957 56.2207 li
76.2444 56.0959 li
76.3693 56.2447 li
76.2206 56.3695 li
76.5181 56.1198 mo
76.3932 55.971 li
76.542 55.8461 li
76.6669 55.9949 li
76.5181 56.1198 li
76.8156 55.87 mo
76.6907 55.7213 li
76.8395 55.5964 li
76.9644 55.7451 li
76.8156 55.87 li
77.1132 55.6203 mo
76.9883 55.4715 li
77.137 55.3466 li
77.2619 55.4954 li
77.1132 55.6203 li
77.4107 55.3705 mo
77.2858 55.2218 li
77.4345 55.0969 li
77.5595 55.2456 li
77.4107 55.3705 li
77.7082 55.1208 mo
77.5833 54.972 li
77.7321 54.8471 li
77.857 54.9959 li
77.7082 55.1208 li
78.0057 54.871 mo
77.8809 54.7223 li
78.0296 54.5974 li
78.1545 54.7461 li
78.0057 54.871 li
78.3033 54.6213 mo
78.1784 54.4725 li
78.3272 54.3476 li
78.452 54.4964 li
78.3033 54.6213 li
78.6008 54.3715 mo
78.476 54.2227 li
78.6247 54.0979 li
78.7496 54.2466 li
78.6008 54.3715 li
78.8983 54.1217 mo
78.7735 53.973 li
78.9223 53.8481 li
79.0471 53.9969 li
78.8983 54.1217 li
79.1959 53.872 mo
79.071 53.7232 li
79.2198 53.5984 li
79.3446 53.7471 li
79.1959 53.872 li
79.4934 53.6222 mo
79.3686 53.4735 li
79.5173 53.3486 li
79.6422 53.4974 li
79.4934 53.6222 li
79.7909 53.3725 mo
79.6661 53.2237 li
79.8149 53.0989 li
79.9397 53.2476 li
79.7909 53.3725 li
80.0884 53.1227 mo
79.9636 52.974 li
80.1124 52.8491 li
80.2372 52.9979 li
80.0884 53.1227 li
80.386 52.873 mo
80.2612 52.7242 li
80.4099 52.5993 li
80.5347 52.7481 li
80.386 52.873 li
80.6835 52.6232 mo
80.5587 52.4745 li
80.7074 52.3496 li
80.8323 52.4983 li
80.6835 52.6232 li
80.981 52.3735 mo
80.8562 52.2247 li
81.005 52.0998 li
81.1298 52.2486 li
80.981 52.3735 li
81.2786 52.1237 mo
81.1537 51.975 li
81.3025 51.8501 li
81.4274 51.9988 li
81.2786 52.1237 li
81.5761 51.874 mo
81.4513 51.7252 li
81.6 51.6003 li
81.7249 51.7491 li
81.5761 51.874 li
81.8737 51.6242 mo
81.7488 51.4755 li
81.8976 51.3506 li
82.0225 51.4993 li
81.8737 51.6242 li
82.1712 51.3744 mo
82.0463 51.2257 li
82.1951 51.1008 li
82.32 51.2496 li
82.1712 51.3744 li
82.4688 51.1247 mo
82.3439 50.9759 li
82.4926 50.8511 li
82.6175 50.9998 li
82.4688 51.1247 li
82.7663 50.8749 mo
82.6414 50.7262 li
82.7901 50.6013 li
82.9151 50.7501 li
82.7663 50.8749 li
83.0638 50.6252 mo
82.9389 50.4764 li
83.0877 50.3516 li
83.2126 50.5004 li
83.0638 50.6252 li
83.3613 50.3754 mo
83.2364 50.2267 li
83.3852 50.1018 li
83.5101 50.2506 li
83.3613 50.3754 li
83.6589 50.1257 mo
83.534 49.9769 li
83.6827 49.852 li
83.8076 50.0008 li
83.6589 50.1257 li
83.9564 49.876 mo
83.8315 49.7272 li
83.9802 49.6023 li
84.1052 49.751 li
83.9564 49.876 li
84.2539 49.6262 mo
84.129 49.4774 li
84.2778 49.3525 li
84.4027 49.5013 li
84.2539 49.6262 li
84.5515 49.3765 mo
84.4266 49.2277 li
84.5753 49.1028 li
84.7002 49.2515 li
84.5515 49.3765 li
84.849 49.1267 mo
84.7241 48.978 li
84.8729 48.853 li
84.9978 49.0018 li
84.849 49.1267 li
85.1465 48.877 mo
85.0216 48.7282 li
85.1704 48.6033 li
85.2953 48.7521 li
85.1465 48.877 li
85.444 48.6272 mo
85.3192 48.4784 li
85.468 48.3536 li
85.5928 48.5023 li
85.444 48.6272 li
85.7416 48.3774 mo
85.6167 48.2286 li
85.7655 48.1038 li
85.8903 48.2526 li
85.7416 48.3774 li
86.0391 48.1276 mo
85.9143 47.9789 li
86.063 47.8541 li
86.1879 48.0028 li
86.0391 48.1276 li
86.3366 47.8779 mo
86.2118 47.7291 li
86.3606 47.6043 li
86.4854 47.7531 li
86.3366 47.8779 li
86.6341 47.6282 mo
86.5093 47.4794 li
86.6581 47.3546 li
86.7829 47.5033 li
86.6341 47.6282 li
86.9317 47.3784 mo
86.8069 47.2297 li
86.9556 47.1048 li
87.0804 47.2535 li
86.9317 47.3784 li
87.2292 47.1287 mo
87.1044 46.9799 li
87.2532 46.855 li
87.378 47.0037 li
87.2292 47.1287 li
87.5267 46.8789 mo
87.4019 46.7302 li
87.5507 46.6052 li
87.6755 46.754 li
87.5267 46.8789 li
87.8243 46.6292 mo
87.6994 46.4804 li
87.8482 46.3555 li
87.9731 46.5042 li
87.8243 46.6292 li
88.1218 46.3794 mo
87.997 46.2307 li
88.1457 46.1058 li
88.2706 46.2545 li
88.1218 46.3794 li
88.4194 46.1297 mo
88.2945 45.9809 li
88.3915 45.8995 li
88.4354 45.9473 88.4809 45.9938 88.5277 46.0387 cv
88.4194 46.1297 li
.36408 .213107 0 0 cmyk
f
88.5277 46.0387 mo
88.4809 45.9938 88.4354 45.9473 88.3915 45.8995 cv
88.4433 45.856 li
88.5681 46.0048 li
88.5277 46.0387 li
.904997 .707607 .0103151 0 cmyk
f
89.1132 103.652 mo
89.0905 103.63 89.0675 103.607 89.0444 103.585 cv
89.0207 103.562 88.9968 103.539 88.9727 103.517 cv
88.9774 103.511 li
89.1293 103.632 li
89.1132 103.652 li
.36408 .213107 0 0 cmyk
f
89.0081 103.784 mo
88.8563 103.663 li
88.9727 103.517 li
88.9968 103.539 89.0207 103.562 89.0444 103.585 cv
89.0675 103.607 89.0905 103.63 89.1132 103.652 cv
89.0081 103.784 li
.904997 .707607 .0103151 0 cmyk
f
89.2503 103.48 mo
89.0986 103.359 li
89.2196 103.207 li
89.3715 103.328 li
89.2503 103.48 li
89.4926 103.177 mo
89.3408 103.056 li
89.4619 102.904 li
89.6138 103.025 li
89.4926 103.177 li
89.7348 102.873 mo
89.583 102.752 li
89.7042 102.6 li
89.856 102.721 li
89.7348 102.873 li
89.9771 102.569 mo
89.8252 102.448 li
89.9464 102.296 li
90.0982 102.417 li
89.9771 102.569 li
90.2194 102.266 mo
90.0675 102.145 li
90.1886 101.993 li
90.3404 102.114 li
90.2194 102.266 li
90.4616 101.962 mo
90.3097 101.841 li
90.4308 101.689 li
90.5827 101.81 li
90.4616 101.962 li
90.7038 101.658 mo
90.552 101.537 li
90.6731 101.385 li
90.8249 101.506 li
90.7038 101.658 li
90.946 101.355 mo
90.7942 101.233 li
90.9153 101.082 li
91.0672 101.203 li
90.946 101.355 li
91.1883 101.051 mo
91.0365 100.93 li
91.1576 100.778 li
91.3094 100.899 li
91.1883 101.051 li
91.4305 100.747 mo
91.2787 100.626 li
91.3998 100.474 li
91.5517 100.595 li
91.4305 100.747 li
91.6728 100.444 mo
91.5209 100.322 li
91.6421 100.171 li
91.7939 100.292 li
91.6728 100.444 li
91.915 100.14 mo
91.7632 100.019 li
91.8843 99.8669 li
92.0361 99.988 li
91.915 100.14 li
92.1573 99.8362 mo
92.0054 99.715 li
92.1265 99.5632 li
92.2784 99.6843 li
92.1573 99.8362 li
92.3995 99.5325 mo
92.2477 99.4114 li
92.3687 99.2595 li
92.5206 99.3806 li
92.3995 99.5325 li
92.6417 99.2288 mo
92.4899 99.1077 li
92.611 98.9558 li
92.7629 99.077 li
92.6417 99.2288 li
92.8839 98.9251 mo
92.7321 98.804 li
92.8532 98.6522 li
93.0051 98.7732 li
92.8839 98.9251 li
93.1262 98.6214 mo
92.9743 98.5003 li
93.0955 98.3484 li
93.2474 98.4696 li
93.1262 98.6214 li
93.3685 98.3178 mo
93.2166 98.1967 li
93.3378 98.0448 li
93.4895 98.1659 li
93.3685 98.3178 li
93.6107 98.0141 mo
93.4588 97.8929 li
93.58 97.7411 li
93.7318 97.8623 li
93.6107 98.0141 li
93.853 97.7104 mo
93.7011 97.5893 li
93.8222 97.4375 li
93.974 97.5585 li
93.853 97.7104 li
94.0952 97.4067 mo
93.9433 97.2856 li
94.0644 97.1337 li
94.2163 97.2549 li
94.0952 97.4067 li
94.3374 97.103 mo
94.1856 96.9819 li
94.3067 96.8301 li
94.4585 96.9512 li
94.3374 97.103 li
94.5796 96.7994 mo
94.4278 96.6782 li
94.5489 96.5264 li
94.7008 96.6475 li
94.5796 96.7994 li
94.8219 96.4957 mo
94.67 96.3746 li
94.7912 96.2227 li
94.9431 96.3438 li
94.8219 96.4957 li
95.0641 96.192 mo
94.9123 96.0709 li
95.0334 95.919 li
95.1852 96.0402 li
95.0641 96.192 li
95.3064 95.8883 mo
95.1545 95.7672 li
95.2757 95.6154 li
95.4275 95.7364 li
95.3064 95.8883 li
95.5486 95.5846 mo
95.3968 95.4635 li
95.5179 95.3116 li
95.6697 95.4328 li
95.5486 95.5846 li
95.7909 95.2809 mo
95.639 95.1599 li
95.7601 95.008 li
95.912 95.1291 li
95.7909 95.2809 li
96.0331 94.9773 mo
95.8813 94.8561 li
96.0023 94.7043 li
96.1542 94.8254 li
96.0331 94.9773 li
96.2753 94.6736 mo
96.1235 94.5525 li
96.2446 94.4006 li
96.3965 94.5217 li
96.2753 94.6736 li
96.5176 94.3699 mo
96.3657 94.2488 li
96.4869 94.0969 li
96.6387 94.2181 li
96.5176 94.3699 li
96.7598 94.0662 mo
96.6079 93.9451 li
96.7291 93.7933 li
96.881 93.9143 li
96.7598 94.0662 li
97.0021 93.7626 mo
96.8502 93.6414 li
96.9714 93.4895 li
97.1231 93.6107 li
97.0021 93.7626 li
97.2443 93.4588 mo
97.0924 93.3378 li
97.2136 93.1859 li
97.3654 93.307 li
97.2443 93.4588 li
97.4866 93.1552 mo
97.3347 93.034 li
97.4558 92.8822 li
97.6076 93.0034 li
97.4866 93.1552 li
97.7288 92.8515 mo
97.5769 92.7304 li
97.698 92.5786 li
97.8499 92.6996 li
97.7288 92.8515 li
97.971 92.5479 mo
97.8192 92.4267 li
97.9403 92.2748 li
98.0922 92.396 li
97.971 92.5479 li
98.2132 92.2441 mo
98.0614 92.1231 li
98.1825 91.9712 li
98.3344 92.0923 li
98.2132 92.2441 li
98.4555 91.9405 mo
98.3036 91.8193 li
98.4248 91.6675 li
98.5766 91.7886 li
98.4555 91.9405 li
98.6977 91.6368 mo
98.5459 91.5157 li
98.667 91.3638 li
98.8188 91.4849 li
98.6977 91.6368 li
98.94 91.3331 mo
98.7881 91.212 li
98.9093 91.0601 li
99.0611 91.1813 li
98.94 91.3331 li
99.1822 91.0294 mo
99.0304 90.9083 li
99.1515 90.7565 li
99.3033 90.8775 li
99.1822 91.0294 li
99.4245 90.7258 mo
99.2726 90.6046 li
99.3937 90.4528 li
99.5456 90.5739 li
99.4245 90.7258 li
99.6667 90.422 mo
99.5149 90.301 li
99.6359 90.1491 li
99.7878 90.2702 li
99.6667 90.422 li
99.9089 90.1184 mo
99.7571 89.9972 li
99.8782 89.8454 li
100.03 89.9666 li
99.9089 90.1184 li
100.151 89.8147 mo
99.9993 89.6936 li
100.12 89.5418 li
100.272 89.6628 li
100.151 89.8147 li
100.393 89.5111 mo
100.242 89.3899 li
100.363 89.2381 li
100.515 89.3592 li
100.393 89.5111 li
100.636 89.2073 mo
100.484 89.0863 li
100.605 88.9344 li
100.757 89.0555 li
100.636 89.2073 li
100.878 88.9037 mo
100.726 88.7825 li
100.847 88.6307 li
100.999 88.7518 li
100.878 88.9037 li
101.12 88.6 mo
100.968 88.4789 li
101.089 88.327 li
101.241 88.4481 li
101.12 88.6 li
101.362 88.2963 mo
101.21 88.1752 li
101.332 88.0233 li
101.483 88.1445 li
101.362 88.2963 li
101.605 87.9926 mo
101.453 87.8715 li
101.574 87.7197 li
101.726 87.8408 li
101.605 87.9926 li
101.847 87.689 mo
101.695 87.5678 li
101.816 87.416 li
101.968 87.5371 li
101.847 87.689 li
102.089 87.3852 mo
101.937 87.2642 li
102.058 87.1123 li
102.21 87.2334 li
102.089 87.3852 li
102.331 87.0816 mo
102.179 86.9605 li
102.301 86.8086 li
102.452 86.9298 li
102.331 87.0816 li
102.574 86.7779 mo
102.422 86.6568 li
102.543 86.505 li
102.695 86.626 li
102.574 86.7779 li
102.816 86.4743 mo
102.664 86.3531 li
102.785 86.2013 li
102.937 86.3224 li
102.816 86.4743 li
103.058 86.1705 mo
102.906 86.0495 li
103.027 85.8976 li
103.179 86.0187 li
103.058 86.1705 li
103.3 85.8669 mo
103.148 85.7457 li
103.27 85.5939 li
103.421 85.715 li
103.3 85.8669 li
103.543 85.5632 mo
103.391 85.4421 li
103.512 85.2903 li
103.664 85.4113 li
103.543 85.5632 li
103.785 85.2595 mo
103.633 85.1384 li
103.754 84.9865 li
103.906 85.1077 li
103.785 85.2595 li
104.027 84.9558 mo
103.875 84.8348 li
103.996 84.6829 li
104.148 84.804 li
104.027 84.9558 li
104.269 84.6522 mo
104.117 84.531 li
104.238 84.3792 li
104.39 84.5003 li
104.269 84.6522 li
104.511 84.3485 mo
104.36 84.2274 li
104.481 84.0755 li
104.633 84.1966 li
104.511 84.3485 li
104.754 84.0448 mo
104.602 83.9237 li
104.723 83.7719 li
104.875 83.893 li
104.754 84.0448 li
104.996 83.7411 mo
104.844 83.62 li
104.965 83.4682 li
105.117 83.5892 li
104.996 83.7411 li
105.238 83.4375 mo
105.086 83.3163 li
105.207 83.1645 li
105.359 83.2856 li
105.238 83.4375 li
105.437 83.0994 mo
105.329 83.0127 li
105.338 83.0007 li
105.37 83.0343 105.404 83.0673 105.437 83.0994 cv
.36408 .213107 0 0 cmyk
f
105.48 83.1337 mo
105.437 83.0994 li
105.404 83.0673 105.37 83.0343 105.338 83.0007 cv
105.439 82.8745 li
105.591 82.9956 li
105.48 83.1337 li
.904997 .707607 .0103151 0 cmyk
f
105.178 131.394 mo
105.133 131.34 li
105.281 131.215 li
105.316 131.257 li
105.268 131.301 105.222 131.347 105.178 131.394 cv
.36408 .213107 0 0 cmyk
f
105.258 131.489 mo
105.178 131.394 li
105.222 131.347 105.268 131.301 105.316 131.257 cv
105.406 131.364 li
105.258 131.489 li
.904997 .707607 .0103151 0 cmyk
f
105.007 131.192 mo
104.882 131.043 li
105.031 130.918 li
105.156 131.067 li
105.007 131.192 li
104.757 130.895 mo
104.632 130.746 li
104.78 130.621 li
104.906 130.77 li
104.757 130.895 li
104.507 130.598 mo
104.381 130.449 li
104.53 130.324 li
104.655 130.473 li
104.507 130.598 li
104.256 130.301 mo
104.131 130.152 li
104.28 130.027 li
104.405 130.176 li
104.256 130.301 li
104.006 130.004 mo
103.881 129.855 li
104.029 129.73 li
104.154 129.879 li
104.006 130.004 li
103.756 129.707 mo
103.63 129.558 li
103.779 129.433 li
103.904 129.582 li
103.756 129.707 li
103.505 129.41 mo
103.38 129.261 li
103.528 129.136 li
103.654 129.285 li
103.505 129.41 li
103.255 129.113 mo
103.13 128.964 li
103.278 128.839 li
103.403 128.988 li
103.255 129.113 li
103.004 128.816 mo
102.879 128.667 li
103.028 128.542 li
103.153 128.691 li
103.004 128.816 li
102.754 128.519 mo
102.629 128.37 li
102.777 128.245 li
102.903 128.394 li
102.754 128.519 li
102.504 128.222 mo
102.378 128.073 li
102.527 127.948 li
102.652 128.097 li
102.504 128.222 li
102.253 127.925 mo
102.128 127.776 li
102.277 127.651 li
102.402 127.8 li
102.253 127.925 li
102.003 127.628 mo
101.878 127.479 li
102.026 127.354 li
102.151 127.503 li
102.003 127.628 li
101.752 127.331 mo
101.627 127.182 li
101.776 127.057 li
101.901 127.206 li
101.752 127.331 li
101.502 127.034 mo
101.377 126.885 li
101.525 126.76 li
101.651 126.909 li
101.502 127.034 li
101.252 126.737 mo
101.127 126.588 li
101.275 126.463 li
101.4 126.612 li
101.252 126.737 li
101.001 126.44 mo
100.876 126.291 li
101.025 126.166 li
101.15 126.315 li
101.001 126.44 li
100.751 126.143 mo
100.626 125.994 li
100.774 125.869 li
100.899 126.018 li
100.751 126.143 li
100.501 125.846 mo
100.375 125.697 li
100.524 125.572 li
100.649 125.721 li
100.501 125.846 li
100.25 125.549 mo
100.125 125.4 li
100.274 125.275 li
100.399 125.424 li
100.25 125.549 li
99.9998 125.252 mo
99.8746 125.103 li
100.023 124.978 li
100.148 125.127 li
99.9998 125.252 li
99.7495 124.955 mo
99.6243 124.806 li
99.7728 124.681 li
99.8979 124.83 li
99.7495 124.955 li
99.4991 124.658 mo
99.3739 124.509 li
99.5224 124.384 li
99.6476 124.533 li
99.4991 124.658 li
99.2487 124.361 mo
99.1236 124.212 li
99.272 124.087 li
99.3972 124.236 li
99.2487 124.361 li
98.9983 124.064 mo
98.8731 123.915 li
99.0217 123.79 li
99.1468 123.939 li
98.9983 124.064 li
98.7479 123.767 mo
98.6227 123.618 li
98.7713 123.493 li
98.8965 123.642 li
98.7479 123.767 li
98.4976 123.47 mo
98.3724 123.321 li
98.5209 123.196 li
98.6461 123.345 li
98.4976 123.47 li
98.2472 123.173 mo
98.122 123.024 li
98.2705 122.899 li
98.3957 123.048 li
98.2472 123.173 li
97.9968 122.876 mo
97.8717 122.727 li
98.0201 122.602 li
98.1453 122.751 li
97.9968 122.876 li
97.7465 122.579 mo
97.6212 122.43 li
97.7698 122.305 li
97.8949 122.454 li
97.7465 122.579 li
97.496 122.282 mo
97.3708 122.133 li
97.5194 122.008 li
97.6446 122.157 li
97.496 122.282 li
97.2457 121.985 mo
97.1205 121.836 li
97.269 121.711 li
97.3942 121.86 li
97.2457 121.985 li
96.9953 121.688 mo
96.8701 121.539 li
97.0186 121.414 li
97.1438 121.563 li
96.9953 121.688 li
96.7449 121.391 mo
96.6198 121.242 li
96.7682 121.117 li
96.8934 121.266 li
96.7449 121.391 li
96.4946 121.094 mo
96.3694 120.945 li
96.5179 120.82 li
96.643 120.969 li
96.4946 121.094 li
96.2441 120.797 mo
96.1189 120.648 li
96.2675 120.523 li
96.3927 120.672 li
96.2441 120.797 li
95.9938 120.5 mo
95.8686 120.351 li
96.0171 120.226 li
96.1423 120.375 li
95.9938 120.5 li
95.7434 120.203 mo
95.6182 120.054 li
95.7667 119.929 li
95.8919 120.078 li
95.7434 120.203 li
95.493 119.906 mo
95.3678 119.757 li
95.5163 119.632 li
95.6415 119.781 li
95.493 119.906 li
95.2427 119.609 mo
95.1175 119.46 li
95.266 119.335 li
95.3911 119.484 li
95.2427 119.609 li
94.9922 119.312 mo
94.867 119.163 li
95.0156 119.038 li
95.1408 119.187 li
94.9922 119.312 li
94.7419 119.015 mo
94.6167 118.866 li
94.7652 118.741 li
94.8904 118.89 li
94.7419 119.015 li
94.4915 118.718 mo
94.3663 118.569 li
94.5148 118.444 li
94.64 118.593 li
94.4915 118.718 li
94.2411 118.421 mo
94.1159 118.272 li
94.2644 118.147 li
94.3896 118.296 li
94.2411 118.421 li
93.9908 118.124 mo
93.8656 117.975 li
94.0141 117.85 li
94.1392 117.999 li
93.9908 118.124 li
93.7404 117.827 mo
93.6151 117.678 li
93.7637 117.553 li
93.8889 117.702 li
93.7404 117.827 li
93.49 117.53 mo
93.3648 117.381 li
93.5133 117.256 li
93.6385 117.404 li
93.49 117.53 li
93.2396 117.233 mo
93.1144 117.084 li
93.263 116.959 li
93.3881 117.108 li
93.2396 117.233 li
92.9892 116.936 mo
92.864 116.787 li
93.0125 116.662 li
93.1377 116.811 li
92.9892 116.936 li
92.7389 116.639 mo
92.6137 116.49 li
92.7622 116.365 li
92.8873 116.514 li
92.7389 116.639 li
92.4885 116.342 mo
92.3632 116.193 li
92.5118 116.068 li
92.637 116.216 li
92.4885 116.342 li
92.2381 116.045 mo
92.1129 115.896 li
92.2614 115.771 li
92.3866 115.92 li
92.2381 116.045 li
91.9877 115.748 mo
91.8625 115.599 li
92.0111 115.474 li
92.1362 115.623 li
91.9877 115.748 li
91.7373 115.451 mo
91.6121 115.302 li
91.7606 115.177 li
91.8858 115.325 li
91.7373 115.451 li
91.487 115.154 mo
91.3618 115.005 li
91.5103 114.88 li
91.6354 115.028 li
91.487 115.154 li
91.2366 114.857 mo
91.1114 114.708 li
91.2599 114.583 li
91.3851 114.732 li
91.2366 114.857 li
90.9862 114.56 mo
90.861 114.411 li
91.0095 114.286 li
91.1347 114.434 li
90.9862 114.56 li
90.7358 114.263 mo
90.6106 114.114 li
90.7592 113.989 li
90.8843 114.137 li
90.7358 114.263 li
90.4854 113.966 mo
90.3602 113.817 li
90.5087 113.692 li
90.6339 113.84 li
90.4854 113.966 li
90.2351 113.669 mo
90.1099 113.52 li
90.2583 113.395 li
90.3835 113.543 li
90.2351 113.669 li
89.9847 113.372 mo
89.8595 113.223 li
90.008 113.098 li
90.1332 113.246 li
89.9847 113.372 li
89.7343 113.075 mo
89.6091 112.926 li
89.7576 112.801 li
89.8828 112.949 li
89.7343 113.075 li
89.4839 112.778 mo
89.3587 112.629 li
89.5073 112.504 li
89.6324 112.652 li
89.4839 112.778 li
89.2335 112.481 mo
89.1083 112.332 li
89.2568 112.207 li
89.382 112.355 li
89.2335 112.481 li
88.9832 112.184 mo
88.9736 112.172 li
88.9974 112.15 89.021 112.128 89.0444 112.105 cv
89.0677 112.083 89.0908 112.06 89.1138 112.037 cv
89.1316 112.058 li
88.9832 112.184 li
.36408 .213107 0 0 cmyk
f
88.9736 112.172 mo
88.858 112.035 li
89.0064 111.91 li
89.1138 112.037 li
89.0908 112.06 89.0677 112.083 89.0444 112.105 cv
89.021 112.128 88.9974 112.15 88.9736 112.172 cv
.904997 .707607 .0103151 0 cmyk
f
47.2918 103.774 mo
47.2422 103.737 li
47.3575 103.581 li
47.407 103.617 li
47.2918 103.774 li
f
47.0858 103.622 mo
46.9295 103.507 li
47.0447 103.35 li
47.2011 103.466 li
47.0858 103.622 li
46.7731 103.391 mo
46.6167 103.276 li
46.732 103.12 li
46.8884 103.235 li
46.7731 103.391 li
46.4604 103.161 mo
46.304 103.046 li
46.4192 102.89 li
46.5756 103.005 li
46.4604 103.161 li
46.1476 102.931 mo
45.9913 102.815 li
46.1065 102.659 li
46.2628 102.774 li
46.1476 102.931 li
45.8349 102.7 mo
45.6785 102.585 li
45.7937 102.429 li
45.9501 102.544 li
45.8349 102.7 li
45.5221 102.47 mo
45.3658 102.355 li
45.481 102.198 li
45.6373 102.313 li
45.5221 102.47 li
45.2094 102.239 mo
45.053 102.124 li
45.1682 101.968 li
45.3246 102.083 li
45.2094 102.239 li
44.8967 102.009 mo
44.7403 101.894 li
44.8555 101.737 li
45.0119 101.853 li
44.8967 102.009 li
44.5839 101.778 mo
44.4276 101.663 li
44.5428 101.507 li
44.6991 101.622 li
44.5839 101.778 li
44.2712 101.548 mo
44.1148 101.433 li
44.23 101.277 li
44.3864 101.392 li
44.2712 101.548 li
43.9585 101.318 mo
43.8021 101.202 li
43.9173 101.046 li
44.0736 101.161 li
43.9585 101.318 li
43.6457 101.087 mo
43.4894 100.972 li
43.6045 100.816 li
43.7609 100.931 li
43.6457 101.087 li
43.333 100.857 mo
43.1766 100.742 li
43.2918 100.585 li
43.4482 100.7 li
43.333 100.857 li
43.0202 100.626 mo
42.8638 100.511 li
42.9791 100.355 li
43.1354 100.47 li
43.0202 100.626 li
42.7075 100.396 mo
42.5511 100.281 li
42.6663 100.124 li
42.8227 100.24 li
42.7075 100.396 li
42.3947 100.166 mo
42.2383 100.05 li
42.3536 99.894 li
42.51 100.009 li
42.3947 100.166 li
42.082 99.9351 mo
41.9256 99.8199 li
42.0409 99.6636 li
42.1972 99.7787 li
42.082 99.9351 li
41.7692 99.7047 mo
41.6128 99.5895 li
41.7281 99.4331 li
41.8845 99.5483 li
41.7692 99.7047 li
41.4565 99.4743 mo
41.3001 99.3591 li
41.4154 99.2027 li
41.5718 99.318 li
41.4565 99.4743 li
41.1437 99.2439 mo
40.9874 99.1286 li
41.1026 98.9723 li
41.259 99.0875 li
41.1437 99.2439 li
40.831 99.0134 mo
40.6746 98.8983 li
40.7899 98.7419 li
40.9463 98.8571 li
40.831 99.0134 li
40.5183 98.783 mo
40.3619 98.6678 li
40.4771 98.5115 li
40.6335 98.6266 li
40.5183 98.783 li
40.2055 98.5526 mo
40.0492 98.4374 li
40.1643 98.281 li
40.3207 98.3962 li
40.2055 98.5526 li
39.8928 98.3222 mo
39.7364 98.207 li
39.8516 98.0506 li
40.008 98.1658 li
39.8928 98.3222 li
39.5801 98.0918 mo
39.4237 97.9765 li
39.5389 97.8202 li
39.6952 97.9354 li
39.5801 98.0918 li
39.2673 97.8613 mo
39.111 97.7461 li
39.2261 97.5897 li
39.3825 97.705 li
39.2673 97.8613 li
38.9546 97.6309 mo
38.7982 97.5157 li
38.9134 97.3594 li
39.0698 97.4745 li
38.9546 97.6309 li
38.6419 97.4005 mo
38.4855 97.2853 li
38.6007 97.1289 li
38.757 97.2441 li
38.6419 97.4005 li
38.3291 97.17 mo
38.2104 97.0826 li
38.3194 96.9217 li
38.4443 97.0136 li
38.3291 97.17 li
.36408 .213107 0 0 cmyk
f
38.2104 97.0826 mo
38.1727 97.0548 li
38.2879 96.8985 li
38.3194 96.9217 li
38.2104 97.0826 li
1 .87277 .340093 .34934 cmyk
f
38.0164 96.9397 mo
37.86 96.8244 li
37.9752 96.668 li
38.1316 96.7833 li
38.0164 96.9397 li
37.7036 96.7092 mo
37.5473 96.594 li
37.6625 96.4376 li
37.8188 96.5529 li
37.7036 96.7092 li
37.3909 96.4788 mo
37.2345 96.3636 li
37.3497 96.2072 li
37.5061 96.3224 li
37.3909 96.4788 li
37.0781 96.2483 mo
36.9217 96.1332 li
37.037 95.9768 li
37.1933 96.092 li
37.0781 96.2483 li
36.7654 96.0179 mo
36.609 95.9027 li
36.7242 95.7464 li
36.8806 95.8615 li
36.7654 96.0179 li
36.4526 95.7875 mo
36.2962 95.6723 li
36.4115 95.5159 li
36.5679 95.6311 li
36.4526 95.7875 li
36.1399 95.5571 mo
35.9835 95.4419 li
36.0988 95.2855 li
36.2551 95.4008 li
36.1399 95.5571 li
35.8271 95.3267 mo
35.6708 95.2114 li
35.786 95.0551 li
35.9424 95.1703 li
35.8271 95.3267 li
35.5144 95.0962 mo
35.358 94.9811 li
35.4733 94.8247 li
35.6297 94.9399 li
35.5144 95.0962 li
35.2017 94.8658 mo
35.0453 94.7506 li
35.1605 94.5943 li
35.3169 94.7094 li
35.2017 94.8658 li
34.8889 94.6354 mo
34.7326 94.5202 li
34.8478 94.3638 li
35.0041 94.479 li
34.8889 94.6354 li
34.5762 94.405 mo
34.4198 94.2897 li
34.535 94.1334 li
34.6914 94.2486 li
34.5762 94.405 li
34.2634 94.1746 mo
34.1071 94.0593 li
34.2223 93.9029 li
34.3786 94.0182 li
34.2634 94.1746 li
33.9507 93.9441 mo
33.7943 93.8289 li
33.9095 93.6726 li
34.0659 93.7878 li
33.9507 93.9441 li
33.638 93.7137 mo
33.4816 93.5985 li
33.5968 93.4422 li
33.7531 93.5573 li
33.638 93.7137 li
33.3252 93.4832 mo
33.1689 93.3681 li
33.284 93.2117 li
33.4404 93.3269 li
33.3252 93.4832 li
33.0125 93.2529 mo
32.8561 93.1376 li
32.9713 92.9813 li
33.1277 93.0965 li
33.0125 93.2529 li
32.6998 93.0225 mo
32.5434 92.9072 li
32.6586 92.7508 li
32.8149 92.8661 li
32.6998 93.0225 li
32.387 92.792 mo
32.2307 92.6768 li
32.3458 92.5204 li
32.5022 92.6357 li
32.387 92.792 li
32.0743 92.5616 mo
31.9179 92.4464 li
32.0331 92.29 li
32.1895 92.4052 li
32.0743 92.5616 li
31.7615 92.3311 mo
31.6051 92.216 li
31.7204 92.0596 li
31.8767 92.1748 li
31.7615 92.3311 li
31.4488 92.1007 mo
31.2924 91.9855 li
31.4076 91.8292 li
31.564 91.9443 li
31.4488 92.1007 li
31.136 91.8704 mo
30.9796 91.7551 li
31.0949 91.5987 li
31.2513 91.714 li
31.136 91.8704 li
30.8233 91.6399 mo
30.6669 91.5246 li
30.7822 91.3683 li
30.9385 91.4836 li
30.8233 91.6399 li
30.5105 91.4095 mo
30.3542 91.2943 li
30.4694 91.1379 li
30.6258 91.2531 li
30.5105 91.4095 li
30.1978 91.179 mo
30.0414 91.0639 li
30.1567 90.9075 li
30.3131 91.0227 li
30.1978 91.179 li
29.885 90.9486 mo
29.7287 90.8334 li
29.8439 90.6771 li
30.0003 90.7922 li
29.885 90.9486 li
29.5723 90.7182 mo
29.4159 90.603 li
29.5312 90.4466 li
29.6875 90.5618 li
29.5723 90.7182 li
29.2596 90.4878 mo
29.1032 90.3725 li
29.2184 90.2162 li
29.3748 90.3315 li
29.2596 90.4878 li
28.9468 90.2574 mo
28.7905 90.1421 li
28.9056 89.9857 li
29.062 90.101 li
28.9468 90.2574 li
28.6341 90.0269 mo
28.4777 89.9118 li
28.5929 89.7554 li
28.7493 89.8706 li
28.6341 90.0269 li
28.3214 89.7965 mo
28.165 89.6813 li
28.2802 89.525 li
28.4365 89.6401 li
28.3214 89.7965 li
28.0086 89.566 mo
27.8523 89.4509 li
27.9674 89.2945 li
28.1238 89.4097 li
28.0086 89.566 li
27.6959 89.3357 mo
27.5395 89.2204 li
27.6547 89.0641 li
27.8111 89.1793 li
27.6959 89.3357 li
27.3832 89.1053 mo
27.2268 88.99 li
27.342 88.8336 li
27.4983 88.9489 li
27.3832 89.1053 li
27.0704 88.8748 mo
26.9141 88.7596 li
27.0292 88.6032 li
27.1856 88.7185 li
27.0704 88.8748 li
26.7577 88.6444 mo
26.6013 88.5292 li
26.7165 88.3728 li
26.8729 88.488 li
26.7577 88.6444 li
26.4449 88.4139 mo
26.2886 88.2988 li
26.4038 88.1424 li
26.5601 88.2576 li
26.4449 88.4139 li
26.1322 88.1835 mo
25.9758 88.0683 li
26.091 87.912 li
26.2474 88.0271 li
26.1322 88.1835 li
25.8194 87.9532 mo
25.663 87.8379 li
25.7783 87.6815 li
25.9346 87.7968 li
25.8194 87.9532 li
25.5066 87.7227 mo
25.3503 87.6075 li
25.4655 87.4511 li
25.6219 87.5664 li
25.5066 87.7227 li
25.1939 87.4923 mo
25.0375 87.3771 li
25.1528 87.2207 li
25.3092 87.3359 li
25.1939 87.4923 li
24.8812 87.2618 mo
24.7248 87.1467 li
24.8401 86.9903 li
24.9964 87.1055 li
24.8812 87.2618 li
24.5684 87.0314 mo
24.4121 86.9162 li
24.5273 86.7599 li
24.6837 86.875 li
24.5684 87.0314 li
24.2557 86.801 mo
24.0993 86.6858 li
24.2146 86.5294 li
24.371 86.6446 li
24.2557 86.801 li
23.943 86.5706 mo
23.7866 86.4553 li
23.9018 86.299 li
24.0582 86.4143 li
23.943 86.5706 li
23.6302 86.3402 mo
23.4739 86.2249 li
23.5891 86.0686 li
23.7454 86.1838 li
23.6302 86.3402 li
23.3175 86.1097 mo
23.1611 85.9946 li
23.2763 85.8382 li
23.4327 85.9534 li
23.3175 86.1097 li
23.0048 85.8793 mo
22.8484 85.7641 li
22.9636 85.6078 li
23.1199 85.7229 li
23.0048 85.8793 li
22.692 85.6488 mo
22.5356 85.5337 li
22.6508 85.3773 li
22.8072 85.4925 li
22.692 85.6488 li
22.3793 85.4185 mo
22.2229 85.3032 li
22.3381 85.1469 li
22.4945 85.2621 li
22.3793 85.4185 li
22.0665 85.1881 mo
21.9102 85.0728 li
22.0253 84.9164 li
22.1817 85.0317 li
22.0665 85.1881 li
21.7538 84.9576 mo
21.5974 84.8424 li
21.7126 84.6861 li
21.869 84.8013 li
21.7538 84.9576 li
21.4411 84.7272 mo
21.2847 84.612 li
21.3999 84.4557 li
21.5562 84.5708 li
21.4411 84.7272 li
21.1283 84.4967 mo
20.972 84.3816 li
21.0871 84.2252 li
21.2435 84.3404 li
21.1283 84.4967 li
20.8156 84.2663 mo
20.6592 84.1511 li
20.7744 83.9948 li
20.9308 84.11 li
20.8156 84.2663 li
20.5028 84.036 mo
20.3464 83.9207 li
20.4617 83.7643 li
20.618 83.8796 li
20.5028 84.036 li
20.1901 83.8055 mo
20.0337 83.6903 li
20.1489 83.5339 li
20.3053 83.6492 li
20.1901 83.8055 li
19.8773 83.5751 mo
19.7209 83.4599 li
19.8362 83.3036 li
19.9926 83.4187 li
19.8773 83.5751 li
19.5646 83.3446 mo
19.4082 83.2295 li
19.5235 83.0731 li
19.6798 83.1883 li
19.5646 83.3446 li
19.2518 83.1142 mo
19.0955 82.999 li
19.2107 82.8427 li
19.3671 82.9578 li
19.2518 83.1142 li
18.9391 82.8838 mo
18.7827 82.7686 li
18.898 82.6122 li
19.0544 82.7275 li
18.9391 82.8838 li
18.6263 82.6534 mo
18.47 82.5381 li
18.5852 82.3818 li
18.7416 82.497 li
18.6263 82.6534 li
18.3136 82.423 mo
18.1572 82.3078 li
18.2725 82.1514 li
18.4289 82.2666 li
18.3136 82.423 li
18.0009 82.1925 mo
17.8445 82.0774 li
17.9597 81.921 li
18.1161 82.0362 li
18.0009 82.1925 li
17.6881 81.9621 mo
17.5318 81.8469 li
17.6469 81.6906 li
17.8033 81.8057 li
17.6881 81.9621 li
17.3754 81.7317 mo
17.219 81.6165 li
17.3342 81.4601 li
17.4906 81.5753 li
17.3754 81.7317 li
17.0627 81.5013 mo
16.9063 81.386 li
17.0215 81.2297 li
17.1778 81.3449 li
17.0627 81.5013 li
16.7499 81.2709 mo
16.5936 81.1556 li
16.7087 80.9992 li
16.8651 81.1145 li
16.7499 81.2709 li
16.5319 80.9119 mo
16.5322 80.8978 16.5324 80.8835 16.5325 80.8694 cv
16.5524 80.8841 li
16.5319 80.9119 li
.36408 .213107 0 0 cmyk
f
16.4372 81.0404 mo
16.2808 80.9252 li
16.396 80.7689 li
16.5325 80.8694 li
16.5324 80.8835 16.5322 80.8978 16.5319 80.9119 cv
16.4372 81.0404 li
.904997 .707607 .0103151 0 cmyk
f
15.1065 131.209 mo
15.0793 131.181 15.0518 131.152 15.0235 131.125 cv
15.0475 131.11 li
15.1065 131.209 li
.36408 .213107 0 0 cmyk
f
14.98 131.377 mo
14.8806 131.21 li
15.0235 131.125 li
15.0518 131.152 15.0793 131.181 15.1065 131.209 cv
15.1468 131.277 li
14.98 131.377 li
.904997 .707607 .0103151 0 cmyk
f
15.3137 131.178 mo
15.2195 131.02 li
15.233 131 li
15.3812 130.912 li
15.4806 131.078 li
15.3137 131.178 li
.36408 .213107 0 0 cmyk
f
15.2195 131.02 mo
15.2143 131.011 li
15.233 131 li
15.2195 131.02 li
1 .87277 .340093 .34934 cmyk
f
15.6475 130.979 mo
15.5481 130.812 li
15.715 130.713 li
15.8143 130.88 li
15.6475 130.979 li
15.9812 130.78 mo
15.8819 130.613 li
16.0488 130.514 li
16.1482 130.681 li
15.9812 130.78 li
16.3151 130.582 mo
16.2157 130.415 li
16.3826 130.315 li
16.4819 130.482 li
16.3151 130.582 li
16.6488 130.383 mo
16.5494 130.216 li
16.7163 130.117 li
16.8157 130.284 li
16.6488 130.383 li
16.9826 130.184 mo
16.8832 130.017 li
17.0501 129.918 li
17.1495 130.085 li
16.9826 130.184 li
17.3164 129.985 mo
17.217 129.819 li
17.3839 129.719 li
17.4833 129.886 li
17.3164 129.985 li
17.6502 129.787 mo
17.5508 129.62 li
17.7177 129.52 li
17.817 129.687 li
17.6502 129.787 li
17.9839 129.588 mo
17.8845 129.421 li
18.0514 129.322 li
18.1508 129.489 li
17.9839 129.588 li
18.3177 129.389 mo
18.2184 129.222 li
18.3853 129.123 li
18.4846 129.29 li
18.3177 129.389 li
18.6515 129.191 mo
18.5521 129.024 li
18.719 128.924 li
18.8184 129.091 li
18.6515 129.191 li
18.9853 128.992 mo
18.8859 128.825 li
19.0528 128.726 li
19.1521 128.892 li
18.9853 128.992 li
19.319 128.793 mo
19.2196 128.626 li
19.3866 128.527 li
19.4859 128.694 li
19.319 128.793 li
19.6529 128.594 mo
19.5535 128.427 li
19.7204 128.328 li
19.8197 128.495 li
19.6529 128.594 li
19.9866 128.396 mo
19.8872 128.229 li
20.0541 128.129 li
20.1535 128.296 li
19.9866 128.396 li
20.3204 128.197 mo
20.221 128.03 li
20.3879 127.931 li
20.4872 128.098 li
20.3204 128.197 li
20.6541 127.998 mo
20.5548 127.831 li
20.7217 127.732 li
20.8211 127.899 li
20.6541 127.998 li
20.988 127.799 mo
20.8886 127.633 li
21.0555 127.533 li
21.1549 127.7 li
20.988 127.799 li
21.3217 127.601 mo
21.2224 127.434 li
21.3892 127.334 li
21.4886 127.501 li
21.3217 127.601 li
21.6555 127.402 mo
21.5561 127.235 li
21.723 127.136 li
21.8224 127.303 li
21.6555 127.402 li
21.9893 127.203 mo
21.89 127.036 li
22.0568 126.937 li
22.1562 127.104 li
21.9893 127.203 li
22.3231 127.005 mo
22.2237 126.838 li
22.3906 126.738 li
22.49 126.905 li
22.3231 127.005 li
22.6568 126.806 mo
22.5575 126.639 li
22.7243 126.54 li
22.8237 126.706 li
22.6568 126.806 li
22.9906 126.607 mo
22.8912 126.44 li
23.0582 126.341 li
23.1575 126.508 li
22.9906 126.607 li
23.3244 126.408 mo
23.2251 126.241 li
23.3919 126.142 li
23.4913 126.309 li
23.3244 126.408 li
23.6582 126.21 mo
23.5588 126.043 li
23.7257 125.943 li
23.8251 126.11 li
23.6582 126.21 li
23.9919 126.011 mo
23.8926 125.844 li
24.0595 125.745 li
24.1588 125.911 li
23.9919 126.011 li
24.3257 125.812 mo
24.2264 125.645 li
24.3933 125.546 li
24.4927 125.713 li
24.3257 125.812 li
24.6595 125.613 mo
24.5602 125.446 li
24.727 125.347 li
24.8264 125.514 li
24.6595 125.613 li
24.9933 125.415 mo
24.8939 125.248 li
25.0608 125.148 li
25.1602 125.315 li
24.9933 125.415 li
25.327 125.216 mo
25.2277 125.049 li
25.3946 124.95 li
25.494 125.117 li
25.327 125.216 li
25.6609 125.017 mo
25.5615 124.85 li
25.7284 124.751 li
25.8278 124.918 li
25.6609 125.017 li
25.9946 124.818 mo
25.8953 124.652 li
26.0621 124.552 li
26.1615 124.719 li
25.9946 124.818 li
26.3284 124.62 mo
26.229 124.453 li
26.3959 124.353 li
26.4953 124.52 li
26.3284 124.62 li
26.6622 124.421 mo
26.5629 124.254 li
26.7297 124.155 li
26.8291 124.322 li
26.6622 124.421 li
26.996 124.222 mo
26.8966 124.055 li
27.0635 123.956 li
27.1629 124.123 li
26.996 124.222 li
27.3297 124.024 mo
27.2304 123.857 li
27.3973 123.757 li
27.4966 123.924 li
27.3297 124.024 li
27.6635 123.825 mo
27.5641 123.658 li
27.7311 123.559 li
27.8304 123.725 li
27.6635 123.825 li
27.9974 123.626 mo
27.898 123.459 li
28.0649 123.36 li
28.1642 123.527 li
27.9974 123.626 li
28.3311 123.427 mo
28.2317 123.26 li
28.3986 123.161 li
28.498 123.328 li
28.3311 123.427 li
28.6649 123.229 mo
28.5655 123.062 li
28.7324 122.962 li
28.8317 123.129 li
28.6649 123.229 li
28.9986 123.03 mo
28.8993 122.863 li
29.0662 122.764 li
29.1656 122.931 li
28.9986 123.03 li
29.3325 122.831 mo
29.2331 122.664 li
29.4 122.565 li
29.4993 122.732 li
29.3325 122.831 li
29.6662 122.632 mo
29.5668 122.466 li
29.7337 122.366 li
29.8331 122.533 li
29.6662 122.632 li
30 122.434 mo
29.9006 122.267 li
30.0675 122.167 li
30.1668 122.334 li
30 122.434 li
30.3338 122.235 mo
30.2344 122.068 li
30.4013 121.969 li
30.5007 122.136 li
30.3338 122.235 li
30.6676 122.036 mo
30.5682 121.869 li
30.7351 121.77 li
30.8344 121.937 li
30.6676 122.036 li
31.0013 121.838 mo
30.9019 121.671 li
31.0688 121.571 li
31.1682 121.738 li
31.0013 121.838 li
31.3351 121.639 mo
31.2357 121.472 li
31.4027 121.373 li
31.502 121.539 li
31.3351 121.639 li
31.6689 121.44 mo
31.5695 121.273 li
31.7364 121.174 li
31.8358 121.341 li
31.6689 121.44 li
32.0027 121.241 mo
31.9033 121.074 li
32.0702 120.975 li
32.1695 121.142 li
32.0027 121.241 li
32.3364 121.043 mo
32.237 120.876 li
32.4039 120.776 li
32.5033 120.943 li
32.3364 121.043 li
32.6702 120.844 mo
32.5709 120.677 li
32.7378 120.578 li
32.8371 120.745 li
32.6702 120.844 li
33.004 120.645 mo
32.9046 120.478 li
33.0715 120.379 li
33.1709 120.546 li
33.004 120.645 li
33.3378 120.446 mo
33.2384 120.28 li
33.4053 120.18 li
33.5046 120.347 li
33.3378 120.446 li
33.6715 120.248 mo
33.5722 120.081 li
33.7391 119.981 li
33.8385 120.148 li
33.6715 120.248 li
34.0054 120.049 mo
33.906 119.882 li
34.0729 119.783 li
34.1722 119.95 li
34.0054 120.049 li
34.3391 119.85 mo
34.2397 119.683 li
34.4066 119.584 li
34.506 119.751 li
34.3391 119.85 li
34.6729 119.651 mo
34.5735 119.485 li
34.7404 119.385 li
34.8397 119.552 li
34.6729 119.651 li
35.0067 119.453 mo
34.9073 119.286 li
35.0742 119.186 li
35.1736 119.353 li
35.0067 119.453 li
35.3405 119.254 mo
35.2411 119.087 li
35.408 118.988 li
35.5073 119.155 li
35.3405 119.254 li
35.6742 119.055 mo
35.5749 118.888 li
35.7417 118.789 li
35.8411 118.956 li
35.6742 119.055 li
36.008 118.857 mo
35.9086 118.69 li
36.0756 118.59 li
36.1749 118.757 li
36.008 118.857 li
36.3418 118.658 mo
36.2425 118.491 li
36.4093 118.392 li
36.5087 118.558 li
36.3418 118.658 li
36.6756 118.459 mo
36.5762 118.292 li
36.7431 118.193 li
36.8425 118.36 li
36.6756 118.459 li
37.0093 118.26 mo
36.91 118.093 li
37.0768 117.994 li
37.1762 118.161 li
37.0093 118.26 li
37.3431 118.062 mo
37.2438 117.895 li
37.4107 117.795 li
37.5101 117.962 li
37.3431 118.062 li
37.6769 117.863 mo
37.5776 117.696 li
37.7444 117.597 li
37.8438 117.764 li
37.6769 117.863 li
38.0107 117.664 mo
37.9113 117.497 li
38.0782 117.398 li
38.1776 117.565 li
38.0107 117.664 li
38.3444 117.465 mo
38.2451 117.299 li
38.412 117.199 li
38.5113 117.366 li
38.3444 117.465 li
38.6783 117.267 mo
38.5789 117.1 li
38.7458 117 li
38.8452 117.167 li
38.6783 117.267 li
39.012 117.068 mo
38.9127 116.901 li
39.0795 116.802 li
39.1789 116.969 li
39.012 117.068 li
39.3458 116.869 mo
39.2464 116.702 li
39.4133 116.603 li
39.5127 116.77 li
39.3458 116.869 li
39.6796 116.671 mo
39.5802 116.504 li
39.7471 116.404 li
39.8465 116.571 li
39.6796 116.671 li
40.0134 116.472 mo
39.914 116.305 li
40.0809 116.206 li
40.1803 116.372 li
40.0134 116.472 li
40.3471 116.273 mo
40.2478 116.106 li
40.4146 116.007 li
40.514 116.174 li
40.3471 116.273 li
40.6809 116.074 mo
40.5815 115.907 li
40.7485 115.808 li
40.8478 115.975 li
40.6809 116.074 li
41.0147 115.876 mo
40.9154 115.709 li
41.0822 115.609 li
41.1816 115.776 li
41.0147 115.876 li
41.3485 115.677 mo
41.2491 115.51 li
41.416 115.411 li
41.5154 115.578 li
41.3485 115.677 li
41.6822 115.478 mo
41.5829 115.311 li
41.7498 115.212 li
41.8491 115.379 li
41.6822 115.478 li
42.016 115.279 mo
41.9167 115.113 li
42.0836 115.013 li
42.1829 115.18 li
42.016 115.279 li
42.3498 115.081 mo
42.2505 114.914 li
42.4174 114.814 li
42.5167 114.981 li
42.3498 115.081 li
42.6836 114.882 mo
42.5842 114.715 li
42.7511 114.616 li
42.8505 114.783 li
42.6836 114.882 li
43.0174 114.683 mo
42.918 114.516 li
43.0849 114.417 li
43.1842 114.584 li
43.0174 114.683 li
43.3512 114.485 mo
43.2518 114.318 li
43.4187 114.218 li
43.5181 114.385 li
43.3512 114.485 li
43.685 114.286 mo
43.5856 114.119 li
43.7525 114.02 li
43.8518 114.186 li
43.685 114.286 li
44.0187 114.087 mo
43.9193 113.92 li
44.0862 113.821 li
44.1856 113.988 li
44.0187 114.087 li
44.3525 113.888 mo
44.2531 113.721 li
44.4201 113.622 li
44.5194 113.789 li
44.3525 113.888 li
44.6863 113.69 mo
44.5869 113.523 li
44.7538 113.423 li
44.8532 113.59 li
44.6863 113.69 li
45.0201 113.491 mo
44.9207 113.324 li
45.0876 113.225 li
45.1869 113.391 li
45.0201 113.491 li
45.3538 113.292 mo
45.2544 113.125 li
45.4213 113.026 li
45.5207 113.193 li
45.3538 113.292 li
45.6876 113.093 mo
45.5883 112.926 li
45.7552 112.827 li
45.8545 112.994 li
45.6876 113.093 li
46.0214 112.895 mo
45.922 112.728 li
46.0889 112.628 li
46.1883 112.795 li
46.0214 112.895 li
46.3552 112.696 mo
46.2558 112.529 li
46.4227 112.43 li
46.522 112.597 li
46.3552 112.696 li
46.6889 112.497 mo
46.5896 112.33 li
46.7565 112.231 li
46.8558 112.398 li
46.6889 112.497 li
47.0228 112.298 mo
46.9234 112.132 li
47.0903 112.032 li
47.1896 112.199 li
47.0228 112.298 li
.36408 .213107 0 0 cmyk
f
47.3565 112.1 mo
47.2571 111.933 li
47.3309 111.889 li
47.4302 112.056 li
47.3565 112.1 li
.904997 .707607 .0103151 0 cmyk
f
220.099 63.3019 mo
219.979 63.2087 li
220.098 63.0554 li
220.24 63.1657 li
220.216 63.1881 220.192 63.2107 220.169 63.2335 cv
220.145 63.2561 220.122 63.2789 220.099 63.3019 cv
.36408 .213107 0 0 cmyk
f
220.132 63.328 mo
220.099 63.3019 li
220.122 63.2789 220.145 63.2561 220.169 63.2335 cv
220.192 63.2107 220.216 63.1881 220.24 63.1657 cv
220.252 63.1746 li
220.132 63.328 li
.904997 .707607 .0103151 0 cmyk
f
219.826 63.0894 mo
219.672 62.97 li
219.792 62.8168 li
219.945 62.9361 li
219.826 63.0894 li
219.519 62.8508 mo
219.366 62.7315 li
219.485 62.5782 li
219.638 62.6975 li
219.519 62.8508 li
219.213 62.6122 mo
219.059 62.4929 li
219.179 62.3397 li
219.332 62.459 li
219.213 62.6122 li
218.906 62.3736 mo
218.753 62.2544 li
218.872 62.1011 li
219.025 62.2204 li
218.906 62.3736 li
218.599 62.1351 mo
218.446 62.0158 li
218.565 61.8626 li
218.719 61.9818 li
218.599 62.1351 li
218.293 61.8965 mo
218.14 61.7773 li
218.259 61.6239 li
218.412 61.7433 li
218.293 61.8965 li
217.986 61.658 mo
217.833 61.5387 li
217.952 61.3854 li
218.106 61.5047 li
217.986 61.658 li
217.68 61.4194 mo
217.526 61.3001 li
217.646 61.1468 li
217.799 61.2661 li
217.68 61.4194 li
217.373 61.1808 mo
217.22 61.0615 li
217.339 60.9083 li
217.492 61.0275 li
217.373 61.1808 li
217.067 60.9422 mo
216.913 60.8229 li
217.032 60.6697 li
217.186 60.789 li
217.067 60.9422 li
216.76 60.7037 mo
216.607 60.5844 li
216.726 60.4311 li
216.879 60.5504 li
216.76 60.7037 li
216.453 60.4651 mo
216.3 60.3458 li
216.419 60.1926 li
216.573 60.3119 li
216.453 60.4651 li
216.147 60.2265 mo
215.994 60.1073 li
216.113 59.954 li
216.266 60.0733 li
216.147 60.2265 li
215.84 59.988 mo
215.687 59.8687 li
215.806 59.7154 li
215.96 59.8347 li
215.84 59.988 li
215.534 59.7494 mo
215.38 59.6302 li
215.5 59.4768 li
215.653 59.5961 li
215.534 59.7494 li
215.227 59.5109 mo
215.074 59.3915 li
215.193 59.2383 li
215.346 59.3576 li
215.227 59.5109 li
214.92 59.2722 mo
214.767 59.153 li
214.887 58.9997 li
215.04 59.119 li
214.92 59.2722 li
214.614 59.0337 mo
214.461 58.9144 li
214.58 58.7612 li
214.733 58.8804 li
214.614 59.0337 li
214.307 58.7951 mo
214.154 58.6758 li
214.273 58.5226 li
214.427 58.6419 li
214.307 58.7951 li
214.001 58.5566 mo
213.847 58.4373 li
213.967 58.284 li
214.12 58.4033 li
214.001 58.5566 li
213.694 58.318 mo
213.541 58.1987 li
213.66 58.0455 li
213.814 58.1648 li
213.694 58.318 li
213.388 58.0795 mo
213.234 57.9602 li
213.354 57.8068 li
213.507 57.9261 li
213.388 58.0795 li
213.081 57.8409 mo
212.928 57.7216 li
213.047 57.5683 li
213.2 57.6876 li
213.081 57.8409 li
212.775 57.6023 mo
212.621 57.483 li
212.74 57.3297 li
212.894 57.449 li
212.775 57.6023 li
212.468 57.3637 mo
212.315 57.2444 li
212.434 57.0912 li
212.587 57.2105 li
212.468 57.3637 li
212.161 57.1251 mo
212.008 57.0059 li
212.127 56.8526 li
212.281 56.9719 li
212.161 57.1251 li
211.855 56.8866 mo
211.702 56.7673 li
211.821 56.6141 li
211.974 56.7333 li
211.855 56.8866 li
211.548 56.648 mo
211.395 56.5287 li
211.514 56.3755 li
211.667 56.4948 li
211.548 56.648 li
211.242 56.4095 mo
211.088 56.2902 li
211.208 56.1369 li
211.361 56.2562 li
211.242 56.4095 li
210.935 56.1709 mo
210.782 56.0516 li
210.901 55.8983 li
211.054 56.0176 li
210.935 56.1709 li
210.628 55.9324 mo
210.475 55.8131 li
210.595 55.6597 li
210.748 55.779 li
210.628 55.9324 li
210.322 55.6937 mo
210.169 55.5745 li
210.288 55.4212 li
210.441 55.5405 li
210.322 55.6937 li
210.015 55.4552 mo
209.862 55.3359 li
209.981 55.1826 li
210.135 55.3019 li
210.015 55.4552 li
209.709 55.2166 mo
209.555 55.0973 li
209.675 54.9441 li
209.828 55.0634 li
209.709 55.2166 li
209.402 54.978 mo
209.249 54.8588 li
209.368 54.7055 li
209.521 54.8248 li
209.402 54.978 li
209.096 54.7395 mo
208.942 54.6202 li
209.062 54.467 li
209.215 54.5862 li
209.096 54.7395 li
208.789 54.5009 mo
208.636 54.3816 li
208.755 54.2283 li
208.908 54.3476 li
208.789 54.5009 li
208.482 54.2624 mo
208.329 54.1431 li
208.448 53.9898 li
208.602 54.109 li
208.482 54.2624 li
208.176 54.0238 mo
208.023 53.9045 li
208.142 53.7512 li
208.295 53.8705 li
208.176 54.0238 li
207.869 53.7853 mo
207.716 53.6659 li
207.835 53.5126 li
207.989 53.6319 li
207.869 53.7853 li
207.563 53.5466 mo
207.409 53.4273 li
207.529 53.2741 li
207.682 53.3934 li
207.563 53.5466 li
207.256 53.3081 mo
207.103 53.1888 li
207.222 53.0355 li
207.375 53.1548 li
207.256 53.3081 li
206.95 53.0695 mo
206.796 52.9502 li
206.916 52.797 li
207.069 52.9163 li
206.95 53.0695 li
206.643 52.8309 mo
206.49 52.7117 li
206.609 52.5583 li
206.762 52.6777 li
206.643 52.8309 li
206.336 52.5924 mo
206.183 52.4731 li
206.302 52.3198 li
206.456 52.4391 li
206.336 52.5924 li
206.03 52.3538 mo
205.877 52.2346 li
205.996 52.0812 li
206.149 52.2005 li
206.03 52.3538 li
205.723 52.1153 mo
205.57 51.996 li
205.689 51.8427 li
205.843 51.9619 li
205.723 52.1153 li
205.417 51.8767 mo
205.263 51.7574 li
205.383 51.6041 li
205.536 51.7234 li
205.417 51.8767 li
205.11 51.6381 mo
204.957 51.5188 li
205.076 51.3656 li
205.229 51.4848 li
205.11 51.6381 li
204.804 51.3995 mo
204.65 51.2802 li
204.77 51.127 li
204.923 51.2463 li
204.804 51.3995 li
204.497 51.161 mo
204.344 51.0417 li
204.463 50.8884 li
204.616 51.0077 li
204.497 51.161 li
204.19 50.9224 mo
204.037 50.8031 li
204.156 50.6498 li
204.31 50.7691 li
204.19 50.9224 li
203.884 50.6838 mo
203.731 50.5646 li
203.85 50.4112 li
204.003 50.5305 li
203.884 50.6838 li
203.577 50.4453 mo
203.424 50.326 li
203.543 50.1727 li
203.697 50.292 li
203.577 50.4453 li
203.271 50.2067 mo
203.117 50.0874 li
203.237 49.9341 li
203.39 50.0534 li
203.271 50.2067 li
202.964 49.9681 mo
202.811 49.8488 li
202.93 49.6956 li
203.083 49.8148 li
202.964 49.9681 li
202.658 49.7295 mo
202.504 49.6103 li
202.624 49.457 li
202.777 49.5763 li
202.658 49.7295 li
202.351 49.491 mo
202.198 49.3717 li
202.317 49.2185 li
202.47 49.3377 li
202.351 49.491 li
202.044 49.2524 mo
201.891 49.1331 li
202.01 48.9798 li
202.164 49.0992 li
202.044 49.2524 li
201.738 49.0139 mo
201.585 48.8946 li
201.704 48.7413 li
201.857 48.8606 li
201.738 49.0139 li
201.431 48.7753 mo
201.278 48.656 li
201.397 48.5027 li
201.551 48.622 li
201.431 48.7753 li
201.125 48.5367 mo
200.971 48.4175 li
201.091 48.2641 li
201.244 48.3834 li
201.125 48.5367 li
200.818 48.2981 mo
200.665 48.1788 li
200.784 48.0256 li
200.937 48.1449 li
200.818 48.2981 li
200.512 48.0596 mo
200.358 47.9403 li
200.477 47.787 li
200.631 47.9063 li
200.512 48.0596 li
200.205 47.821 mo
200.052 47.7017 li
200.171 47.5485 li
200.324 47.6678 li
200.205 47.821 li
199.898 47.5824 mo
199.745 47.4632 li
199.864 47.3099 li
200.018 47.4292 li
199.898 47.5824 li
199.592 47.3439 mo
199.579 47.334 li
199.613 47.301 199.646 47.2673 199.678 47.2329 cv
199.592 47.3439 li
.36408 .213107 0 0 cmyk
f
199.579 47.334 mo
199.439 47.2246 li
199.558 47.0713 li
199.711 47.1906 li
199.678 47.2329 li
199.646 47.2673 199.613 47.301 199.579 47.334 cv
.904997 .707607 .0103151 0 cmyk
f
229.07 63.3142 mo
229.043 63.2871 229.015 63.2601 228.988 63.2335 cv
228.968 63.215 228.949 63.1966 228.93 63.1783 cv
228.962 63.1513 li
229.087 63.3001 li
229.07 63.3142 li
.36408 .213107 0 0 cmyk
f
228.938 63.4249 mo
228.813 63.2761 li
228.93 63.1783 li
228.949 63.1966 228.968 63.215 228.988 63.2335 cv
229.015 63.2601 229.043 63.2871 229.07 63.3142 cv
228.938 63.4249 li
.904997 .707607 .0103151 0 cmyk
f
229.236 63.1752 mo
229.111 63.0264 li
229.259 62.9015 li
229.384 63.0503 li
229.236 63.1752 li
229.533 62.9254 mo
229.408 62.7767 li
229.557 62.6517 li
229.682 62.8005 li
229.533 62.9254 li
229.831 62.6757 mo
229.706 62.5269 li
229.855 62.402 li
229.979 62.5507 li
229.831 62.6757 li
230.128 62.4259 mo
230.003 62.2772 li
230.152 62.1522 li
230.277 62.301 li
230.128 62.4259 li
230.426 62.1762 mo
230.301 62.0274 li
230.45 61.9025 li
230.574 62.0512 li
230.426 62.1762 li
230.723 61.9264 mo
230.598 61.7777 li
230.747 61.6527 li
230.872 61.8015 li
230.723 61.9264 li
231.021 61.6767 mo
230.896 61.5279 li
231.045 61.403 li
231.17 61.5518 li
231.021 61.6767 li
231.318 61.4269 mo
231.193 61.2781 li
231.342 61.1533 li
231.467 61.302 li
231.318 61.4269 li
231.616 61.1771 mo
231.491 61.0283 li
231.64 60.9035 li
231.765 61.0523 li
231.616 61.1771 li
231.913 60.9273 mo
231.789 60.7786 li
231.937 60.6538 li
232.062 60.8025 li
231.913 60.9273 li
232.211 60.6776 mo
232.086 60.5288 li
232.235 60.404 li
232.36 60.5528 li
232.211 60.6776 li
232.508 60.4279 mo
232.384 60.2791 li
232.532 60.1543 li
232.657 60.303 li
232.508 60.4279 li
232.806 60.1781 mo
232.681 60.0294 li
232.83 59.9045 li
232.955 60.0532 li
232.806 60.1781 li
233.104 59.9284 mo
232.979 59.7796 li
233.127 59.6547 li
233.252 59.8035 li
233.104 59.9284 li
233.401 59.6786 mo
233.276 59.5299 li
233.425 59.405 li
233.55 59.5537 li
233.401 59.6786 li
233.699 59.4289 mo
233.574 59.2801 li
233.722 59.1552 li
233.847 59.304 li
233.699 59.4289 li
233.996 59.1791 mo
233.871 59.0304 li
234.02 58.9055 li
234.145 59.0542 li
233.996 59.1791 li
234.294 58.9294 mo
234.169 58.7806 li
234.317 58.6557 li
234.442 58.8045 li
234.294 58.9294 li
234.591 58.6796 mo
234.466 58.5308 li
234.615 58.406 li
234.74 58.5547 li
234.591 58.6796 li
234.889 58.4298 mo
234.764 58.2811 li
234.913 58.1562 li
235.037 58.305 li
234.889 58.4298 li
235.186 58.1801 mo
235.061 58.0313 li
235.21 57.9065 li
235.335 58.0552 li
235.186 58.1801 li
235.484 57.9303 mo
235.359 57.7816 li
235.508 57.6567 li
235.633 57.8055 li
235.484 57.9303 li
235.781 57.6806 mo
235.656 57.5318 li
235.805 57.407 li
235.93 57.5557 li
235.781 57.6806 li
236.079 57.4308 mo
235.954 57.2821 li
236.103 57.1572 li
236.228 57.306 li
236.079 57.4308 li
236.376 57.1811 mo
236.251 57.0323 li
236.4 56.9074 li
236.525 57.0562 li
236.376 57.1811 li
236.674 56.9313 mo
236.549 56.7826 li
236.698 56.6577 li
236.823 56.8064 li
236.674 56.9313 li
236.971 56.6816 mo
236.847 56.5328 li
236.995 56.4079 li
237.12 56.5567 li
236.971 56.6816 li
237.269 56.4318 mo
237.144 56.2831 li
237.293 56.1582 li
237.418 56.3069 li
237.269 56.4318 li
237.566 56.1821 mo
237.442 56.0333 li
237.59 55.9084 li
237.715 56.0572 li
237.566 56.1821 li
237.864 55.9323 mo
237.739 55.7836 li
237.888 55.6587 li
238.013 55.8074 li
237.864 55.9323 li
238.161 55.6826 mo
238.037 55.5338 li
238.185 55.4089 li
238.31 55.5577 li
238.161 55.6826 li
238.459 55.4328 mo
238.334 55.284 li
238.483 55.1592 li
238.608 55.3079 li
238.459 55.4328 li
238.757 55.183 mo
238.632 55.0343 li
238.781 54.9094 li
238.905 55.0582 li
238.757 55.183 li
239.054 54.9333 mo
238.929 54.7845 li
239.078 54.6597 li
239.203 54.8085 li
239.054 54.9333 li
239.352 54.6835 mo
239.227 54.5348 li
239.376 54.4099 li
239.5 54.5587 li
239.352 54.6835 li
239.649 54.4338 mo
239.524 54.285 li
239.673 54.1602 li
239.798 54.3089 li
239.649 54.4338 li
239.947 54.1841 mo
239.822 54.0353 li
239.971 53.9104 li
240.096 54.0592 li
239.947 54.1841 li
240.244 53.9343 mo
240.119 53.7855 li
240.268 53.6606 li
240.393 53.8094 li
240.244 53.9343 li
240.542 53.6846 mo
240.417 53.5358 li
240.566 53.4109 li
240.691 53.5596 li
240.542 53.6846 li
240.839 53.4348 mo
240.714 53.2861 li
240.863 53.1611 li
240.988 53.3099 li
240.839 53.4348 li
241.137 53.1851 mo
241.012 53.0363 li
241.161 52.9114 li
241.286 53.0602 li
241.137 53.1851 li
241.434 52.9353 mo
241.309 52.7865 li
241.458 52.6617 li
241.583 52.8104 li
241.434 52.9353 li
241.732 52.6855 mo
241.607 52.5368 li
241.756 52.4119 li
241.881 52.5607 li
241.732 52.6855 li
242.029 52.4357 mo
241.905 52.287 li
242.053 52.1622 li
242.178 52.3109 li
242.029 52.4357 li
242.327 52.186 mo
242.202 52.0372 li
242.351 51.9124 li
242.476 52.0612 li
242.327 52.186 li
242.625 51.9362 mo
242.5 51.7875 li
242.648 51.6627 li
242.773 51.8114 li
242.625 51.9362 li
242.922 51.6865 mo
242.797 51.5378 li
242.946 51.4129 li
243.071 51.5617 li
242.922 51.6865 li
243.22 51.4368 mo
243.095 51.288 li
243.243 51.1631 li
243.368 51.3119 li
243.22 51.4368 li
243.517 51.187 mo
243.392 51.0383 li
243.541 50.9133 li
243.666 51.0621 li
243.517 51.187 li
243.815 50.9373 mo
243.69 50.7885 li
243.839 50.6636 li
243.963 50.8123 li
243.815 50.9373 li
244.112 50.6875 mo
243.987 50.5388 li
244.136 50.4138 li
244.261 50.5626 li
244.112 50.6875 li
244.41 50.4378 mo
244.285 50.289 li
244.434 50.1641 li
244.558 50.3129 li
244.41 50.4378 li
244.707 50.188 mo
244.582 50.0393 li
244.731 49.9144 li
244.856 50.0631 li
244.707 50.188 li
245.005 49.9383 mo
244.88 49.7895 li
245.029 49.6646 li
245.153 49.8134 li
245.005 49.9383 li
245.302 49.6885 mo
245.177 49.5397 li
245.326 49.4149 li
245.451 49.5636 li
245.302 49.6885 li
245.6 49.4387 mo
245.475 49.2899 li
245.624 49.1651 li
245.749 49.3139 li
245.6 49.4387 li
245.897 49.1889 mo
245.772 49.0402 li
245.921 48.9154 li
246.046 49.0641 li
245.897 49.1889 li
246.195 48.9392 mo
246.07 48.7905 li
246.219 48.6656 li
246.344 48.8144 li
246.195 48.9392 li
246.492 48.6895 mo
246.368 48.5407 li
246.516 48.4159 li
246.641 48.5646 li
246.492 48.6895 li
246.79 48.4397 mo
246.665 48.291 li
246.814 48.1661 li
246.939 48.3148 li
246.79 48.4397 li
247.088 48.19 mo
246.963 48.0412 li
247.111 47.9163 li
247.236 48.0651 li
247.088 48.19 li
247.385 47.9402 mo
247.26 47.7915 li
247.409 47.6666 li
247.534 47.8153 li
247.385 47.9402 li
247.683 47.6905 mo
247.558 47.5417 li
247.706 47.4168 li
247.831 47.5656 li
247.683 47.6905 li
247.98 47.4408 mo
247.855 47.292 li
247.952 47.2106 li
247.996 47.2584 248.042 47.3049 248.088 47.3498 cv
247.98 47.4408 li
.36408 .213107 0 0 cmyk
f
248.088 47.3498 mo
248.042 47.3049 247.996 47.2584 247.952 47.2106 cv
248.004 47.1671 li
248.129 47.3158 li
248.088 47.3498 li
.904997 .707607 .0103151 0 cmyk
f
250.435 109.168 mo
250.435 109.148 250.435 109.128 250.435 109.108 cv
250.435 109.107 250.435 109.107 250.435 109.106 cv
250.452 109.163 li
250.435 109.168 li
.36408 .213107 0 0 cmyk
f
250.268 109.217 mo
250.214 109.03 li
250.397 108.976 li
250.435 109.106 li
250.435 109.107 250.435 109.107 250.435 109.108 cv
250.435 109.128 250.435 109.148 250.435 109.168 cv
250.268 109.217 li
.904997 .707607 .0103151 0 cmyk
f
250.638 109.108 mo
250.583 108.922 li
250.77 108.867 li
250.825 109.053 li
250.638 109.108 li
251.011 108.998 mo
250.956 108.812 li
251.143 108.757 li
251.197 108.944 li
251.011 108.998 li
251.384 108.889 mo
251.329 108.703 li
251.515 108.648 li
251.57 108.834 li
251.384 108.889 li
251.756 108.779 mo
251.702 108.593 li
251.888 108.538 li
251.943 108.725 li
251.756 108.779 li
252.129 108.67 mo
252.074 108.484 li
252.261 108.429 li
252.315 108.615 li
252.129 108.67 li
252.502 108.561 mo
252.447 108.374 li
252.633 108.319 li
252.688 108.506 li
252.502 108.561 li
252.874 108.451 mo
252.82 108.265 li
253.006 108.21 li
253.061 108.396 li
252.874 108.451 li
253.247 108.342 mo
253.192 108.155 li
253.379 108.101 li
253.434 108.287 li
253.247 108.342 li
253.62 108.232 mo
253.565 108.046 li
253.752 107.991 li
253.806 108.177 li
253.62 108.232 li
253.993 108.123 mo
253.938 107.936 li
254.124 107.882 li
254.179 108.068 li
253.993 108.123 li
254.365 108.013 mo
254.311 107.827 li
254.497 107.772 li
254.552 107.959 li
254.365 108.013 li
254.738 107.904 mo
254.683 107.717 li
254.87 107.663 li
254.924 107.849 li
254.738 107.904 li
255.111 107.794 mo
255.056 107.608 li
255.242 107.553 li
255.297 107.74 li
255.111 107.794 li
255.483 107.685 mo
255.429 107.498 li
255.615 107.444 li
255.67 107.63 li
255.483 107.685 li
255.856 107.575 mo
255.801 107.389 li
255.988 107.334 li
256.042 107.521 li
255.856 107.575 li
256.229 107.466 mo
256.174 107.279 li
256.361 107.225 li
256.415 107.411 li
256.229 107.466 li
256.602 107.356 mo
256.547 107.17 li
256.733 107.115 li
256.788 107.302 li
256.602 107.356 li
256.974 107.247 mo
256.92 107.061 li
257.106 107.006 li
257.161 107.192 li
256.974 107.247 li
257.347 107.137 mo
257.292 106.951 li
257.479 106.896 li
257.533 107.083 li
257.347 107.137 li
257.72 107.028 mo
257.665 106.842 li
257.851 106.787 li
257.906 106.973 li
257.72 107.028 li
258.092 106.918 mo
258.038 106.732 li
258.224 106.677 li
258.279 106.864 li
258.092 106.918 li
258.465 106.809 mo
258.41 106.623 li
258.597 106.568 li
258.651 106.754 li
258.465 106.809 li
258.838 106.7 mo
258.783 106.513 li
258.97 106.458 li
259.024 106.645 li
258.838 106.7 li
259.211 106.59 mo
259.156 106.404 li
259.342 106.349 li
259.397 106.535 li
259.211 106.59 li
259.583 106.481 mo
259.529 106.294 li
259.715 106.24 li
259.77 106.426 li
259.583 106.481 li
259.956 106.371 mo
259.901 106.185 li
260.088 106.13 li
260.142 106.316 li
259.956 106.371 li
260.329 106.262 mo
260.274 106.075 li
260.46 106.021 li
260.515 106.207 li
260.329 106.262 li
260.701 106.152 mo
260.647 105.966 li
260.833 105.911 li
260.888 106.097 li
260.701 106.152 li
261.074 106.043 mo
261.019 105.856 li
261.206 105.802 li
261.261 105.988 li
261.074 106.043 li
261.447 105.933 mo
261.392 105.747 li
261.579 105.692 li
261.633 105.879 li
261.447 105.933 li
261.82 105.824 mo
261.765 105.637 li
261.951 105.583 li
262.006 105.769 li
261.82 105.824 li
262.192 105.714 mo
262.138 105.528 li
262.324 105.473 li
262.379 105.66 li
262.192 105.714 li
262.565 105.605 mo
262.51 105.418 li
262.697 105.364 li
262.751 105.55 li
262.565 105.605 li
262.938 105.495 mo
262.883 105.309 li
263.069 105.254 li
263.124 105.441 li
262.938 105.495 li
263.31 105.386 mo
263.256 105.199 li
263.442 105.145 li
263.497 105.331 li
263.31 105.386 li
263.683 105.276 mo
263.628 105.09 li
263.815 105.035 li
263.87 105.222 li
263.683 105.276 li
264.056 105.167 mo
264.001 104.981 li
264.188 104.926 li
264.242 105.112 li
264.056 105.167 li
264.429 105.057 mo
264.374 104.871 li
264.56 104.816 li
264.615 105.003 li
264.429 105.057 li
264.801 104.948 mo
264.747 104.762 li
264.933 104.707 li
264.988 104.893 li
264.801 104.948 li
265.174 104.839 mo
265.119 104.652 li
265.306 104.597 li
265.36 104.784 li
265.174 104.839 li
265.547 104.729 mo
265.492 104.543 li
265.678 104.488 li
265.733 104.674 li
265.547 104.729 li
265.92 104.62 mo
265.865 104.433 li
266.051 104.378 li
266.106 104.565 li
265.92 104.62 li
266.292 104.51 mo
266.238 104.324 li
266.424 104.269 li
266.479 104.455 li
266.292 104.51 li
266.665 104.401 mo
266.61 104.214 li
266.797 104.16 li
266.851 104.346 li
266.665 104.401 li
267.038 104.291 mo
266.983 104.105 li
267.169 104.05 li
267.224 104.236 li
267.038 104.291 li
267.41 104.182 mo
267.356 103.995 li
267.542 103.941 li
267.597 104.127 li
267.41 104.182 li
267.783 104.072 mo
267.728 103.886 li
267.915 103.831 li
267.969 104.017 li
267.783 104.072 li
.36408 .213107 0 0 cmyk
f
268.156 103.963 mo
268.101 103.776 li
268.288 103.722 li
268.342 103.908 li
268.156 103.963 li
.904997 .707607 .0103151 0 cmyk
f
244.124 131.689 mo
244.092 131.687 244.059 131.687 244.026 131.687 cv
243.994 131.687 243.962 131.687 243.93 131.688 cv
243.931 131.637 li
244.125 131.639 li
244.124 131.689 li
.36408 .213107 0 0 cmyk
f
244.123 131.833 mo
243.929 131.831 li
243.93 131.688 li
243.962 131.687 243.994 131.687 244.026 131.687 cv
244.059 131.687 244.092 131.687 244.124 131.689 cv
244.123 131.833 li
.904997 .707607 .0103151 0 cmyk
f
244.126 131.444 mo
243.932 131.443 li
243.934 131.249 li
244.128 131.25 li
244.126 131.444 li
244.13 131.056 mo
243.935 131.054 li
243.937 130.86 li
244.131 130.862 li
244.13 131.056 li
244.133 130.667 mo
243.939 130.666 li
243.94 130.472 li
244.135 130.473 li
244.133 130.667 li
244.136 130.279 mo
243.942 130.277 li
243.944 130.083 li
244.138 130.085 li
244.136 130.279 li
244.139 129.891 mo
243.945 129.889 li
243.947 129.695 li
244.141 129.696 li
244.139 129.891 li
244.143 129.502 mo
243.949 129.5 li
243.95 129.306 li
244.144 129.308 li
244.143 129.502 li
244.146 129.114 mo
243.952 129.112 li
243.953 128.918 li
244.148 128.919 li
244.146 129.114 li
244.149 128.725 mo
243.955 128.724 li
243.957 128.529 li
244.151 128.531 li
244.149 128.725 li
244.153 128.337 mo
243.958 128.335 li
243.96 128.141 li
244.154 128.143 li
244.153 128.337 li
244.156 127.948 mo
243.962 127.947 li
243.963 127.752 li
244.157 127.754 li
244.156 127.948 li
244.159 127.56 mo
243.965 127.558 li
243.967 127.364 li
244.161 127.366 li
244.159 127.56 li
244.162 127.171 mo
243.968 127.17 li
243.97 126.976 li
244.164 126.977 li
244.162 127.171 li
244.166 126.783 mo
243.971 126.781 li
243.973 126.587 li
244.167 126.589 li
244.166 126.783 li
244.169 126.395 mo
243.975 126.393 li
243.976 126.199 li
244.171 126.2 li
244.169 126.395 li
244.172 126.006 mo
243.978 126.005 li
243.98 125.81 li
244.174 125.812 li
244.172 126.006 li
244.175 125.618 mo
243.981 125.616 li
243.983 125.422 li
244.177 125.423 li
244.175 125.618 li
244.179 125.229 mo
243.984 125.228 li
243.986 125.033 li
244.18 125.035 li
244.179 125.229 li
244.182 124.841 mo
243.988 124.839 li
243.989 124.645 li
244.184 124.647 li
244.182 124.841 li
244.185 124.452 mo
243.991 124.451 li
243.993 124.257 li
244.187 124.258 li
244.185 124.452 li
244.189 124.064 mo
243.994 124.062 li
243.996 123.868 li
244.19 123.87 li
244.189 124.064 li
244.192 123.675 mo
243.997 123.674 li
243.999 123.48 li
244.193 123.481 li
244.192 123.675 li
244.195 123.287 mo
244.001 123.285 li
244.002 123.091 li
244.197 123.093 li
244.195 123.287 li
244.198 122.899 mo
244.004 122.897 li
244.006 122.703 li
244.2 122.704 li
244.198 122.899 li
244.202 122.51 mo
244.007 122.508 li
244.009 122.314 li
244.203 122.316 li
244.202 122.51 li
244.205 122.122 mo
244.011 122.12 li
244.012 121.926 li
244.206 121.927 li
244.205 122.122 li
244.208 121.733 mo
244.014 121.732 li
244.015 121.537 li
244.21 121.539 li
244.208 121.733 li
244.211 121.345 mo
244.017 121.343 li
244.019 121.149 li
244.213 121.15 li
244.211 121.345 li
244.215 120.956 mo
244.02 120.955 li
244.022 120.76 li
244.216 120.762 li
244.215 120.956 li
244.218 120.568 mo
244.024 120.566 li
244.025 120.372 li
244.219 120.374 li
244.218 120.568 li
244.221 120.179 mo
244.027 120.178 li
244.029 119.984 li
244.223 119.985 li
244.221 120.179 li
244.224 119.791 mo
244.03 119.789 li
244.032 119.595 li
244.226 119.597 li
244.224 119.791 li
244.228 119.402 mo
244.033 119.401 li
244.035 119.207 li
244.229 119.208 li
244.228 119.402 li
244.231 119.014 mo
244.037 119.012 li
244.038 118.818 li
244.233 118.82 li
244.231 119.014 li
244.234 118.626 mo
244.04 118.624 li
244.042 118.43 li
244.236 118.431 li
244.234 118.626 li
244.237 118.237 mo
244.043 118.236 li
244.045 118.041 li
244.239 118.043 li
244.237 118.237 li
244.241 117.849 mo
244.047 117.847 li
244.048 117.653 li
244.242 117.654 li
244.241 117.849 li
244.244 117.46 mo
244.05 117.459 li
244.051 117.264 li
244.246 117.266 li
244.244 117.46 li
244.247 117.072 mo
244.053 117.07 li
244.055 116.876 li
244.249 116.878 li
244.247 117.072 li
244.251 116.683 mo
244.056 116.682 li
244.058 116.488 li
244.252 116.489 li
244.251 116.683 li
244.254 116.295 mo
244.06 116.293 li
244.061 116.099 li
244.255 116.101 li
244.254 116.295 li
244.257 115.906 mo
244.063 115.905 li
244.064 115.711 li
244.259 115.712 li
244.257 115.906 li
244.26 115.518 mo
244.066 115.516 li
244.068 115.322 li
244.262 115.324 li
244.26 115.518 li
244.264 115.13 mo
244.169 115.129 li
244.178 115.129 244.187 115.129 244.196 115.129 cv
244.218 115.129 244.241 115.129 244.264 115.128 cv
244.264 115.13 li
244.112 115.128 mo
244.069 115.128 li
244.069 115.128 li
244.083 115.128 244.098 115.128 244.112 115.128 cv
.36408 .213107 0 0 cmyk
f
244.196 115.129 mo
244.187 115.129 244.178 115.129 244.169 115.129 cv
244.112 115.128 li
244.098 115.128 244.083 115.128 244.069 115.128 cv
244.071 114.934 li
244.265 114.935 li
244.264 115.128 li
244.241 115.129 244.218 115.129 244.196 115.129 cv
.904997 .707607 .0103151 0 cmyk
f
206.852 105.085 mo
206.803 105.048 li
206.918 104.892 li
206.968 104.928 li
206.852 105.085 li
f
206.647 104.933 mo
206.49 104.818 li
206.605 104.661 li
206.762 104.777 li
206.647 104.933 li
206.334 104.703 mo
206.177 104.587 li
206.293 104.431 li
206.449 104.546 li
206.334 104.703 li
206.021 104.472 mo
205.865 104.357 li
205.98 104.201 li
206.136 104.316 li
206.021 104.472 li
205.708 104.242 mo
205.552 104.126 li
205.667 103.97 li
205.824 104.085 li
205.708 104.242 li
205.396 104.011 mo
205.239 103.896 li
205.354 103.74 li
205.511 103.855 li
205.396 104.011 li
205.083 103.781 mo
204.926 103.666 li
205.042 103.509 li
205.198 103.625 li
205.083 103.781 li
204.77 103.55 mo
204.614 103.435 li
204.729 103.279 li
204.885 103.394 li
204.77 103.55 li
204.457 103.32 mo
204.301 103.205 li
204.416 103.048 li
204.573 103.164 li
204.457 103.32 li
204.145 103.09 mo
203.988 102.974 li
204.103 102.818 li
204.26 102.933 li
204.145 103.09 li
203.832 102.859 mo
203.676 102.744 li
203.791 102.588 li
203.947 102.703 li
203.832 102.859 li
203.519 102.629 mo
203.363 102.513 li
203.478 102.357 li
203.634 102.472 li
203.519 102.629 li
203.206 102.398 mo
203.05 102.283 li
203.165 102.127 li
203.322 102.242 li
203.206 102.398 li
202.894 102.168 mo
202.737 102.053 li
202.852 101.896 li
202.881 101.917 li
202.822 101.986 li
202.949 102.093 li
202.894 102.168 li
.36408 .213107 0 0 cmyk
f
202.949 102.093 mo
202.822 101.986 li
202.881 101.917 li
203.009 102.012 li
202.949 102.093 li
1 .87277 .340093 .34934 cmyk
f
202.581 101.937 mo
202.425 101.822 li
202.54 101.666 li
202.696 101.781 li
202.581 101.937 li
202.268 101.707 mo
202.112 101.592 li
202.227 101.435 li
202.383 101.551 li
202.268 101.707 li
201.955 101.477 mo
201.799 101.361 li
201.914 101.205 li
202.071 101.32 li
201.955 101.477 li
201.643 101.246 mo
201.486 101.131 li
201.602 100.975 li
201.758 101.09 li
201.643 101.246 li
201.33 101.016 mo
201.174 100.901 li
201.289 100.744 li
201.445 100.859 li
201.33 101.016 li
201.017 100.785 mo
200.861 100.67 li
200.976 100.514 li
201.132 100.629 li
201.017 100.785 li
200.704 100.555 mo
200.548 100.44 li
200.663 100.283 li
200.82 100.399 li
200.704 100.555 li
200.392 100.325 mo
200.235 100.209 li
200.351 100.053 li
200.507 100.168 li
200.392 100.325 li
200.079 100.094 mo
199.923 99.9789 li
200.038 99.8225 li
200.194 99.9377 li
200.079 100.094 li
199.766 99.8636 mo
199.61 99.7484 li
199.725 99.5921 li
199.881 99.7072 li
199.766 99.8636 li
199.453 99.6333 mo
199.297 99.518 li
199.412 99.3616 li
199.569 99.4769 li
199.453 99.6333 li
199.141 99.4028 mo
198.984 99.2876 li
199.1 99.1312 li
199.256 99.2465 li
199.141 99.4028 li
198.828 99.1724 mo
198.672 99.0572 li
198.787 98.9008 li
198.943 99.016 li
198.828 99.1724 li
198.515 98.9419 mo
198.359 98.8268 li
198.474 98.6704 li
198.63 98.7856 li
198.515 98.9419 li
198.203 98.7115 mo
198.046 98.5963 li
198.161 98.44 li
198.318 98.5551 li
198.203 98.7115 li
197.89 98.4811 mo
197.733 98.3659 li
197.849 98.2095 li
198.005 98.3247 li
197.89 98.4811 li
197.577 98.2507 mo
197.421 98.1354 li
197.536 97.9791 li
197.692 98.0944 li
197.577 98.2507 li
197.264 98.0203 mo
197.108 97.905 li
197.223 97.7486 li
197.379 97.8639 li
197.264 98.0203 li
196.952 97.7898 mo
196.795 97.6747 li
196.91 97.5183 li
197.067 97.6335 li
196.952 97.7898 li
.36408 .213107 0 0 cmyk
f
196.639 97.5594 mo
196.482 97.4442 li
196.598 97.2879 li
196.754 97.403 li
196.639 97.5594 li
196.326 97.3289 mo
196.17 97.2138 li
196.285 97.0574 li
196.441 97.1726 li
196.326 97.3289 li
1 .87277 .340093 .34934 cmyk
f
196.013 97.0986 mo
195.857 96.9833 li
195.972 96.827 li
196.129 96.9422 li
196.013 97.0986 li
195.701 96.8682 mo
195.544 96.7529 li
195.659 96.5965 li
195.816 96.7118 li
195.701 96.8682 li
195.388 96.6377 mo
195.231 96.5225 li
195.347 96.3661 li
195.503 96.4814 li
195.388 96.6377 li
195.075 96.4073 mo
194.919 96.2921 li
195.034 96.1358 li
195.19 96.2509 li
195.075 96.4073 li
194.762 96.1768 mo
194.606 96.0617 li
194.721 95.9053 li
194.878 96.0205 li
194.762 96.1768 li
194.45 95.9464 mo
194.293 95.8312 li
194.409 95.6749 li
194.565 95.7901 li
194.45 95.9464 li
194.137 95.7161 mo
193.98 95.6008 li
194.096 95.4444 li
194.252 95.5597 li
194.137 95.7161 li
193.824 95.4856 mo
193.668 95.3704 li
193.783 95.214 li
193.939 95.3293 li
193.824 95.4856 li
193.511 95.2552 mo
193.355 95.14 li
193.47 94.9836 li
193.627 95.0988 li
193.511 95.2552 li
193.199 95.0247 mo
193.042 94.9096 li
193.158 94.7532 li
193.314 94.8684 li
193.199 95.0247 li
192.886 94.7943 mo
192.73 94.6791 li
192.845 94.5228 li
193.001 94.6379 li
192.886 94.7943 li
192.573 94.5639 mo
192.417 94.4487 li
192.532 94.2923 li
192.688 94.4076 li
192.573 94.5639 li
192.26 94.3335 mo
192.104 94.2182 li
192.219 94.0619 li
192.376 94.1771 li
192.26 94.3335 li
191.948 94.1031 mo
191.791 93.9879 li
191.907 93.8315 li
192.063 93.9467 li
191.948 94.1031 li
191.635 93.8726 mo
191.479 93.7575 li
191.594 93.6011 li
191.75 93.7163 li
191.635 93.8726 li
191.322 93.6422 mo
191.166 93.527 li
191.281 93.3707 li
191.437 93.4858 li
191.322 93.6422 li
191.009 93.4118 mo
190.853 93.2966 li
190.968 93.1402 li
191.125 93.2554 li
191.009 93.4118 li
190.697 93.1814 mo
190.54 93.0661 li
190.656 92.9098 li
190.812 93.025 li
190.697 93.1814 li
190.384 92.951 mo
190.228 92.8357 li
190.343 92.6793 li
190.499 92.7946 li
190.384 92.951 li
190.071 92.7205 mo
189.915 92.6054 li
190.03 92.449 li
190.186 92.5642 li
190.071 92.7205 li
189.758 92.4901 mo
189.602 92.3749 li
189.717 92.2186 li
189.874 92.3337 li
189.758 92.4901 li
189.446 92.2596 mo
189.289 92.1445 li
189.405 91.9881 li
189.561 92.1033 li
189.446 92.2596 li
189.133 92.0293 mo
188.977 91.914 li
189.092 91.7577 li
189.248 91.8729 li
189.133 92.0293 li
188.82 91.7989 mo
188.664 91.6836 li
188.779 91.5272 li
188.936 91.6425 li
188.82 91.7989 li
188.508 91.5684 mo
188.351 91.4532 li
188.466 91.2968 li
188.623 91.412 li
188.508 91.5684 li
188.195 91.338 mo
188.038 91.2228 li
188.154 91.0664 li
188.31 91.1816 li
188.195 91.338 li
187.882 91.1075 mo
187.726 90.9924 li
187.841 90.836 li
187.997 90.9512 li
187.882 91.1075 li
187.569 90.8771 mo
187.413 90.7619 li
187.528 90.6056 li
187.685 90.7207 li
187.569 90.8771 li
187.257 90.6467 mo
187.1 90.5315 li
187.215 90.3751 li
187.372 90.4904 li
187.257 90.6467 li
186.944 90.4163 mo
186.787 90.301 li
186.903 90.1447 li
187.059 90.2599 li
186.944 90.4163 li
186.631 90.1859 mo
186.475 90.0707 li
186.59 89.9143 li
186.746 90.0295 li
186.631 90.1859 li
186.318 89.9554 mo
186.162 89.8403 li
186.277 89.6839 li
186.434 89.7991 li
186.318 89.9554 li
186.006 89.725 mo
185.849 89.6098 li
185.964 89.4535 li
186.121 89.5686 li
186.006 89.725 li
185.693 89.4946 mo
185.537 89.3794 li
185.652 89.223 li
185.808 89.3382 li
185.693 89.4946 li
185.38 89.2642 mo
185.224 89.1489 li
185.339 88.9926 li
185.495 89.1078 li
185.38 89.2642 li
185.067 89.0338 mo
184.911 88.9185 li
185.026 88.7621 li
185.183 88.8774 li
185.067 89.0338 li
184.755 88.8033 mo
184.598 88.6881 li
184.713 88.5318 li
184.87 88.647 li
184.755 88.8033 li
184.442 88.5729 mo
184.286 88.4577 li
184.401 88.3013 li
184.557 88.4165 li
184.442 88.5729 li
184.129 88.3425 mo
183.973 88.2273 li
184.088 88.0709 li
184.244 88.1861 li
184.129 88.3425 li
183.816 88.1121 mo
183.66 87.9968 li
183.775 87.8405 li
183.932 87.9557 li
183.816 88.1121 li
183.527 87.8499 mo
183.573 87.6918 li
183.619 87.7253 li
183.527 87.8499 li
183.349 87.7676 mo
183.347 87.7664 li
183.351 87.7621 li
183.349 87.7676 li
.36408 .213107 0 0 cmyk
f
183.504 87.8817 mo
183.349 87.7676 li
183.351 87.7621 li
183.463 87.61 li
183.573 87.6918 li
183.527 87.8499 li
183.504 87.8817 li
1 .87277 .340093 .34934 cmyk
f
183.191 87.6512 mo
183.035 87.536 li
183.15 87.3796 li
183.306 87.4949 li
183.191 87.6512 li
182.878 87.4208 mo
182.722 87.3056 li
182.837 87.1492 li
182.993 87.2644 li
182.878 87.4208 li
182.565 87.1903 mo
182.409 87.0752 li
182.524 86.9188 li
182.681 87.034 li
182.565 87.1903 li
182.253 86.9599 mo
182.096 86.8447 li
182.212 86.6884 li
182.368 86.8036 li
182.253 86.9599 li
181.94 86.7296 mo
181.784 86.6143 li
181.899 86.4579 li
182.055 86.5732 li
181.94 86.7296 li
181.627 86.4991 mo
181.471 86.3839 li
181.586 86.2275 li
181.742 86.3428 li
181.627 86.4991 li
181.314 86.2687 mo
181.158 86.1535 li
181.273 85.9971 li
181.43 86.1123 li
181.314 86.2687 li
181.002 86.0382 mo
180.845 85.923 li
180.961 85.7667 li
181.117 85.8819 li
181.002 86.0382 li
180.689 85.8078 mo
180.533 85.6926 li
180.648 85.5363 li
180.804 85.6514 li
180.689 85.8078 li
180.376 85.5774 mo
180.22 85.4622 li
180.335 85.3058 li
180.491 85.4211 li
180.376 85.5774 li
180.064 85.347 mo
179.907 85.2317 li
180.022 85.0754 li
180.179 85.1907 li
180.064 85.347 li
179.751 85.1166 mo
179.594 85.0014 li
179.71 84.845 li
179.866 84.9602 li
179.751 85.1166 li
179.438 84.8861 mo
179.282 84.7709 li
179.397 84.6146 li
179.553 84.7298 li
179.438 84.8861 li
179.125 84.6557 mo
178.969 84.5405 li
179.084 84.3842 li
179.241 84.4993 li
179.125 84.6557 li
178.813 84.4253 mo
178.656 84.3101 li
178.771 84.1537 li
178.928 84.2689 li
178.813 84.4253 li
178.5 84.1949 mo
178.343 84.0796 li
178.459 83.9233 li
178.615 84.0385 li
178.5 84.1949 li
178.187 83.9644 mo
178.031 83.8492 li
178.146 83.6928 li
178.302 83.8081 li
178.187 83.9644 li
177.874 83.734 mo
177.718 83.6188 li
177.833 83.4625 li
177.99 83.5777 li
177.874 83.734 li
177.562 83.5036 mo
177.405 83.3884 li
177.52 83.232 li
177.677 83.3472 li
177.562 83.5036 li
177.249 83.2731 mo
177.092 83.158 li
177.208 83.0016 li
177.364 83.1168 li
177.249 83.2731 li
176.936 83.0428 mo
176.78 82.9275 li
176.895 82.7712 li
177.051 82.8864 li
176.936 83.0428 li
176.623 82.8123 mo
176.467 82.6971 li
176.582 82.5407 li
176.739 82.656 li
176.623 82.8123 li
176.311 82.5819 mo
176.154 82.4667 li
176.269 82.3103 li
176.426 82.4255 li
176.311 82.5819 li
176.093 82.2229 mo
176.093 82.2087 176.093 82.1947 176.093 82.1804 cv
176.113 82.1951 li
176.093 82.2229 li
.36408 .213107 0 0 cmyk
f
175.998 82.3515 mo
175.842 82.2363 li
175.957 82.0799 li
176.093 82.1804 li
176.093 82.1947 176.093 82.2087 176.093 82.2229 cv
175.998 82.3515 li
.904997 .707607 .0103151 0 cmyk
f
174.492 132.639 mo
174.477 132.614 li
174.501 132.634 li
174.492 132.639 li
174.555 132.602 mo
174.638 132.504 li
174.659 132.54 li
174.555 132.602 li
174.4 132.484 mo
174.393 132.472 li
174.428 132.451 li
174.4 132.484 li
f
174.501 132.634 mo
174.477 132.614 li
174.4 132.484 li
174.428 132.451 li
174.56 132.373 li
174.638 132.504 li
174.555 132.602 li
174.501 132.634 li
1 .87277 .340093 .34934 cmyk
f
174.826 132.44 mo
174.77 132.347 li
174.903 132.19 li
174.993 132.341 li
174.826 132.44 li
.36408 .213107 0 0 cmyk
f
174.77 132.347 mo
174.726 132.273 li
174.893 132.174 li
174.903 132.19 li
174.77 132.347 li
1 .87277 .340093 .34934 cmyk
f
175.16 132.242 mo
175.06 132.075 li
175.227 131.975 li
175.326 132.142 li
175.16 132.242 li
175.493 132.043 mo
175.394 131.876 li
175.561 131.777 li
175.66 131.943 li
175.493 132.043 li
175.827 131.844 mo
175.728 131.677 li
175.895 131.578 li
175.994 131.745 li
175.827 131.844 li
176.161 131.645 mo
176.062 131.479 li
176.228 131.379 li
176.328 131.546 li
176.161 131.645 li
176.495 131.447 mo
176.395 131.28 li
176.562 131.18 li
176.662 131.347 li
176.495 131.447 li
176.829 131.248 mo
176.729 131.081 li
176.896 130.982 li
176.995 131.149 li
176.829 131.248 li
177.162 131.049 mo
177.063 130.882 li
177.23 130.783 li
177.329 130.95 li
177.162 131.049 li
177.496 130.85 mo
177.397 130.684 li
177.564 130.584 li
177.663 130.751 li
177.496 130.85 li
177.83 130.652 mo
177.731 130.485 li
177.897 130.385 li
177.997 130.552 li
177.83 130.652 li
178.164 130.453 mo
178.064 130.286 li
178.231 130.187 li
178.331 130.354 li
178.164 130.453 li
178.497 130.254 mo
178.398 130.087 li
178.565 129.988 li
178.664 130.155 li
178.497 130.254 li
178.831 130.056 mo
178.732 129.889 li
178.899 129.789 li
178.973 129.915 li
178.875 130.029 li
178.831 130.056 li
.36408 .213107 0 0 cmyk
f
178.875 130.029 mo
178.973 129.915 li
178.998 129.956 li
178.875 130.029 li
1 .87277 .340093 .34934 cmyk
f
179.165 129.857 mo
179.066 129.69 li
179.233 129.591 li
179.332 129.757 li
179.165 129.857 li
179.499 129.658 mo
179.399 129.491 li
179.4 129.491 li
179.51 129.585 li
179.611 129.467 li
179.666 129.559 li
179.499 129.658 li
.36408 .213107 0 0 cmyk
f
179.51 129.585 mo
179.4 129.491 li
179.566 129.392 li
179.611 129.467 li
179.51 129.585 li
1 .87277 .340093 .34934 cmyk
f
179.833 129.459 mo
179.733 129.292 li
179.9 129.193 li
179.999 129.36 li
179.833 129.459 li
180.166 129.261 mo
180.067 129.094 li
180.234 128.994 li
180.333 129.161 li
180.166 129.261 li
180.5 129.062 mo
180.401 128.895 li
180.568 128.796 li
180.667 128.963 li
180.5 129.062 li
180.834 128.863 mo
180.734 128.696 li
180.901 128.597 li
181.001 128.764 li
180.834 128.863 li
181.168 128.664 mo
181.068 128.498 li
181.235 128.398 li
181.335 128.565 li
181.168 128.664 li
181.501 128.466 mo
181.402 128.299 li
181.569 128.2 li
181.668 128.366 li
181.501 128.466 li
181.835 128.267 mo
181.736 128.1 li
181.903 128.001 li
182.002 128.168 li
181.835 128.267 li
182.169 128.068 mo
182.07 127.901 li
182.236 127.802 li
182.336 127.969 li
182.169 128.068 li
182.503 127.87 mo
182.403 127.703 li
182.57 127.603 li
182.67 127.77 li
182.503 127.87 li
182.837 127.671 mo
182.737 127.504 li
182.904 127.405 li
183.003 127.571 li
182.837 127.671 li
183.17 127.472 mo
183.071 127.305 li
183.238 127.206 li
183.337 127.373 li
183.17 127.472 li
183.504 127.273 mo
183.405 127.106 li
183.572 127.007 li
183.671 127.174 li
183.504 127.273 li
183.838 127.075 mo
183.739 126.908 li
183.905 126.808 li
184.005 126.975 li
183.838 127.075 li
184.172 126.876 mo
184.072 126.709 li
184.239 126.61 li
184.339 126.777 li
184.172 126.876 li
184.505 126.677 mo
184.406 126.51 li
184.573 126.411 li
184.672 126.578 li
184.505 126.677 li
184.839 126.478 mo
184.74 126.312 li
184.907 126.212 li
185.006 126.379 li
184.839 126.478 li
185.173 126.28 mo
185.074 126.113 li
185.241 126.013 li
185.34 126.18 li
185.173 126.28 li
185.507 126.081 mo
185.407 125.914 li
185.574 125.815 li
185.674 125.982 li
185.507 126.081 li
185.841 125.882 mo
185.741 125.715 li
185.908 125.616 li
186.007 125.783 li
185.841 125.882 li
186.174 125.683 mo
186.075 125.517 li
186.242 125.417 li
186.341 125.584 li
186.174 125.683 li
186.508 125.485 mo
186.409 125.318 li
186.576 125.219 li
186.675 125.385 li
186.508 125.485 li
186.842 125.286 mo
186.743 125.119 li
186.909 125.02 li
187.009 125.187 li
186.842 125.286 li
187.176 125.087 mo
187.076 124.92 li
187.243 124.821 li
187.343 124.988 li
187.176 125.087 li
187.509 124.889 mo
187.41 124.722 li
187.577 124.622 li
187.676 124.789 li
187.509 124.889 li
187.843 124.69 mo
187.744 124.523 li
187.911 124.424 li
188.01 124.59 li
187.843 124.69 li
188.177 124.491 mo
188.078 124.324 li
188.245 124.225 li
188.344 124.392 li
188.177 124.491 li
188.511 124.292 mo
188.411 124.126 li
188.578 124.026 li
188.678 124.193 li
188.511 124.292 li
188.845 124.094 mo
188.745 123.927 li
188.912 123.827 li
189.011 123.994 li
188.845 124.094 li
189.178 123.895 mo
189.079 123.728 li
189.246 123.629 li
189.345 123.796 li
189.178 123.895 li
189.512 123.696 mo
189.413 123.529 li
189.58 123.43 li
189.679 123.597 li
189.512 123.696 li
189.846 123.497 mo
189.747 123.331 li
189.913 123.231 li
190.013 123.398 li
189.846 123.497 li
190.18 123.299 mo
190.08 123.132 li
190.247 123.033 li
190.347 123.199 li
190.18 123.299 li
190.513 123.1 mo
190.414 122.933 li
190.581 122.834 li
190.68 123.001 li
190.513 123.1 li
190.847 122.901 mo
190.748 122.734 li
190.915 122.635 li
191.014 122.802 li
190.847 122.901 li
191.181 122.703 mo
191.082 122.536 li
191.249 122.436 li
191.348 122.603 li
191.181 122.703 li
191.515 122.504 mo
191.415 122.337 li
191.582 122.238 li
191.682 122.404 li
191.515 122.504 li
191.849 122.305 mo
191.749 122.138 li
191.916 122.039 li
192.015 122.206 li
191.849 122.305 li
192.182 122.106 mo
192.083 121.94 li
192.25 121.84 li
192.349 122.007 li
192.182 122.106 li
192.516 121.908 mo
192.417 121.741 li
192.584 121.641 li
192.683 121.808 li
192.516 121.908 li
192.85 121.709 mo
192.751 121.542 li
192.917 121.443 li
193.017 121.61 li
192.85 121.709 li
193.184 121.51 mo
193.084 121.343 li
193.251 121.244 li
193.351 121.411 li
193.184 121.51 li
193.517 121.311 mo
193.418 121.145 li
193.585 121.045 li
193.684 121.212 li
193.517 121.311 li
193.851 121.113 mo
193.752 120.946 li
193.919 120.846 li
194.018 121.013 li
193.851 121.113 li
194.185 120.914 mo
194.086 120.747 li
194.253 120.648 li
194.352 120.815 li
194.185 120.914 li
194.519 120.715 mo
194.419 120.548 li
194.586 120.449 li
194.686 120.616 li
194.519 120.715 li
194.853 120.516 mo
194.753 120.35 li
194.92 120.25 li
195.019 120.417 li
194.853 120.516 li
195.186 120.318 mo
195.087 120.151 li
195.254 120.052 li
195.353 120.218 li
195.186 120.318 li
195.52 120.119 mo
195.421 119.952 li
195.588 119.853 li
195.687 120.02 li
195.52 120.119 li
195.854 119.92 mo
195.755 119.753 li
195.921 119.654 li
196.021 119.821 li
195.854 119.92 li
196.188 119.722 mo
196.088 119.555 li
196.255 119.455 li
196.355 119.622 li
196.188 119.722 li
196.521 119.523 mo
196.422 119.356 li
196.589 119.257 li
196.688 119.424 li
196.521 119.523 li
196.855 119.324 mo
196.756 119.157 li
196.923 119.058 li
197.022 119.225 li
196.855 119.324 li
197.189 119.125 mo
197.09 118.959 li
197.257 118.859 li
197.356 119.026 li
197.189 119.125 li
197.523 118.927 mo
197.423 118.76 li
197.59 118.66 li
197.69 118.827 li
197.523 118.927 li
197.857 118.728 mo
197.757 118.561 li
197.924 118.462 li
198.023 118.629 li
197.857 118.728 li
198.19 118.529 mo
198.091 118.362 li
198.258 118.263 li
198.357 118.43 li
198.19 118.529 li
198.524 118.331 mo
198.425 118.164 li
198.592 118.064 li
198.691 118.231 li
198.524 118.331 li
198.858 118.132 mo
198.759 117.965 li
198.925 117.866 li
199.025 118.032 li
198.858 118.132 li
199.192 117.933 mo
199.092 117.766 li
199.259 117.667 li
199.359 117.834 li
199.192 117.933 li
199.526 117.734 mo
199.426 117.567 li
199.593 117.468 li
199.692 117.635 li
199.526 117.734 li
199.859 117.536 mo
199.76 117.369 li
199.927 117.269 li
200.026 117.436 li
199.859 117.536 li
200.193 117.337 mo
200.094 117.17 li
200.261 117.071 li
200.36 117.238 li
200.193 117.337 li
200.527 117.138 mo
200.428 116.971 li
200.594 116.872 li
200.694 117.039 li
200.527 117.138 li
200.861 116.939 mo
200.761 116.773 li
200.928 116.673 li
201.027 116.84 li
200.861 116.939 li
201.194 116.741 mo
201.095 116.574 li
201.262 116.474 li
201.361 116.641 li
201.194 116.741 li
201.528 116.542 mo
201.429 116.375 li
201.596 116.276 li
201.695 116.443 li
201.528 116.542 li
201.862 116.343 mo
201.763 116.176 li
201.929 116.077 li
202.029 116.244 li
201.862 116.343 li
202.196 116.145 mo
202.096 115.978 li
202.263 115.878 li
202.363 116.045 li
202.196 116.145 li
202.529 115.946 mo
202.43 115.779 li
202.597 115.68 li
202.696 115.846 li
202.529 115.946 li
202.863 115.747 mo
202.764 115.58 li
202.931 115.481 li
203.03 115.648 li
202.863 115.747 li
203.197 115.548 mo
203.098 115.381 li
203.265 115.282 li
203.364 115.449 li
203.197 115.548 li
203.531 115.35 mo
203.431 115.183 li
203.598 115.083 li
203.698 115.25 li
203.531 115.35 li
203.865 115.151 mo
203.765 114.984 li
203.932 114.885 li
204.032 115.051 li
203.865 115.151 li
204.198 114.952 mo
204.099 114.785 li
204.266 114.686 li
204.365 114.853 li
204.198 114.952 li
204.532 114.753 mo
204.433 114.586 li
204.6 114.487 li
204.699 114.654 li
204.532 114.753 li
204.866 114.555 mo
204.767 114.388 li
204.934 114.288 li
205.033 114.455 li
204.866 114.555 li
205.2 114.356 mo
205.1 114.189 li
205.267 114.09 li
205.367 114.257 li
205.2 114.356 li
205.534 114.157 mo
205.434 113.99 li
205.601 113.891 li
205.7 114.058 li
205.534 114.157 li
205.867 113.958 mo
205.768 113.792 li
205.935 113.692 li
206.034 113.859 li
205.867 113.958 li
206.201 113.76 mo
206.102 113.593 li
206.269 113.493 li
206.368 113.66 li
206.201 113.76 li
206.535 113.561 mo
206.436 113.394 li
206.602 113.295 li
206.702 113.462 li
206.535 113.561 li
.36408 .213107 0 0 cmyk
f
206.869 113.362 mo
206.769 113.195 li
206.843 113.151 li
206.942 113.318 li
206.869 113.362 li
.904997 .707607 .0103151 0 cmyk
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
/VALTWH+Calibri*1 uf
/VALTWH+Calibri uf
/PBAAAA+Calibri uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
